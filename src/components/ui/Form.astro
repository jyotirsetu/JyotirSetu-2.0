---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const {
  inputs,
  textarea,
  disclaimer,
  button = 'Contact us',
  description = '',
  action,
  method = 'POST',
  captcha,
  columns = 1,
} = Astro.props;
---

<form {...action ? { action } : {}} method={method} class="space-y-6" id="appointment-form" data-formspree="true">
  {
    inputs && (
      <div class={`grid gap-6 ${columns === 2 ? 'md:grid-cols-2' : 'grid-cols-1'}`}>
        {inputs.map(
          ({
            type = 'text',
            name,
            label = '',
            autocomplete = 'on',
            placeholder = '',
            options = [],
            required = false,
            fullWidth = false,
          }) =>
            name && (
              <div class={`space-y-2 ${fullWidth ? 'md:col-span-2' : ''}`}>
                {label && (
                  <label for={name} class="block text-sm font-semibold text-gray-700 dark:text-gray-300">
                    {label} {required && <span class="text-red-500">*</span>}
                  </label>
                )}
                {type === 'select' ? (
                  <select
                    name={name}
                    id={name}
                    required={required}
                    class="py-3 px-4 block w-full text-md rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-slate-900 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                  >
                    <option value="">Choose one...</option>
                    {options.map(({ label: optionLabel, value }) => (
                      <option value={value}>{optionLabel ?? value}</option>
                    ))}
                  </select>
                ) : (
                  <input
                    type={type}
                    name={name}
                    id={name}
                    required={required}
                    autocomplete={autocomplete}
                    placeholder={placeholder}
                    class="py-3 px-4 block w-full text-md rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-slate-900 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                  />
                )}
              </div>
            )
        )}
      </div>
    )
  }

  {
    textarea && (
      <div class="space-y-2">
        <label for="textarea" class="block text-sm font-semibold text-gray-700 dark:text-gray-300">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-slate-900 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors resize-none"
        />
      </div>
    )
  }

  {
    captcha && (
      <div class="space-y-2">
        <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300">Captcha Verification</label>
        <div class="flex items-center space-x-4">
          <div class="flex-1 bg-gray-100 dark:bg-gray-800 p-3 rounded-lg text-center font-mono text-lg tracking-wider">
            {captcha.text || 'ABC123'}
          </div>
          <button
            type="button"
            class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
            onclick="this.previousElementSibling.textContent = Math.random().toString(36).substring(2, 8).toUpperCase()"
          >
            â†»
          </button>
        </div>
        <input
          type="text"
          name="captcha"
          placeholder="Enter the code above"
          required
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-slate-900 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="space-y-4">
        <div class="bg-gray-50 dark:bg-gray-800/50 border border-gray-200 dark:border-gray-700 rounded-lg p-4">
          <p class="text-sm text-gray-700 dark:text-gray-300">
            <strong>Privacy & Terms:</strong> We respect your privacy - your data is encrypted, never shared with third
            parties, and retained only as long as necessary for service delivery. By booking, you agree to our terms: no
            advance payments and guidance-based services. For full details, see our{' '}
            <a href="/privacy" class="underline hover:text-blue-600 dark:hover:text-blue-300">
              Privacy Policy
            </a>{' '}
            and{' '}
            <a href="/terms" class="underline hover:text-blue-600 dark:hover:text-blue-300">
              Terms & Conditions
            </a>
            .
          </p>
        </div>

        <div class="flex items-start space-x-3">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            required
            class="mt-1 h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
          />
          <label for="disclaimer" class="text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="pt-4">
        <Button variant="primary" type="submit" class="w-full py-4 text-lg font-semibold">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="text-center pt-4">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }

  <!-- Success Message -->
  <div id="form-success" class="hidden mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
    <div class="flex items-center">
      <svg class="w-5 h-5 text-green-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path
          fill-rule="evenodd"
          d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
          clip-rule="evenodd"></path>
      </svg>
      <p class="text-green-800 font-medium">
        Thank you! Your appointment request has been submitted successfully. We'll contact you within 24 hours to
        confirm your appointment.
      </p>
    </div>
  </div>

  <!-- Error Message -->
  <div id="form-error" class="hidden mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
    <div class="flex items-center">
      <svg class="w-5 h-5 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path
          fill-rule="evenodd"
          d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
          clip-rule="evenodd"></path>
      </svg>
      <p class="text-red-800 font-medium">Something went wrong. Please try again or contact us directly.</p>
    </div>
  </div>
</form>

<script>
  // Formspree form handling
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.querySelector('[data-formspree="true"]');
    const successMessage = document.getElementById('form-success');
    const errorMessage = document.getElementById('form-error');

    if (form) {
      form.addEventListener('submit', function (e) {
        e.preventDefault();

        const formData = new FormData(form as HTMLFormElement);
        const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;

        if (!submitButton) {
          console.error('Submit button not found');
          return;
        }

        const originalText = submitButton.textContent;

        // Show loading state
        submitButton.textContent = 'Submitting...';
        submitButton.disabled = true;

        // Hide any existing messages
        if (successMessage) {
          successMessage.classList.add('hidden');
        }
        if (errorMessage) {
          errorMessage.classList.add('hidden');
        }

        fetch((form as HTMLFormElement).action, {
          method: 'POST',
          body: formData,
          headers: {
            Accept: 'application/json',
          },
        })
          .then((response) => {
            if (response.ok) {
              // Success
              (form as HTMLFormElement).reset();
              if (successMessage) {
                successMessage.classList.remove('hidden');
              }
              form.scrollIntoView({ behavior: 'smooth' });
            } else {
              // Error
              throw new Error('Form submission failed');
            }
          })
          .catch(() => {
            // Show error message
            if (errorMessage) {
              errorMessage.classList.remove('hidden');
            }
            form.scrollIntoView({ behavior: 'smooth' });
          })
          .finally(() => {
            // Reset button
            if (submitButton) {
              submitButton.textContent = originalText;
              submitButton.disabled = false;
            }
          });
      });
    }
  });
</script>
