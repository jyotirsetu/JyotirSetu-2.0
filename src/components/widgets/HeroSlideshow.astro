---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

interface Slide {
  image: string;
  title: string;
  subtitle: string;
  buttonText: string;
  buttonLink: string;
  buttonVariant?: 'primary' | 'secondary';
}

interface Props {
  slides: Slide[];
  autoPlay?: boolean;
  interval?: number;
}

const { slides, autoPlay = true, interval = 5000 } = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose overflow-hidden">
  <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
  
  <!-- Slideshow Container -->
  <div class="relative h-[500px] md:h-[600px] lg:h-[700px]">
    {slides.map((slide, index) => (
      <div 
        class={`absolute inset-0 transition-opacity duration-1000 ease-in-out ${
          index === 0 ? 'opacity-100' : 'opacity-0'
        }`}
        data-slide={index}
      >
        <!-- Background Image -->
        <div class="absolute inset-0">
          <Image
            src={slide.image}
            alt={slide.title}
            class="w-full h-full object-cover"
            width={1920}
            height={700}
          />
          <!-- Overlay -->
          <div class="absolute inset-0 bg-black/40"></div>
        </div>
        
        <!-- Content -->
        <div class="relative z-10 flex items-center justify-center h-full">
          <div class="text-center text-white max-w-4xl mx-auto px-6">
            <h1 class="text-4xl md:text-6xl font-bold mb-6 leading-tight">
              {slide.title}
            </h1>
            <p class="text-xl md:text-2xl mb-8 text-gray-200">
              {slide.subtitle}
            </p>
            <Button
              variant={slide.buttonVariant || 'primary'}
              href={slide.buttonLink}
              class="text-lg px-8 py-4"
            >
              {slide.buttonText}
            </Button>
          </div>
        </div>
      </div>
    ))}
    
    <!-- Navigation Dots -->
    <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-3">
      {slides.map((_, index) => (
        <button
          class={`w-3 h-3 rounded-full transition-colors ${
            index === 0 ? 'bg-white' : 'bg-white/50 hover:bg-white/75'
          }`}
          data-slide-dot={index}
          aria-label={`Go to slide ${index + 1}`}
        ></button>
      ))}
    </div>
    
    <!-- Navigation Arrows -->
    <button
      class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 text-white p-3 rounded-full transition-colors"
      data-slide-prev
      aria-label="Previous slide"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    <button
      class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 text-white p-3 rounded-full transition-colors"
      data-slide-next
      aria-label="Next slide"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
  </div>
</section>

<script>
  class HeroSlideshow {
    constructor() {
      this.currentSlide = 0;
      this.slides = document.querySelectorAll('[data-slide]');
      this.dots = document.querySelectorAll('[data-slide-dot]');
      this.prevBtn = document.querySelector('[data-slide-prev]');
      this.nextBtn = document.querySelector('[data-slide-next]');
      this.autoPlay = true;
      this.interval = 5000;
      this.intervalId = null;
      
      this.init();
    }
    
    init() {
      if (this.slides.length <= 1) return;
      
      this.bindEvents();
      this.startAutoPlay();
    }
    
    bindEvents() {
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
      
      if (this.prevBtn) {
        this.prevBtn.addEventListener('click', () => this.prevSlide());
      }
      
      if (this.nextBtn) {
        this.nextBtn.addEventListener('click', () => this.nextSlide());
      }
      
      // Pause autoplay on hover
      const container = this.slides[0]?.parentElement;
      if (container) {
        container.addEventListener('mouseenter', () => this.stopAutoPlay());
        container.addEventListener('mouseleave', () => this.startAutoPlay());
      }
    }
    
    goToSlide(index) {
      if (index === this.currentSlide) return;
      
      // Hide current slide
      this.slides[this.currentSlide].classList.remove('opacity-100');
      this.slides[this.currentSlide].classList.add('opacity-0');
      this.dots[this.currentSlide].classList.remove('bg-white');
      this.dots[this.currentSlide].classList.add('bg-white/50');
      
      // Show new slide
      this.currentSlide = index;
      this.slides[this.currentSlide].classList.remove('opacity-0');
      this.slides[this.currentSlide].classList.add('opacity-100');
      this.dots[this.currentSlide].classList.remove('bg-white/50');
      this.dots[this.currentSlide].classList.add('bg-white');
    }
    
    nextSlide() {
      const nextIndex = (this.currentSlide + 1) % this.slides.length;
      this.goToSlide(nextIndex);
    }
    
    prevSlide() {
      const prevIndex = this.currentSlide === 0 ? this.slides.length - 1 : this.currentSlide - 1;
      this.goToSlide(prevIndex);
    }
    
    startAutoPlay() {
      if (!this.autoPlay) return;
      this.intervalId = setInterval(() => this.nextSlide(), this.interval);
    }
    
    stopAutoPlay() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
    }
  }
  
  // Initialize slideshow when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new HeroSlideshow();
  });
</script>
