---
import AdminLayout from '../../admin/layouts/AdminLayout.astro';
// TypeScript refresh

// Email communication data interface
interface EmailMessage {
  id: string;
  to: string;
  from: string;
  subject: string;
  content: string;
  timestamp: string;
  status: 'sent' | 'delivered' | 'opened' | 'failed';
  type: 'incoming' | 'outgoing';
  appointment_id?: string;
  template_id?: string;
}

interface EmailTemplate {
  id: string;
  name: string;
  subject: string;
  content: string;
  category: 'appointment' | 'reminder' | 'followup' | 'newsletter' | 'general';
  is_active: boolean;
}

let emailMessages: EmailMessage[] = [];
let emailTemplates: EmailTemplate[] = [];
let totalEmails = 0;

// Sample data for demonstration
emailMessages = [
  {
    id: 'EM001',
    to: 'priya.sharma@email.com',
    from: 'guidance@jyotirsetu.com',
    subject: 'Appointment Confirmation - JyotirSetu',
    content: 'Dear Priya, Your astrology consultation has been confirmed for January 30, 2025 at 2:00 PM. Please prepare your birth details.',
    timestamp: '2025-01-27T10:30:00Z',
    status: 'opened',
    type: 'outgoing',
    appointment_id: 'APT001',
    template_id: 'TMP001'
  },
  {
    id: 'EM002',
    to: 'guidance@jyotirsetu.com',
    from: 'rajesh.kumar@email.com',
    subject: 'Inquiry about Palmistry Services',
    content: 'Hello, I am interested in your palmistry services. Could you please provide more information about the consultation process?',
    timestamp: '2025-01-27T11:15:00Z',
    status: 'delivered',
    type: 'incoming'
  },
  {
    id: 'EM003',
    to: 'sneha.patel@email.com',
    from: 'guidance@jyotirsetu.com',
    subject: 'Reminder: Your Consultation Tomorrow',
    content: 'Dear Sneha, This is a reminder that your numerology consultation is scheduled for tomorrow at 3:00 PM.',
    timestamp: '2025-01-27T12:00:00Z',
    status: 'sent',
    type: 'outgoing',
    appointment_id: 'APT002',
    template_id: 'TMP002'
  }
];

emailTemplates = [
  {
    id: 'TMP001',
    name: 'Appointment Confirmation',
    subject: 'Appointment Confirmed - JyotirSetu',
    content: 'Dear {name},\n\nYour {service} consultation has been confirmed for {date} at {time}.\n\nPlease prepare the following:\n- Birth date, time, and place\n- Any specific questions you have\n\nWe look forward to guiding you on your spiritual journey.\n\nBest regards,\nJyotirSetu Team',
    category: 'appointment',
    is_active: true
  },
  {
    id: 'TMP002',
    name: 'Reminder Email',
    subject: 'Reminder: Your Consultation Tomorrow',
    content: 'Dear {name},\n\nThis is a friendly reminder that your {service} consultation is scheduled for tomorrow at {time}.\n\nPlease ensure you have all necessary details ready.\n\nBest regards,\nJyotirSetu Team',
    category: 'reminder',
    is_active: true
  },
  {
    id: 'TMP003',
    name: 'Follow-up Message',
    subject: 'Thank You for Your Consultation',
    content: 'Dear {name},\n\nThank you for choosing JyotirSetu for your spiritual guidance. We hope our consultation was helpful and insightful.\n\nIf you have any follow-up questions, please don\'t hesitate to reach out.\n\nBest regards,\nJyotirSetu Team',
    category: 'followup',
    is_active: true
  }
];

totalEmails = emailMessages.length;
---

<AdminLayout title="Email Communication Management">
  <div class="admin-container">
    <!-- Header Section -->
    <div class="admin-header">
      <div class="admin-header-content">
        <div class="admin-header-left">
          <h1 class="admin-title">
            <svg class="admin-title-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
            </svg>
            Email Communication
          </h1>
          <p class="admin-subtitle">Manage email communications, templates, and automated campaigns</p>
        </div>
        <div class="admin-header-right">
          <div class="admin-stats">
            <div class="admin-stat-item">
              <div class="admin-stat-value">{totalEmails}</div>
              <div class="admin-stat-label">Total Emails</div>
            </div>
            <div class="admin-stat-item">
              <div class="admin-stat-value">{emailTemplates.length}</div>
              <div class="admin-stat-label">Templates</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="admin-actions">
      <button class="admin-btn-primary" onclick="openNewEmailModal()">
        <svg class="admin-btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Compose Email
      </button>
      <button class="admin-btn-secondary" onclick="openTemplateModal()">
        <svg class="admin-btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        Manage Templates
      </button>
      <button class="admin-btn-secondary" onclick="refreshEmailData()">
        <svg class="admin-btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        Refresh
      </button>
    </div>

    <!-- Filter and Search Section -->
    <div class="admin-filters">
      <div class="admin-filter-group">
        <div class="admin-filter-item">
          <label class="admin-filter-label">Status</label>
          <select class="admin-filter-select" id="statusFilter">
            <option value="">All Status</option>
            <option value="sent">Sent</option>
            <option value="delivered">Delivered</option>
            <option value="opened">Opened</option>
            <option value="failed">Failed</option>
          </select>
        </div>
        <div class="admin-filter-item">
          <label class="admin-filter-label">Type</label>
          <select class="admin-filter-select" id="typeFilter">
            <option value="">All Types</option>
            <option value="incoming">Incoming</option>
            <option value="outgoing">Outgoing</option>
          </select>
        </div>
        <div class="admin-filter-item">
          <label class="admin-filter-label">Date Range</label>
          <input type="date" class="admin-filter-input" id="dateFilter">
        </div>
      </div>
      <div class="admin-search-group">
        <div class="admin-search-box">
          <svg class="admin-search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <input type="text" class="admin-search-input" placeholder="Search emails, subjects, or recipients..." id="searchInput">
        </div>
      </div>
    </div>

    <!-- Emails Table -->
    <div class="admin-table-container">
      <div class="admin-table-header">
        <h3 class="admin-table-title">Recent Emails</h3>
        <div class="admin-table-actions">
          <button class="admin-btn-small" onclick="exportEmailData()">
            <svg class="admin-btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Export
          </button>
        </div>
      </div>
      
      <div class="admin-table-wrapper">
        <table class="admin-table">
          <thead class="admin-table-head">
            <tr>
              <th class="admin-table-header-cell">Recipient/Sender</th>
              <th class="admin-table-header-cell">Subject</th>
              <th class="admin-table-header-cell">Type</th>
              <th class="admin-table-header-cell">Status</th>
              <th class="admin-table-header-cell">Timestamp</th>
              <th class="admin-table-header-cell">Actions</th>
            </tr>
          </thead>
          <tbody class="admin-table-body" id="emailMessagesTable">
            {emailMessages.map((email) => (
              <tr class="admin-table-row">
                <td class="admin-table-cell">
                  <div class="admin-contact-info">
                    <div class="admin-contact-avatar">
                      {email.type === 'incoming' ? email.from.charAt(0).toUpperCase() : email.to.charAt(0).toUpperCase()}
                    </div>
                    <div class="admin-contact-details">
                      <div class="admin-contact-name">
                        {email.type === 'incoming' ? email.from : email.to}
                      </div>
                      <div class="admin-contact-phone">
                        {email.type === 'incoming' ? 'From' : 'To'}
                      </div>
                    </div>
                  </div>
                </td>
                <td class="admin-table-cell">
                  <div class="admin-email-subject">{email.subject}</div>
                  <div class="admin-email-preview">
                    {email.content.length > 80 ? `${email.content.substring(0, 80)}...` : email.content}
                  </div>
                </td>
                <td class="admin-table-cell">
                  <span class={`admin-badge ${email.type === 'incoming' ? 'admin-badge-incoming' : 'admin-badge-outgoing'}`}>
                    {email.type === 'incoming' ? '📥 Incoming' : '📤 Outgoing'}
                  </span>
                </td>
                <td class="admin-table-cell">
                  <span class={`admin-badge admin-badge-${email.status}`}>
                    {email.status === 'sent' ? '📤 Sent' : 
                     email.status === 'delivered' ? '✅ Delivered' :
                     email.status === 'opened' ? '👁️ Opened' : '❌ Failed'}
                  </span>
                </td>
                <td class="admin-table-cell">
                  <div class="admin-timestamp">
                    {new Date(email.timestamp).toLocaleString('en-US', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </div>
                </td>
                <td class="admin-table-cell">
                  <div class="admin-action-buttons">
                    <button class="admin-action-btn" onclick={`viewEmail('${email.id}')`} title="View Email">
                      <svg class="admin-action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                      </svg>
                    </button>
                    <button class="admin-action-btn" onclick={`replyToEmail('${email.id}')`} title="Reply">
                      <svg class="admin-action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"></path>
                      </svg>
                    </button>
                    <button class="admin-action-btn admin-action-btn-danger" onclick={`deleteEmail('${email.id}')`} title="Delete">
                      <svg class="admin-action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Templates Section -->
    <div class="admin-table-container">
      <div class="admin-table-header">
        <h3 class="admin-table-title">Email Templates</h3>
        <div class="admin-table-actions">
          <button class="admin-btn-small" onclick="openNewTemplateModal()">
            <svg class="admin-btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            New Template
          </button>
        </div>
      </div>
      
      <div class="admin-table-wrapper">
        <table class="admin-table">
          <thead class="admin-table-head">
            <tr>
              <th class="admin-table-header-cell">Template Name</th>
              <th class="admin-table-header-cell">Category</th>
              <th class="admin-table-header-cell">Subject</th>
              <th class="admin-table-header-cell">Status</th>
              <th class="admin-table-header-cell">Actions</th>
            </tr>
          </thead>
          <tbody class="admin-table-body">
            {emailTemplates.map((template) => (
              <tr class="admin-table-row">
                <td class="admin-table-cell">
                  <div class="admin-template-name">{template.name}</div>
                </td>
                <td class="admin-table-cell">
                  <span class={`admin-badge admin-badge-${template.category}`}>
                    {template.category === 'appointment' ? '📅 Appointment' :
                     template.category === 'reminder' ? '⏰ Reminder' :
                     template.category === 'followup' ? '🔄 Follow-up' :
                     template.category === 'newsletter' ? '📧 Newsletter' : '📝 General'}
                  </span>
                </td>
                <td class="admin-table-cell">
                  <div class="admin-template-subject">{template.subject}</div>
                </td>
                <td class="admin-table-cell">
                  <span class={`admin-badge ${template.is_active ? 'admin-badge-active' : 'admin-badge-inactive'}`}>
                    {template.is_active ? '✅ Active' : '❌ Inactive'}
                  </span>
                </td>
                <td class="admin-table-cell">
                  <div class="admin-action-buttons">
                    <button class="admin-action-btn" onclick={`editTemplate('${template.id}')`} title="Edit Template">
                      <svg class="admin-action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                      </svg>
                    </button>
                    <button class="admin-action-btn" onclick={`toggleTemplate('${template.id}')`} title={template.is_active ? 'Deactivate' : 'Activate'}>
                      <svg class="admin-action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={template.is_active ? "M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728" : "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"}></path>
                      </svg>
                    </button>
                    <button class="admin-action-btn admin-action-btn-danger" onclick={`deleteTemplate('${template.id}')`} title="Delete Template">
                      <svg class="admin-action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- New Email Modal -->
  <div id="newEmailModal" class="admin-modal">
    <div class="admin-modal-content">
      <div class="admin-modal-header">
        <h3 class="admin-modal-title">Compose New Email</h3>
        <button class="admin-modal-close" onclick="closeNewEmailModal()">
          <svg class="admin-modal-close-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div class="admin-modal-body">
        <form id="newEmailForm" class="admin-form">
          <div class="admin-form-group">
            <label class="admin-form-label">To</label>
            <input type="email" class="admin-form-input" placeholder="recipient@email.com" required>
          </div>
          <div class="admin-form-group">
            <label class="admin-form-label">Subject</label>
            <input type="text" class="admin-form-input" placeholder="Enter email subject" required>
          </div>
          <div class="admin-form-group">
            <label class="admin-form-label">Message</label>
            <textarea class="admin-form-textarea" rows="8" placeholder="Type your email content here..." required></textarea>
          </div>
          <div class="admin-form-group">
            <label class="admin-form-label">Use Template</label>
            <select class="admin-form-select" id="templateSelect">
              <option value="">Select a template (optional)</option>
              {emailTemplates.map((template) => (
                <option value={template.id}>{template.name}</option>
              ))}
            </select>
          </div>
        </form>
      </div>
      <div class="admin-modal-footer">
        <button class="admin-btn-secondary" onclick="closeNewEmailModal()">Cancel</button>
        <button class="admin-btn-primary" onclick="sendEmail()">Send Email</button>
      </div>
    </div>
  </div>

  <!-- Template Modal -->
  <div id="templateModal" class="admin-modal">
    <div class="admin-modal-content">
      <div class="admin-modal-header">
        <h3 class="admin-modal-title">Email Template</h3>
        <button class="admin-modal-close" onclick="closeTemplateModal()">
          <svg class="admin-modal-close-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div class="admin-modal-body">
        <form id="templateForm" class="admin-form">
          <div class="admin-form-group">
            <label class="admin-form-label">Template Name</label>
            <input type="text" class="admin-form-input" placeholder="Enter template name" required>
          </div>
          <div class="admin-form-group">
            <label class="admin-form-label">Category</label>
            <select class="admin-form-select" required>
              <option value="">Select category</option>
              <option value="appointment">Appointment</option>
              <option value="reminder">Reminder</option>
              <option value="followup">Follow-up</option>
              <option value="newsletter">Newsletter</option>
              <option value="general">General</option>
            </select>
          </div>
          <div class="admin-form-group">
            <label class="admin-form-label">Email Subject</label>
            <input type="text" class="admin-form-input" placeholder="Enter email subject" required>
          </div>
          <div class="admin-form-group">
            <label class="admin-form-label">Template Content</label>
            <textarea class="admin-form-textarea" rows="8" placeholder="Enter template content. Use {date}, {time}, {name} for dynamic values..." required></textarea>
            <div class="admin-form-help">
              Available variables: &#123;date&#125;, &#123;time&#125;, &#123;name&#125;, &#123;service&#125;
            </div>
          </div>
        </form>
      </div>
      <div class="admin-modal-footer">
        <button class="admin-btn-secondary" onclick="closeTemplateModal()">Cancel</button>
        <button class="admin-btn-primary" onclick="saveTemplate()">Save Template</button>
      </div>
    </div>
  </div>

  <script define:vars={{ emailMessagesData: emailMessages, emailTemplatesData: emailTemplates }}>
    // Email Management Functions
    /* eslint-disable @typescript-eslint/no-unused-vars */
    function openNewEmailModal() {
      document.getElementById('newEmailModal').classList.add('admin-modal-open');
    }

    function closeNewEmailModal() {
      document.getElementById('newEmailModal').classList.remove('admin-modal-open');
      document.getElementById('newEmailForm').reset();
    }

    function openTemplateModal() {
      document.getElementById('templateModal').classList.add('admin-modal-open');
    }

    function closeTemplateModal() {
      document.getElementById('templateModal').classList.remove('admin-modal-open');
      document.getElementById('templateForm').reset();
    }

    function openNewTemplateModal() {
      openTemplateModal();
    }

    function sendEmail() {
      const form = document.getElementById('newEmailForm');
      const formData = new FormData(form);
      
      // Simulate sending email
      showNotification('Email sent successfully!', 'success');
      closeNewEmailModal();
      
      // In real implementation, you would call your email API here
      console.log('Sending email:', Object.fromEntries(formData));
    }

    function saveTemplate() {
      const form = document.getElementById('templateForm');
      const formData = new FormData(form);
      
      // Simulate saving template
      showNotification('Template saved successfully!', 'success');
      closeTemplateModal();
      
      // In real implementation, you would save to your database
      console.log('Saving template:', Object.fromEntries(formData));
    }

    function viewEmail(emailId) {
      // Find email and show details
      const email = emailMessagesData.find(e => e.id === emailId);
      if (email) {
        const formattedDate = new Date(email.timestamp).toLocaleString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
        alert(`Email Details:\n\nTo: ${email.to}\nFrom: ${email.from}\nSubject: ${email.subject}\nContent: ${email.content}\nTime: ${formattedDate}`);
      }
    }

    function replyToEmail(emailId) {
      const email = emailMessagesData.find(e => e.id === emailId);
      if (email) {
        // Pre-fill the new email form with recipient details
        const modal = document.getElementById('newEmailModal');
        const toInput = modal.querySelector('input[type="email"]');
        const subjectInput = modal.querySelector('input[type="text"]');
        
        toInput.value = email.from;
        subjectInput.value = `Re: ${email.subject}`;
        
        openNewEmailModal();
      }
    }

    function deleteEmail(emailId) {
      if (confirm('Are you sure you want to delete this email?')) {
        // Remove email from array
        const index = emailMessagesData.findIndex(e => e.id === emailId);
        if (index > -1) {
          emailMessagesData.splice(index, 1);
          showNotification('Email deleted successfully!', 'success');
          // Refresh table
          refreshEmailData();
        }
      }
    }

    function editTemplate(templateId) {
      const template = emailTemplatesData.find(t => t.id === templateId);
      if (template) {
        // Pre-fill template form
        const form = document.getElementById('templateForm');
        const inputs = form.querySelectorAll('input, select, textarea');
        inputs[0].value = template.name; // Template name
        inputs[1].value = template.category; // Category
        inputs[2].value = template.subject; // Subject
        inputs[3].value = template.content; // Content
        
        openTemplateModal();
      }
    }

    function toggleTemplate(templateId) {
      const template = emailTemplatesData.find(t => t.id === templateId);
      if (template) {
        template.is_active = !template.is_active;
        showNotification(`Template ${template.is_active ? 'activated' : 'deactivated'} successfully!`, 'success');
        // Refresh table
        refreshEmailData();
      }
    }

    function deleteTemplate(templateId) {
      if (confirm('Are you sure you want to delete this template?')) {
        const index = emailTemplatesData.findIndex(t => t.id === templateId);
        if (index > -1) {
          emailTemplatesData.splice(index, 1);
          showNotification('Template deleted successfully!', 'success');
          // Refresh table
          refreshEmailData();
        }
      }
    }

    function refreshEmailData() {
      // In real implementation, you would fetch fresh data from your API
      showNotification('Email data refreshed!', 'info');
      location.reload();
    }

    function exportEmailData() {
      // Export emails to CSV
      const csvContent = "data:text/csv;charset=utf-8," + 
        "ID,To,From,Subject,Type,Status,Timestamp\n" +
        emailMessagesData.map(email => 
          `${email.id},${email.to},${email.from},"${email.subject}",${email.type},${email.status},${email.timestamp}`
        ).join("\n");
      
      const encodedUri = encodeURI(csvContent);
      const link = document.createElement("a");
      link.setAttribute("href", encodedUri);
      link.setAttribute("download", "email_messages.csv");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      showNotification('Email data exported successfully!', 'success');
    }

    // Filter and search functionality
    function filterEmails() {
      const statusFilter = document.getElementById('statusFilter').value;
      const typeFilter = document.getElementById('typeFilter').value;
      const searchInput = document.getElementById('searchInput').value.toLowerCase();
      
      const rows = document.querySelectorAll('#emailMessagesTable tr');
      
      rows.forEach(row => {
        const status = row.querySelector('.admin-badge').textContent.toLowerCase();
        const type = row.querySelector('.admin-badge-incoming, .admin-badge-outgoing').textContent.toLowerCase();
        const subject = row.querySelector('.admin-email-subject').textContent.toLowerCase();
        const recipient = row.querySelector('.admin-contact-name').textContent.toLowerCase();
        
        const matchesStatus = !statusFilter || status.includes(statusFilter);
        const matchesType = !typeFilter || type.includes(typeFilter);
        const matchesSearch = !searchInput || subject.includes(searchInput) || recipient.includes(searchInput);
        
        row.style.display = matchesStatus && matchesType && matchesSearch ? '' : 'none';
      });
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', function() {
      document.getElementById('statusFilter').addEventListener('change', filterEmails);
      document.getElementById('typeFilter').addEventListener('change', filterEmails);
      document.getElementById('dateFilter').addEventListener('change', filterEmails);
      document.getElementById('searchInput').addEventListener('input', filterEmails);
    });

    // Close modals when clicking outside
    document.addEventListener('click', function(event) {
      const modals = document.querySelectorAll('.admin-modal');
      modals.forEach(modal => {
        if (event.target === modal) {
          modal.classList.remove('admin-modal-open');
        }
      });
    });

    // Close modals with Escape key
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        const openModal = document.querySelector('.admin-modal-open');
        if (openModal) {
          openModal.classList.remove('admin-modal-open');
        }
      }
    });
  </script>
</AdminLayout>
