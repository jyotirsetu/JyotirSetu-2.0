---
import AdminLayout from '../../admin/layouts/AdminLayout.astro';

// Fetch appointments data from API
interface Appointment {
  id: string;
  name: string;
  email: string;
  phone: string;
  service: string;
  date: string;
  time: string;
  status: string;
  consultation_method: string;
  message?: string;
  service_details?: Record<string, unknown>;
  created_at: string;
  updated_at: string;
  rating?: number;
  feedback?: string;
}

interface Service {
  id: string;
  name: string;
  price: number;
  duration: number;
}

let appointments: Appointment[] = [];
let services: Service[] = [];
let totalCount = 0;

// Load real data from Supabase
try {
  const { supabaseDataService } = await import('../../lib/supabase-data');
  const realAppointments = await supabaseDataService.getAppointments();
  
  if (realAppointments && realAppointments.length > 0) {
    // Convert UUIDs to readable IDs using ServiceCode + Date + Sequence format
    appointments = realAppointments.map((appointment, index) => {
      // Map old service names to new service names with emojis
      const mapServiceName = (serviceName: string): string => {
        const serviceMapping: { [key: string]: string } = {
          'astrology': '🔮 Astrology',
          'gemstone': '💎 Gemstone Consultation',
          'palmistry': '✋ Palmistry',
          'numerology': '🔢 Numerology',
          'career-finance': '💼 Career & Finance',
          'matchmaking': '💕 Matchmaking',
          'study-education': '📚 Study / Education',
          'corporate': '🏢 Corporate Consultation',
          'other': '✨ Other Reason'
        };
        
        // First try exact match
        if (serviceMapping[serviceName]) {
          return serviceMapping[serviceName];
        }
        
        // Try case-insensitive match
        const lowerServiceName = serviceName.toLowerCase();
        for (const [key, value] of Object.entries(serviceMapping)) {
          if (key.toLowerCase() === lowerServiceName) {
            return value;
          }
        }
        
        // If no mapping found, return original name
        return serviceName;
      };

      // Get service code
      const getServiceCode = (serviceName: string): string => {
        const serviceCodes: { [key: string]: string } = {
          '🔮 Astrology': 'AST',
          '💎 Gemstone Consultation': 'GEM',
          '✋ Palmistry': 'PAL',
          '🔢 Numerology': 'NUM',
          '💼 Career & Finance': 'CAR',
          '💕 Matchmaking': 'MAT',
          '📚 Study / Education': 'EDU',
          '🏢 Corporate Consultation': 'COR',
          '✨ Other Reason': 'OTH',
          // Add variations and common names
          'Astrology': 'AST',
          'Gemstone Consultation': 'GEM',
          'Palmistry': 'PAL',
          'Numerology': 'NUM',
          'Career & Finance': 'CAR',
          'Matchmaking': 'MAT',
          'Study / Education': 'EDU',
          'Corporate Consultation': 'COR',
          'Other Reason': 'OTH',
          'Other': 'OTH'
        };
        
        // First try exact match
        if (serviceCodes[serviceName]) {
          return serviceCodes[serviceName];
        }
        
        // Try case-insensitive match
        const lowerServiceName = serviceName.toLowerCase();
        for (const [key, code] of Object.entries(serviceCodes)) {
          if (key.toLowerCase() === lowerServiceName) {
            return code;
          }
        }
        
        // Try partial matching for common variations
        if (lowerServiceName.includes('astrology') || lowerServiceName.includes('astro')) {
          return 'AST';
        }
        if (lowerServiceName.includes('gemstone') || lowerServiceName.includes('gem')) {
          return 'GEM';
        }
        if (lowerServiceName.includes('palmistry') || lowerServiceName.includes('palm')) {
          return 'PAL';
        }
        if (lowerServiceName.includes('numerology') || lowerServiceName.includes('number')) {
          return 'NUM';
        }
        if (lowerServiceName.includes('career') || lowerServiceName.includes('finance')) {
          return 'CAR';
        }
        if (lowerServiceName.includes('matchmaking') || lowerServiceName.includes('match')) {
          return 'MAT';
        }
        if (lowerServiceName.includes('study') || lowerServiceName.includes('education')) {
          return 'EDU';
        }
        if (lowerServiceName.includes('corporate') || lowerServiceName.includes('business')) {
          return 'COR';
        }
        
        // Debug logging
        console.log('⚠️ Unknown service name in server-side:', serviceName, 'Defaulting to OTH');
        return 'OTH';
      };
      
      // Get date in YYYYMMDD format
      const appointmentDate = new Date(appointment.date);
      const dateStr = appointmentDate.toISOString().slice(0, 10).replace(/-/g, '');
      
      // Format phone number with country code
      const formatPhoneNumber = (phone: string): string => {
        if (!phone) return phone;
        
        let cleanPhone = phone.replace(/\D/g, '');
        
        // Add default country code +91 if not present
        if (cleanPhone.length === 10) {
          cleanPhone = '+91' + cleanPhone;
        } else if (cleanPhone.startsWith('0')) {
          cleanPhone = '+91' + cleanPhone.substring(1);
        } else if (!cleanPhone.startsWith('+91') && !cleanPhone.startsWith('91')) {
          cleanPhone = '+91' + cleanPhone;
        } else if (cleanPhone.startsWith('91') && cleanPhone.length === 12) {
          cleanPhone = '+' + cleanPhone;
        }
        
        return cleanPhone;
      };

      // Get sequence number for that month (global sequence, not per-service)
      const serviceCode = getServiceCode(appointment.service);
      const currentAppointmentDate = new Date(appointment.date);
      const yearMonth = currentAppointmentDate.toISOString().slice(0, 7).replace(/-/g, '');
      
      const sameMonthCount = realAppointments.slice(0, index).filter(apt => {
        const aptDate = new Date(apt.date);
        const aptYearMonth = aptDate.toISOString().slice(0, 7).replace(/-/g, '');
        return aptYearMonth === yearMonth;
      }).length;
      
      const sequence = String(sameMonthCount + 1).padStart(3, '0');
      
      return {
        ...appointment,
        service: mapServiceName(appointment.service), // Map old service name to new format
        phone: formatPhoneNumber(appointment.phone), // Format phone number with country code
        id: `${serviceCode}-${yearMonth}-${sequence}`
      };
    });
  } else {
    appointments = [];
  }
  totalCount = appointments.length;
  console.log('✅ Loaded appointments from Supabase:', appointments.length);
  
  // Debug: Log all unique service names to identify the issue
  const uniqueServices = [...new Set(appointments.map(apt => apt.service))];
  console.log('🔍 Unique service names found:', uniqueServices);
} catch (error) {
  console.error('❌ Failed to load appointments from Supabase:', error.message);
  appointments = [];
  totalCount = 0;
}

services = [
  { id: '1', name: '🔮 Astrology', price: 300, duration: 60 },
  { id: '2', name: '💎 Gemstone Consultation', price: 400, duration: 45 },
  { id: '3', name: '✋ Palmistry', price: 250, duration: 45 },
  { id: '4', name: '🔢 Numerology', price: 200, duration: 30 },
  { id: '5', name: '💼 Career & Finance', price: 350, duration: 60 },
  { id: '6', name: '💕 Matchmaking', price: 500, duration: 90 },
  { id: '7', name: '📚 Study / Education', price: 200, duration: 30 },
  { id: '8', name: '🏢 Corporate Consultation', price: 600, duration: 120 },
  { id: '9', name: '✨ Other Reason', price: 200, duration: 30 }
];
---

<AdminLayout title="Appointment Management">
  <div class="appointment-container">
    <!-- Modern Header -->
    <div class="appointment-header">
      <div class="header-content">
        <div class="header-text">
          <h1 class="page-title">Appointment Management</h1>
          <p class="page-subtitle">Manage all client appointments and consultations</p>
        </div>
        <div class="header-actions">
          <button id="calendarViewBtn" class="action-btn secondary">
            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <span class="btn-text">Calendar</span>
          </button>
          <button id="exportBtn" class="action-btn secondary">
            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <span class="btn-text">Export</span>
          </button>
          <a href="/admin/appointment-management/new" class="action-btn primary">
            <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            <span class="btn-text">Add New</span>
          </a>
        </div>
      </div>
    </div>
    
    <!-- Modern Stats Cards -->
    <div class="stats-container">
      <div class="stat-card pending">
        <div class="stat-icon">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <div class="stat-content">
          <div class="stat-number">{appointments.filter(apt => apt.status === 'pending').length}</div>
          <div class="stat-label">Pending</div>
        </div>
      </div>
      <div class="stat-card completed">
        <div class="stat-icon">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <div class="stat-content">
          <div class="stat-number">{appointments.filter(apt => apt.status === 'completed').length}</div>
          <div class="stat-label">Completed</div>
        </div>
      </div>
      <div class="stat-card scheduled">
        <div class="stat-icon">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
        </div>
        <div class="stat-content">
          <div class="stat-number">{appointments.filter(apt => apt.status === 'scheduled').length}</div>
          <div class="stat-label">Scheduled</div>
        </div>
      </div>
      <div class="stat-card cancelled">
        <div class="stat-icon">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </div>
        <div class="stat-content">
          <div class="stat-number">{appointments.filter(apt => apt.status === 'cancelled').length}</div>
          <div class="stat-label">Cancelled</div>
        </div>
      </div>
    </div>
    
    <!-- Modern Filters Section -->
    <div class="filters-container">
      <div class="filters-header">
        <h3 class="filters-title">Filters & Search</h3>
        <button id="toggleFilters" class="toggle-filters-btn">Show Advanced</button>
      </div>
      
      <!-- Basic Filters -->
      <div id="basicFilters" class="filters-grid">
        <div class="filter-group">
          <label class="filter-label">Search</label>
          <div class="search-input-container">
            <svg class="search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <input type="text" id="searchInput" placeholder="Search by name, email, or phone..." class="search-input">
          </div>
        </div>
        <div class="filter-group">
          <label class="filter-label">Status</label>
          <select id="statusFilter" class="filter-select">
            <option value="">All Status</option>
            <option value="pending">Pending</option>
            <option value="scheduled">Scheduled</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
        <div class="filter-group">
          <label class="filter-label">Service</label>
          <select id="serviceFilter" class="filter-select">
            <option value="">All Services</option>
            {services.map(service => (
              <option value={service.name}>{service.name}</option>
            ))}
          </select>
        </div>
        <div class="filter-group">
          <label class="filter-label">Method</label>
          <select id="methodFilter" class="filter-select">
            <option value="">All Methods</option>
            <option value="call">Call</option>
            <option value="video-call">Video Call</option>
            <option value="in-person">In-Person</option>
            <option value="whatsapp">WhatsApp</option>
          </select>
        </div>
      </div>
      
      <!-- Action Buttons -->
      <div class="filter-actions">
        <button id="applyFilters" class="apply-btn">Apply</button>
        <button id="clearFilters" class="clear-btn">Clear</button>
      </div>
      
      <!-- Advanced Filters (Hidden by default) -->
      <div id="advancedFilters" class="advanced-filters">
        <div class="advanced-filters-grid">
          <div class="filter-group">
            <label class="filter-label">Date From</label>
            <input type="date" id="dateFrom" class="filter-input">
          </div>
          <div class="filter-group">
            <label class="filter-label">Date To</label>
            <input type="date" id="dateTo" class="filter-input">
          </div>
          <div class="filter-group">
            <label class="filter-label">Sort By</label>
            <select id="sortBy" class="filter-select">
              <option value="date_desc">Date (Newest First)</option>
              <option value="date_asc">Date (Oldest First)</option>
              <option value="name_asc">Name (A-Z)</option>
              <option value="name_desc">Name (Z-A)</option>
              <option value="status">Status</option>
            </select>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Bulk Actions -->
    <div id="bulkActions" class="admin-card" style="padding: 1rem 1.5rem; margin-bottom: 1rem; display: none;">
      <div style="display: flex; align-items: center; gap: 1rem;">
        <span style="color: #cbd5e1; font-size: 0.875rem;">
          <span id="selectedCount">0</span> appointments selected
        </span>
        <div style="display: flex; gap: 0.5rem;">
          <button id="bulkConfirm" class="admin-btn-primary" style="padding: 0.5rem 1rem; font-size: 0.875rem;">Confirm Selected</button>
          <button id="bulkCancel" class="admin-btn-primary" style="padding: 0.5rem 1rem; font-size: 0.875rem; background: rgba(30, 41, 59, 0.8); border: 1px solid rgba(239, 68, 68, 0.3); color: #fca5a5;">Cancel Selected</button>
          <button id="bulkExport" class="admin-btn-primary" style="padding: 0.5rem 1rem; font-size: 0.875rem; background: rgba(30, 41, 59, 0.8); border: 1px solid rgba(16, 185, 129, 0.3); color: #10b981;">Export Selected</button>
        </div>
      </div>
    </div>
    
    <!-- Appointments Table -->
    <div class="admin-card" style="overflow: hidden;">
      <div style="padding: 1rem 1.5rem; border-bottom: 1px solid rgba(59, 130, 246, 0.2); display: flex; align-items: center; justify-content: space-between;">
        <h3 style="font-size: 1.125rem; font-weight: 600; color: #f8fafc; margin: 0; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);">All Appointments</h3>
        <div style="display: flex; align-items: center; gap: 1rem;">
          <label style="display: flex; align-items: center; gap: 0.5rem; color: #cbd5e1; font-size: 0.875rem; cursor: pointer;">
            <input type="checkbox" id="selectAll" style="width: 1rem; height: 1rem;">
            Select All
          </label>
          <div style="display: flex; gap: 0.5rem;">
            <button id="viewMode" class="admin-btn-primary" style="padding: 0.5rem 1rem; font-size: 0.875rem; background: rgba(30, 41, 59, 0.8); border: 1px solid rgba(59, 130, 246, 0.3);">
              <svg style="width: 1rem; height: 1rem; margin-right: 0.5rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
              </svg>
              List View
            </button>
            <button id="cardMode" class="admin-btn-primary" style="padding: 0.5rem 1rem; font-size: 0.875rem; background: rgba(30, 41, 59, 0.8); border: 1px solid rgba(59, 130, 246, 0.3);">
              <svg style="width: 1rem; height: 1rem; margin-right: 0.5rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
              Card View
            </button>
          </div>
        </div>
      </div>
      
      <!-- List View -->
      <div id="listView" style="overflow-x: auto;">
        <table style="min-width: 100%; border-collapse: separate; border-spacing: 0;">
          <thead style="background: rgba(15, 23, 42, 0.8);">
            <tr>
              <th style="padding: 0.75rem 1rem; text-align: left; font-size: 0.75rem; font-weight: 500; color: #cbd5e1; text-transform: uppercase; letter-spacing: 0.05em; width: 40px;">
                <input type="checkbox" id="selectAllTable" style="width: 1rem; height: 1rem;">
              </th>
              <th style="padding: 0.75rem 1.5rem; text-align: left; font-size: 0.75rem; font-weight: 500; color: #cbd5e1; text-transform: uppercase; letter-spacing: 0.05em;">Client</th>
              <th style="padding: 0.75rem 1.5rem; text-align: left; font-size: 0.75rem; font-weight: 500; color: #cbd5e1; text-transform: uppercase; letter-spacing: 0.05em;">Service</th>
              <th style="padding: 0.75rem 1.5rem; text-align: left; font-size: 0.75rem; font-weight: 500; color: #cbd5e1; text-transform: uppercase; letter-spacing: 0.05em; cursor: pointer; user-select: none;" onclick="sortByDate()" id="dateSortHeader">
                Date & Time 
                <span id="dateSortIcon" style="margin-left: 0.5rem; font-size: 0.875rem;">↕️</span>
              </th>
              <th style="padding: 0.75rem 1.5rem; text-align: left; font-size: 0.75rem; font-weight: 500; color: #cbd5e1; text-transform: uppercase; letter-spacing: 0.05em;">Method</th>
              <th style="padding: 0.75rem 1.5rem; text-align: left; font-size: 0.75rem; font-weight: 500; color: #cbd5e1; text-transform: uppercase; letter-spacing: 0.05em;">Status</th>
              <th style="padding: 0.75rem 1.5rem; text-align: left; font-size: 0.75rem; font-weight: 500; color: #cbd5e1; text-transform: uppercase; letter-spacing: 0.05em;">-</th>
              <th style="padding: 0.75rem 1.5rem; text-align: left; font-size: 0.75rem; font-weight: 500; color: #cbd5e1; text-transform: uppercase; letter-spacing: 0.05em;">Actions</th>
            </tr>
          </thead>
          <tbody id="appointmentsTableBody" style="background: rgba(30, 41, 59, 0.4);">
            <!-- Appointments will be dynamically loaded here -->
          </tbody>
        </table>
      </div>
      
      <!-- Card View (Hidden by default) -->
      <div id="cardView" style="display: none; padding: 1.5rem;">
        <div id="appointmentsCardContainer" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 1.5rem;">
          <!-- Appointments will be dynamically loaded here -->
        </div>
      </div>
      
      <!-- Pagination -->
      <div style="padding: 1rem 1.5rem; border-top: 1px solid rgba(59, 130, 246, 0.2);">
        <div style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 1rem;">
          <!-- Pagination Info -->
          <div style="font-size: 0.875rem; color: #cbd5e1;" id="paginationInfo">
            Showing <span style="font-weight: 500; color: #f8fafc;">1</span> to <span style="font-weight: 500; color: #f8fafc;">{appointments.length}</span> of <span style="font-weight: 500; color: #f8fafc;">{totalCount}</span> results
          </div>
          
          <!-- Page Size Selector -->
          <div style="display: flex; align-items: center; gap: 0.5rem;">
            <label style="font-size: 0.875rem; color: #cbd5e1;">Show:</label>
            <select id="pageSizeSelect" style="padding: 0.25rem 0.5rem; border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 0.375rem; font-size: 0.875rem; color: #cbd5e1; background: rgba(30, 41, 59, 0.8);">
              <option value="10">10</option>
              <option value="25" selected>25</option>
              <option value="50">50</option>
              <option value="100">100</option>
            </select>
            <span style="font-size: 0.875rem; color: #cbd5e1;">per page</span>
          </div>
          
          <!-- Pagination Controls -->
          <div style="display: flex; align-items: center; gap: 0.5rem;">
            <!-- First Page -->
            <button id="firstPage" style="padding: 0.25rem 0.5rem; border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 0.375rem; font-size: 0.875rem; color: #cbd5e1; background: rgba(30, 41, 59, 0.8); transition: all 0.3s ease; cursor: pointer;" onmouseover="this.style.background='rgba(59, 130, 246, 0.2)'" onmouseout="this.style.background='rgba(30, 41, 59, 0.8)'">««</button>
            
            <!-- Previous Page -->
            <button id="prevPage" style="padding: 0.25rem 0.5rem; border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 0.375rem; font-size: 0.875rem; color: #cbd5e1; background: rgba(30, 41, 59, 0.8); transition: all 0.3s ease; cursor: pointer;" onmouseover="this.style.background='rgba(59, 130, 246, 0.2)'" onmouseout="this.style.background='rgba(30, 41, 59, 0.8)'">«</button>
            
            <!-- Page Numbers -->
            <div id="pageNumbers" style="display: flex; gap: 0.25rem;">
              <!-- Page numbers will be dynamically generated here -->
            </div>
            
            <!-- Next Page -->
            <button id="nextPage" style="padding: 0.25rem 0.5rem; border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 0.375rem; font-size: 0.875rem; color: #cbd5e1; background: rgba(30, 41, 59, 0.8); transition: all 0.3s ease; cursor: pointer;" onmouseover="this.style.background='rgba(59, 130, 246, 0.2)'" onmouseout="this.style.background='rgba(30, 41, 59, 0.8)'">»</button>
            
            <!-- Last Page -->
            <button id="lastPage" style="padding: 0.25rem 0.5rem; border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 0.375rem; font-size: 0.875rem; color: #cbd5e1; background: rgba(30, 41, 59, 0.8); transition: all 0.3s ease; cursor: pointer;" onmouseover="this.style.background='rgba(59, 130, 246, 0.2)'" onmouseout="this.style.background='rgba(30, 41, 59, 0.8)'">»»</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Appointment Management Script -->
  <script>
    // TypeScript interfaces for the appointment management system
    interface Appointment {
      id: string;
      originalId?: string; // Store the original database ID
      name: string;
      email: string;
      phone: string;
      service: string;
      date: string;
      time: string;
      status: string;
      consultation_method: string;
      message?: string;
      service_details?: Record<string, unknown>;
      created_at: string;
      updated_at: string;
      rating?: number;
      feedback?: string;
    }

    document.addEventListener('DOMContentLoaded', function() {
      // Initialize appointment management system
      const appointmentManager = new AppointmentManager();
      
      // Initialize with real data from server-side rendering
      appointmentManager.init();
      
      // Make sortByDate globally accessible
      (window as { sortByDate?: () => void }).sortByDate = () => appointmentManager.sortByDate();
    });

    class AppointmentManager {
      appointments: Appointment[] = [];
      filteredAppointments: Appointment[] = [];
      selectedAppointments: Set<string> = new Set();
      dateSortDirection: 'asc' | 'desc' | 'none' = 'none';
      currentView: 'list' | 'card' = 'list';
      
      // Pagination properties
      currentPage: number = 1;
      pageSize: number = 25; // Default page size
      totalPages: number = 1;
      totalItems: number = 0;
      
      filters: {
        search: string;
        status: string;
        service: string;
        method: string;
        dateFrom: string;
        dateTo: string;
        sortBy: string;
      } = {
        search: '',
        status: '',
        service: '',
        method: '',
        dateFrom: '',
        dateTo: '',
        sortBy: 'date_desc'
      };

      constructor() {
        // Properties are initialized above
      }

      async init(): Promise<void> {
        // Load appointments from API
        await this.loadAppointments();
        this.setupEventListeners();
        this.setupFilters();
        this.setupBulkActions();
        this.setupViewToggle();
        this.setupPagination();
        this.renderAppointments();
      }

      async loadAppointments() {
        try {
          console.log('🔄 Loading appointments from API...');
          const response = await fetch('/admin/api/appointments');
          console.log('API response status:', response.status);
          
          if (response.ok) {
            const result = await response.json();
            console.log('API response data:', result);
            
            if (result.success && result.data && result.data.length > 0) {
              this.appointments = this.convertToReadableIds(result.data);
              this.filteredAppointments = [...this.appointments];
              console.log('✅ Loaded appointments from API:', this.appointments.length);
            } else {
              // API returned empty data, use fallback data
              console.log('⚠️ API returned empty data, using test data');
              this.appointments = this.getFallbackData();
              this.filteredAppointments = [...this.appointments];
            }
          } else {
            // API call failed, use fallback data
            console.log('❌ API call failed, using test data');
            this.appointments = this.getFallbackData();
            this.filteredAppointments = [...this.appointments];
          }
        } catch (error) {
          console.error('❌ Failed to load appointments:', error);
          // Use fallback data from server-side rendering
          this.appointments = this.getFallbackData();
          this.filteredAppointments = [...this.appointments];
        }
        
        // Always apply filters and render after loading
        this.applyFilters();
        this.calculatePagination();
        this.renderAppointments();
      }

      generateReadableId(appointment: Appointment, index: number): string {
        // Get service code from appointment service name
        const serviceCode = this.getServiceCode(appointment.service);
        
        // Get date in YYYYMM format (Year-Month)
        const appointmentDate = new Date(appointment.date);
        const yearMonth = appointmentDate.toISOString().slice(0, 7).replace(/-/g, '');
        
        // Generate global sequence number for that month
        const sequence = this.getGlobalSequenceForMonth(appointment.date, index);
        
        return `${serviceCode}-${yearMonth}-${sequence}`;
      }

      mapServiceName(serviceName: string): string {
        const serviceMapping: { [key: string]: string } = {
          'astrology': '🔮 Astrology',
          'gemstone': '💎 Gemstone Consultation',
          'palmistry': '✋ Palmistry',
          'numerology': '🔢 Numerology',
          'career-finance': '💼 Career & Finance',
          'matchmaking': '💕 Matchmaking',
          'study-education': '📚 Study / Education',
          'corporate': '🏢 Corporate Consultation',
          'other': '✨ Other Reason'
        };
        
        // First try exact match
        if (serviceMapping[serviceName]) {
          return serviceMapping[serviceName];
        }
        
        // Try case-insensitive match
        const lowerServiceName = serviceName.toLowerCase();
        for (const [key, value] of Object.entries(serviceMapping)) {
          if (key.toLowerCase() === lowerServiceName) {
            return value;
          }
        }
        
        // If no mapping found, return original name
        return serviceName;
      }

      getServiceCode(serviceName: string): string {
        const serviceCodes: { [key: string]: string } = {
          '🔮 Astrology': 'AST',
          '💎 Gemstone Consultation': 'GEM',
          '✋ Palmistry': 'PAL',
          '🔢 Numerology': 'NUM',
          '💼 Career & Finance': 'CAR',
          '💕 Matchmaking': 'MAT',
          '📚 Study / Education': 'EDU',
          '🏢 Corporate Consultation': 'COR',
          '✨ Other Reason': 'OTH',
          // Add variations and common names
          'Astrology': 'AST',
          'Gemstone Consultation': 'GEM',
          'Palmistry': 'PAL',
          'Numerology': 'NUM',
          'Career & Finance': 'CAR',
          'Matchmaking': 'MAT',
          'Study / Education': 'EDU',
          'Corporate Consultation': 'COR',
          'Other Reason': 'OTH',
          'Other': 'OTH'
        };
        
        // First try exact match
        if (serviceCodes[serviceName]) {
          return serviceCodes[serviceName];
        }
        
        // Try case-insensitive match
        const lowerServiceName = serviceName.toLowerCase();
        for (const [key, code] of Object.entries(serviceCodes)) {
          if (key.toLowerCase() === lowerServiceName) {
            return code;
          }
        }
        
        // Try partial matching for common variations
        if (lowerServiceName.includes('astrology') || lowerServiceName.includes('astro')) {
          return 'AST';
        }
        if (lowerServiceName.includes('gemstone') || lowerServiceName.includes('gem')) {
          return 'GEM';
        }
        if (lowerServiceName.includes('palmistry') || lowerServiceName.includes('palm')) {
          return 'PAL';
        }
        if (lowerServiceName.includes('numerology') || lowerServiceName.includes('number')) {
          return 'NUM';
        }
        if (lowerServiceName.includes('career') || lowerServiceName.includes('finance')) {
          return 'CAR';
        }
        if (lowerServiceName.includes('matchmaking') || lowerServiceName.includes('match')) {
          return 'MAT';
        }
        if (lowerServiceName.includes('study') || lowerServiceName.includes('education')) {
          return 'EDU';
        }
        if (lowerServiceName.includes('corporate') || lowerServiceName.includes('business')) {
          return 'COR';
        }
        
        // Debug logging
        console.log('⚠️ Unknown service name:', serviceName, 'Defaulting to OTH');
        return 'OTH';
      }

      getGlobalSequenceForMonth(date: string, currentIndex: number): string {
        // Get the year-month for the current appointment
        const appointmentDate = new Date(date);
        const yearMonth = appointmentDate.toISOString().slice(0, 7).replace(/-/g, '');
        
        // Count how many appointments exist in the same month (global sequence across all services)
        const sameMonthCount = this.appointments.slice(0, currentIndex).filter(apt => {
          const aptDate = new Date(apt.date);
          const aptYearMonth = aptDate.toISOString().slice(0, 7).replace(/-/g, '');
          return aptYearMonth === yearMonth;
        }).length;
        
        return String(sameMonthCount + 1).padStart(3, '0');
      }

      convertToReadableIds(appointments: Appointment[]): Appointment[] {
        return appointments.map((appointment, index) => ({
          ...appointment,
          service: this.mapServiceName(appointment.service), // Map old service name to new format
          phone: this.formatPhoneNumber(appointment.phone), // Format phone number with country code
          originalId: appointment.id, // Store the original database ID
          id: this.generateReadableId(appointment, index)
        }));
      }

      formatPhoneNumber(phone: string): string {
        if (!phone) return phone;
        
        let cleanPhone = phone.replace(/\D/g, '');
        
        // Add default country code +91 if not present
        if (cleanPhone.length === 10) {
          cleanPhone = '+91' + cleanPhone;
        } else if (cleanPhone.startsWith('0')) {
          cleanPhone = '+91' + cleanPhone.substring(1);
        } else if (!cleanPhone.startsWith('+91') && !cleanPhone.startsWith('91')) {
          cleanPhone = '+91' + cleanPhone;
        } else if (cleanPhone.startsWith('91') && cleanPhone.length === 12) {
          cleanPhone = '+' + cleanPhone;
        }
        
        return cleanPhone;
      }

      getFallbackData(): Appointment[] {
        // Extract data from the rendered page
        const rows = document.querySelectorAll('.appointment-row');
        const appointments: Appointment[] = [];
        
        rows.forEach((row, index) => {
          const originalId = row.getAttribute('data-id');
          const cells = row.querySelectorAll('td');
          if (cells.length >= 7 && originalId) {
            const nameDiv = cells[1].querySelector('div');
            const emailDiv = cells[1].querySelectorAll('div')[2];
            const serviceDiv = cells[2].querySelector('div');
            const dateDiv = cells[3].querySelector('div');
            const timeDiv = cells[3].querySelectorAll('div')[1];
            const methodSpan = cells[4].querySelector('span');
            const statusSpan = cells[5].querySelector('span');
            
            if (nameDiv && emailDiv && serviceDiv && dateDiv && timeDiv && methodSpan && statusSpan) {
              const appointmentData = {
                id: '', // Will be set after we have all data
                name: nameDiv.textContent?.trim() || '',
                email: emailDiv.textContent?.trim() || '',
                service: serviceDiv.textContent?.trim() || '',
                date: dateDiv.textContent?.trim() || '',
                time: timeDiv.textContent?.trim() || '',
                consultation_method: methodSpan.textContent?.trim() || '',
                status: statusSpan.textContent?.trim() || '',
                phone: '',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              };
              
              // Generate ID using the new format
              appointmentData.id = this.generateReadableId(appointmentData, index);
              appointments.push(appointmentData);
            }
          }
        });
        
        return appointments;
      }


      setupEventListeners() {
        // View/Edit/Delete buttons
        document.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          if (target && target.classList.contains('view-btn')) {
            this.viewAppointment(target.dataset.id || '');
          } else if (target && target.classList.contains('confirm-btn')) {
            this.confirmAppointment(target.dataset.id || '');
          } else if (target && target.classList.contains('complete-btn')) {
            this.completeAppointment(target.dataset.id || '');
          } else if (target && target.classList.contains('cancel-btn')) {
            this.cancelAppointment(target.dataset.id || '');
          }
        });

        // Calendar and Export buttons
        const calendarBtn = document.getElementById('calendarViewBtn');
        const exportBtn = document.getElementById('exportBtn');
        
        if (calendarBtn) {
          calendarBtn.addEventListener('click', () => this.showCalendarView());
        }
        
        if (exportBtn) {
          exportBtn.addEventListener('click', () => this.exportAppointments());
        }
      }

      setupFilters() {
        const searchInput = document.getElementById('searchInput');
        const statusFilter = document.getElementById('statusFilter');
        const serviceFilter = document.getElementById('serviceFilter');
        const methodFilter = document.getElementById('methodFilter');
        const dateFrom = document.getElementById('dateFrom');
        const dateTo = document.getElementById('dateTo');
        const sortBy = document.getElementById('sortBy');
        const applyFilters = document.getElementById('applyFilters');
        const clearFilters = document.getElementById('clearFilters');
        const toggleFilters = document.getElementById('toggleFilters');

        // Real-time search
        if (searchInput) {
          searchInput.addEventListener('input', (e) => {
            const target = e.target as HTMLInputElement;
            if (target) {
              this.filters.search = target.value;
              this.applyFilters();
            }
          });
        }

        // Filter dropdowns
        [statusFilter, serviceFilter, methodFilter, dateFrom, dateTo, sortBy].forEach(filter => {
          if (filter) {
            filter.addEventListener('change', () => {
              const htmlFilter = filter as HTMLSelectElement | HTMLInputElement;
              if (htmlFilter) {
                const filterKey = filter.id.replace('Filter', '') as keyof typeof this.filters;
                this.filters[filterKey] = htmlFilter.value;
                this.applyFilters();
              }
            });
          }
        });

        // Apply and Clear buttons
        if (applyFilters) {
          applyFilters.addEventListener('click', () => this.applyFilters());
        }

        if (clearFilters) {
          clearFilters.addEventListener('click', () => this.clearFilters());
        }

        // Toggle advanced filters
        if (toggleFilters) {
          toggleFilters.addEventListener('click', () => this.toggleAdvancedFilters());
        }
      }

      setupBulkActions() {
        const selectAll = document.getElementById('selectAll');
        const selectAllTable = document.getElementById('selectAllTable');
        const bulkConfirm = document.getElementById('bulkConfirm');
        const bulkCancel = document.getElementById('bulkCancel');
        const bulkExport = document.getElementById('bulkExport');

        // Select all checkboxes
        [selectAll, selectAllTable].forEach(checkbox => {
          if (checkbox) {
            checkbox.addEventListener('change', (e) => {
              const target = e.target as HTMLInputElement;
              if (target) {
                const isChecked = target.checked;
                document.querySelectorAll('.appointment-checkbox').forEach(cb => {
                  const checkbox = cb as HTMLInputElement;
                  checkbox.checked = isChecked;
                  const id = checkbox.dataset.id;
                  if (id) {
                    if (isChecked) {
                      this.selectedAppointments.add(id);
                    } else {
                      this.selectedAppointments.delete(id);
                    }
                  }
                });
                this.updateBulkActions();
              }
            });
          }
        });

        // Individual checkboxes
        document.addEventListener('change', (e) => {
          const target = e.target as HTMLInputElement;
          if (target && target.classList.contains('appointment-checkbox')) {
            const id = target.dataset.id;
            if (id) {
              if (target.checked) {
                this.selectedAppointments.add(id);
              } else {
                this.selectedAppointments.delete(id);
              }
              this.updateBulkActions();
            }
          }
        });

        // Bulk action buttons
        if (bulkConfirm) {
          bulkConfirm.addEventListener('click', () => this.bulkConfirmAppointments());
        }
        if (bulkCancel) {
          bulkCancel.addEventListener('click', () => this.bulkCancelAppointments());
        }
        if (bulkExport) {
          bulkExport.addEventListener('click', () => this.bulkExportAppointments());
        }
      }

      setupViewToggle() {
        const viewMode = document.getElementById('viewMode');
        const cardMode = document.getElementById('cardMode');
        const listView = document.getElementById('listView');
        const cardView = document.getElementById('cardView');

        if (viewMode && cardMode && listView && cardView) {
          viewMode.addEventListener('click', () => {
            this.currentView = 'list';
            listView.style.display = 'block';
            cardView.style.display = 'none';
            viewMode.style.background = 'linear-gradient(135deg, #3b82f6 0%, #1e40af 100%)';
            cardMode.style.background = 'rgba(30, 41, 59, 0.8)';
          });

          cardMode.addEventListener('click', () => {
            this.currentView = 'card';
            listView.style.display = 'none';
            cardView.style.display = 'block';
            cardMode.style.background = 'linear-gradient(135deg, #3b82f6 0%, #1e40af 100%)';
            viewMode.style.background = 'rgba(30, 41, 59, 0.8)';
          });
        }
      }

      applyFilters() {
        let filtered = [...this.appointments];

        // Search filter
        if (this.filters.search) {
          const searchTerm = this.filters.search.toLowerCase();
          filtered = filtered.filter(apt => 
            apt.name.toLowerCase().includes(searchTerm) ||
            apt.email.toLowerCase().includes(searchTerm) ||
            apt.phone?.toLowerCase().includes(searchTerm)
          );
        }

        // Status filter
        if (this.filters.status) {
          filtered = filtered.filter(apt => apt.status === this.filters.status);
        }

        // Service filter
        if (this.filters.service) {
          filtered = filtered.filter(apt => apt.service === this.filters.service);
        }

        // Method filter
        if (this.filters.method) {
          filtered = filtered.filter(apt => apt.consultation_method === this.filters.method);
        }

        // Date range filter
        if (this.filters.dateFrom) {
          filtered = filtered.filter(apt => new Date(apt.date) >= new Date(this.filters.dateFrom));
        }
        if (this.filters.dateTo) {
          filtered = filtered.filter(apt => new Date(apt.date) <= new Date(this.filters.dateTo));
        }


        // Sort
        this.sortAppointments(filtered);

        this.filteredAppointments = filtered;
        this.calculatePagination();
        this.renderAppointments();
      }

      sortByDate() {
        // Toggle sort direction: none -> asc -> desc -> none
        if (this.dateSortDirection === 'none') {
          this.dateSortDirection = 'asc';
        } else if (this.dateSortDirection === 'asc') {
          this.dateSortDirection = 'desc';
        } else {
          this.dateSortDirection = 'none';
        }

        // Update the sort icon
        const sortIcon = document.getElementById('dateSortIcon');
        if (sortIcon) {
          switch (this.dateSortDirection) {
            case 'asc':
              sortIcon.textContent = '↑';
              sortIcon.style.color = '#10b981';
              break;
            case 'desc':
              sortIcon.textContent = '↓';
              sortIcon.style.color = '#ef4444';
              break;
            case 'none':
              sortIcon.textContent = '↕️';
              sortIcon.style.color = '#cbd5e1';
              break;
          }
        }

        // Apply the sort
        if (this.dateSortDirection !== 'none') {
          this.filteredAppointments.sort((a, b) => {
            const dateA = new Date(a.date + ' ' + a.time);
            const dateB = new Date(b.date + ' ' + b.time);
            
            if (this.dateSortDirection === 'asc') {
              return dateA.getTime() - dateB.getTime();
            } else {
              return dateB.getTime() - dateA.getTime();
            }
          });
        } else {
          // Reset to original order by reapplying filters
          this.applyFilters();
          return;
        }

        // Re-render the appointments
        this.calculatePagination();
        this.renderAppointments();
      }

      sortAppointments(appointments) {
        const [field, direction] = this.filters.sortBy.split('_');
        
        appointments.sort((a, b) => {
          let aVal, bVal;
          
          switch (field) {
            case 'date':
              aVal = new Date(a.date);
              bVal = new Date(b.date);
              break;
            case 'name':
              aVal = a.name.toLowerCase();
              bVal = b.name.toLowerCase();
              break;
            case 'status':
              aVal = a.status;
              bVal = b.status;
              break;
            case 'rating':
              aVal = a.rating || 0;
              bVal = b.rating || 0;
              break;
            default:
              return 0;
          }
          
          if (direction === 'asc') {
            return aVal > bVal ? 1 : -1;
          } else {
            return aVal < bVal ? 1 : -1;
          }
        });
      }

      clearFilters() {
        this.filters = {
          search: '',
          status: '',
          service: '',
          method: '',
          dateFrom: '',
          dateTo: '',
          sortBy: 'date_desc'
        };

        // Reset form inputs
        const searchInput = document.getElementById('searchInput') as HTMLInputElement;
        const statusFilter = document.getElementById('statusFilter') as HTMLSelectElement;
        const serviceFilter = document.getElementById('serviceFilter') as HTMLSelectElement;
        const methodFilter = document.getElementById('methodFilter') as HTMLSelectElement;
        const dateFrom = document.getElementById('dateFrom') as HTMLInputElement;
        const dateTo = document.getElementById('dateTo') as HTMLInputElement;
        const sortBy = document.getElementById('sortBy') as HTMLSelectElement;

        if (searchInput) searchInput.value = '';
        if (statusFilter) statusFilter.value = '';
        if (serviceFilter) serviceFilter.value = '';
        if (methodFilter) methodFilter.value = '';
        if (dateFrom) dateFrom.value = '';
        if (dateTo) dateTo.value = '';
        if (sortBy) sortBy.value = 'date_desc';

        this.applyFilters();
      }

      toggleAdvancedFilters() {
        const advancedFilters = document.getElementById('advancedFilters');
        const toggleBtn = document.getElementById('toggleFilters');
        
        if (advancedFilters && toggleBtn) {
          if (advancedFilters.classList.contains('show')) {
            advancedFilters.classList.remove('show');
            toggleBtn.textContent = 'Show Advanced';
          } else {
            advancedFilters.classList.add('show');
            toggleBtn.textContent = 'Hide Advanced';
          }
        }
      }

      updateBulkActions() {
        const bulkActions = document.getElementById('bulkActions');
        const selectedCount = document.getElementById('selectedCount');
        
        if (bulkActions && selectedCount) {
          if (this.selectedAppointments.size > 0) {
            bulkActions.style.display = 'block';
            selectedCount.textContent = this.selectedAppointments.size.toString();
          } else {
            bulkActions.style.display = 'none';
          }
        }
      }

      renderAppointments() {
        // Get current page appointments
        const currentPageAppointments = this.getCurrentPageAppointments();
        
        // Update the count display
        const countElements = document.querySelectorAll('[data-appointment-count]');
        countElements.forEach(el => {
          el.textContent = this.filteredAppointments.length.toString();
        });

        // Update pagination UI
        this.updatePaginationUI();

        // Render appointments in table and card views
        this.renderTableAppointments(currentPageAppointments);
        this.renderCardAppointments(currentPageAppointments);

        // Update the status badges for each appointment
        this.updateAppointmentStatuses();
      }

      getStatusColor(status: string): string {
        const statusColors = {
          'pending': 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
          'scheduled': 'linear-gradient(135deg, #3b82f6 0%, #1e40af 100%)',
          'completed': 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
          'cancelled': 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)'
        };
        return statusColors[status as keyof typeof statusColors] || statusColors['pending'];
      }

      renderTableAppointments(appointments: Appointment[]) {
        const tbody = document.getElementById('appointmentsTableBody');
        if (!tbody) return;

        const methodIcons = {
          'video-call': 'M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z',
          'call': 'M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z',
          'in-person': 'M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z M15 11a3 3 0 11-6 0 3 3 0 016 0z',
          'whatsapp': 'M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488'
        };

        tbody.innerHTML = appointments.map(appointment => `
          <tr class="appointment-row" data-id="${appointment.id}" style="border-bottom: 1px solid rgba(59, 130, 246, 0.1); transition: all 0.3s ease;" onmouseover="this.style.background='rgba(59, 130, 246, 0.1)'" onmouseout="this.style.background='transparent'">
            <td class="mobile-hide" style="padding: 1rem 1rem; white-space: nowrap;">
              <input type="checkbox" class="appointment-checkbox" data-id="${appointment.id}" style="width: 1rem; height: 1rem;">
            </td>
            <td style="padding: 1rem 1.5rem; white-space: nowrap;">
              <div>
                <div style="font-size: 0.875rem; font-weight: 500; color: #f8fafc;">${appointment.name}</div>
                <div style="font-size: 0.75rem; color: #cbd5e1;">ID: #${appointment.id}</div>
                <div class="mobile-hide" style="font-size: 0.75rem; color: #94a3b8;">${appointment.email}</div>
              </div>
            </td>
            <td class="mobile-hide" style="padding: 1rem 1.5rem; white-space: nowrap;">
              <div>
                <div style="font-size: 0.875rem; color: #f8fafc;">${appointment.service}</div>
                <div style="font-size: 0.75rem; color: #cbd5e1;">${appointment.phone}</div>
              </div>
            </td>
            <td style="padding: 1rem 1.5rem; white-space: nowrap;">
              <div style="font-size: 0.875rem; color: #f8fafc;">${new Date(appointment.date).toLocaleDateString()}</div>
              <div style="font-size: 0.75rem; color: #cbd5e1;">${appointment.time}</div>
            </td>
            <td class="mobile-hide" style="padding: 1rem 1.5rem; white-space: nowrap;">
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <svg style="width: 1rem; height: 1rem; color: #60a5fa;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${methodIcons[appointment.consultation_method] || methodIcons['video-call']}"></path>
                </svg>
                <span style="font-size: 0.75rem; color: #cbd5e1; text-transform: capitalize;">${appointment.consultation_method}</span>
              </div>
            </td>
            <td style="padding: 1rem 1.5rem; white-space: nowrap;">
              <span class="status-badge" data-status="${appointment.status}" style="display: inline-flex; align-items: center; padding: 0.25rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; background: ${this.getStatusColor(appointment.status)}; color: white; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); text-transform: capitalize;">
                ${appointment.status}
              </span>
            </td>
            <td class="mobile-hide" style="padding: 1rem 1.5rem; white-space: nowrap;">
              <span style="font-size: 0.75rem; color: #6b7280;">-</span>
            </td>
            <td style="padding: 1rem 1.5rem; white-space: nowrap; font-size: 0.875rem; font-weight: 500;">
              <div style="display: flex; gap: 0.5rem;">
                <button class="view-btn" data-id="${appointment.id}" style="color: #60a5fa; transition: color 0.3s ease;" onmouseover="this.style.color='#93c5fd'" onmouseout="this.style.color='#60a5fa'">View</button>
                ${appointment.status === 'pending' ? `<button class="confirm-btn" data-id="${appointment.id}" style="background: #10b981; color: white; padding: 0.5rem 1rem; border: none; border-radius: 0.375rem; font-size: 0.875rem; cursor: pointer; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#059669'" onmouseout="this.style.backgroundColor='#10b981'">Confirm</button>` : ''}
                ${appointment.status === 'scheduled' ? `<button class="complete-btn" data-id="${appointment.id}" style="background: #059669; color: white; padding: 0.5rem 1rem; border: none; border-radius: 0.375rem; font-size: 0.875rem; cursor: pointer; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#047857'" onmouseout="this.style.backgroundColor='#059669'">Mark Done</button>` : ''}
                ${(appointment.status === 'pending' || appointment.status === 'scheduled') ? `<button class="cancel-btn" data-id="${appointment.id}" style="background: #ef4444; color: white; padding: 0.5rem 1rem; border: none; border-radius: 0.375rem; font-size: 0.875rem; cursor: pointer; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#dc2626'" onmouseout="this.style.backgroundColor='#ef4444'">Cancel</button>` : ''}
              </div>
            </td>
          </tr>
        `).join('');
      }

      renderCardAppointments(appointments: Appointment[]) {
        const container = document.getElementById('appointmentsCardContainer');
        if (!container) return;

        container.innerHTML = appointments.map(appointment => `
          <div class="appointment-card" data-id="${appointment.id}" style="background: rgba(30, 41, 59, 0.6); border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 0.75rem; padding: 1.5rem; transition: all 0.3s ease;" onmouseover="this.style.borderColor='rgba(59, 130, 246, 0.4)'" onmouseout="this.style.borderColor='rgba(59, 130, 246, 0.2)'">
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;">
              <div>
                <h4 style="font-size: 1rem; font-weight: 600; color: #f8fafc; margin: 0;">${appointment.name}</h4>
                <p style="font-size: 0.75rem; color: #cbd5e1; margin: 0.25rem 0 0 0;">ID: #${appointment.id}</p>
              </div>
              <input type="checkbox" class="appointment-checkbox" data-id="${appointment.id}" style="width: 1rem; height: 1rem;">
            </div>
            
            <div style="margin-bottom: 1rem;">
              <div style="font-size: 0.875rem; color: #f8fafc; margin-bottom: 0.5rem;">${appointment.service}</div>
              <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.5rem;">${new Date(appointment.date).toLocaleDateString()} at ${appointment.time}</div>
              <div style="font-size: 0.75rem; color: #94a3b8; margin-bottom: 0.5rem;">${appointment.email}</div>
              <div style="font-size: 0.75rem; color: #94a3b8;">${appointment.phone}</div>
            </div>
            
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;">
              <span class="status-badge" data-status="${appointment.status}" style="display: inline-flex; align-items: center; padding: 0.25rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; background: ${this.getStatusColor(appointment.status)}; color: white; text-transform: capitalize;">
                ${appointment.status}
              </span>
              <span style="font-size: 0.75rem; color: #cbd5e1; text-transform: capitalize;">${appointment.consultation_method}</span>
            </div>
            
            <div style="display: flex; gap: 0.5rem;">
              <button class="view-btn" data-id="${appointment.id}" style="flex: 1; padding: 0.5rem; font-size: 0.75rem; background: rgba(59, 130, 246, 0.2); border: 1px solid rgba(59, 130, 246, 0.3); color: #60a5fa; border-radius: 0.375rem; cursor: pointer;">View</button>
              ${appointment.status === 'pending' ? `<button class="confirm-btn" data-id="${appointment.id}" style="flex: 1; padding: 0.5rem; font-size: 0.75rem; background: #10b981; color: white; border: none; border-radius: 0.375rem; cursor: pointer;">Confirm</button>` : ''}
              ${appointment.status === 'scheduled' ? `<button class="complete-btn" data-id="${appointment.id}" style="flex: 1; padding: 0.5rem; font-size: 0.75rem; background: #059669; color: white; border: none; border-radius: 0.375rem; cursor: pointer;">Mark Done</button>` : ''}
              ${(appointment.status === 'pending' || appointment.status === 'scheduled') ? `<button class="cancel-btn" data-id="${appointment.id}" style="flex: 1; padding: 0.5rem; font-size: 0.75rem; background: #ef4444; color: white; border: none; border-radius: 0.375rem; cursor: pointer;">Cancel</button>` : ''}
            </div>
          </div>
        `).join('');
      }

      updateAppointmentStatuses() {
        // Update status badges for each appointment
        this.filteredAppointments.forEach(appointment => {
          // Find all status badges for this appointment by looking for the appointment ID
          const appointmentElements = document.querySelectorAll(`[data-id="${appointment.id}"]`);
          appointmentElements.forEach(element => {
            const statusBadge = element.querySelector('.status-badge') as HTMLElement;
            if (statusBadge) {
              statusBadge.textContent = appointment.status;
              statusBadge.setAttribute('data-status', appointment.status);
              
              // Update status badge color based on status
              const statusColors = {
                'pending': 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                'scheduled': 'linear-gradient(135deg, #3b82f6 0%, #1e40af 100%)',
                'completed': 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                'cancelled': 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)'
              };
              statusBadge.style.background = statusColors[appointment.status] || statusColors['pending'];
            }
          });
        });
      }


      refreshUI() {
        // Update the UI dynamically without page reload
        console.log('🔄 Refreshing UI to show updated appointments...');
        this.loadAppointments();
      }

      // Pagination methods
      calculatePagination() {
        this.totalItems = this.filteredAppointments.length;
        this.totalPages = Math.ceil(this.totalItems / this.pageSize);
        
        // Ensure current page is valid
        if (this.currentPage > this.totalPages) {
          this.currentPage = Math.max(1, this.totalPages);
        }
      }

      getCurrentPageAppointments(): Appointment[] {
        const startIndex = (this.currentPage - 1) * this.pageSize;
        const endIndex = startIndex + this.pageSize;
        return this.filteredAppointments.slice(startIndex, endIndex);
      }

      setupPagination() {
        // Page size selector
        const pageSizeSelect = document.getElementById('pageSizeSelect');
        if (pageSizeSelect) {
          pageSizeSelect.addEventListener('change', (e) => {
            const target = e.target as HTMLSelectElement;
            this.pageSize = parseInt(target.value);
            this.currentPage = 1; // Reset to first page
            this.calculatePagination();
            this.renderAppointments();
          });
        }

        // Pagination controls
        const prevBtn = document.getElementById('prevPage');
        const nextBtn = document.getElementById('nextPage');
        const firstPageBtn = document.getElementById('firstPage');
        const lastPageBtn = document.getElementById('lastPage');

        if (prevBtn) {
          prevBtn.addEventListener('click', () => {
            if (this.currentPage > 1) {
              this.currentPage--;
              this.renderAppointments();
            }
          });
        }

        if (nextBtn) {
          nextBtn.addEventListener('click', () => {
            if (this.currentPage < this.totalPages) {
              this.currentPage++;
              this.renderAppointments();
            }
          });
        }

        if (firstPageBtn) {
          firstPageBtn.addEventListener('click', () => {
            this.currentPage = 1;
            this.renderAppointments();
          });
        }

        if (lastPageBtn) {
          lastPageBtn.addEventListener('click', () => {
            this.currentPage = this.totalPages;
            this.renderAppointments();
          });
        }
      }

      updatePaginationUI() {
        // Update pagination info
        const startItem = (this.currentPage - 1) * this.pageSize + 1;
        const endItem = Math.min(this.currentPage * this.pageSize, this.totalItems);
        
        const paginationInfo = document.getElementById('paginationInfo');
        if (paginationInfo) {
          paginationInfo.innerHTML = `
            Showing <span style="font-weight: 500; color: #f8fafc;">${startItem}</span> to 
            <span style="font-weight: 500; color: #f8fafc;">${endItem}</span> of 
            <span style="font-weight: 500; color: #f8fafc;">${this.totalItems}</span> results
          `;
        }

        // Update page size selector
        const pageSizeSelect = document.getElementById('pageSizeSelect') as HTMLSelectElement;
        if (pageSizeSelect) {
          pageSizeSelect.value = this.pageSize.toString();
        }

        // Update pagination buttons
        const prevBtn = document.getElementById('prevPage') as HTMLButtonElement;
        const nextBtn = document.getElementById('nextPage') as HTMLButtonElement;
        const firstPageBtn = document.getElementById('firstPage') as HTMLButtonElement;
        const lastPageBtn = document.getElementById('lastPage') as HTMLButtonElement;

        if (prevBtn) {
          prevBtn.disabled = this.currentPage <= 1;
          prevBtn.style.opacity = this.currentPage <= 1 ? '0.5' : '1';
        }

        if (nextBtn) {
          nextBtn.disabled = this.currentPage >= this.totalPages;
          nextBtn.style.opacity = this.currentPage >= this.totalPages ? '0.5' : '1';
        }

        if (firstPageBtn) {
          firstPageBtn.disabled = this.currentPage <= 1;
          firstPageBtn.style.opacity = this.currentPage <= 1 ? '0.5' : '1';
        }

        if (lastPageBtn) {
          lastPageBtn.disabled = this.currentPage >= this.totalPages;
          lastPageBtn.style.opacity = this.currentPage >= this.totalPages ? '0.5' : '1';
        }

        // Update page numbers
        const pageNumbers = document.getElementById('pageNumbers');
        if (pageNumbers) {
          let pageNumbersHTML = '';
          const maxVisiblePages = 5;
          let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
          const endPage = Math.min(this.totalPages, startPage + maxVisiblePages - 1);

          if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
          }

          for (let i = startPage; i <= endPage; i++) {
            const isActive = i === this.currentPage;
            pageNumbersHTML += `
              <button 
                class="page-number ${isActive ? 'active' : ''}" 
                data-page="${i}"
                style="
                  padding: 0.5rem 0.75rem; 
                  margin: 0 0.25rem; 
                  border: 1px solid rgba(59, 130, 246, 0.3); 
                  background: ${isActive ? 'rgba(59, 130, 246, 0.2)' : 'transparent'}; 
                  color: ${isActive ? '#60a5fa' : '#cbd5e1'}; 
                  border-radius: 0.375rem; 
                  cursor: pointer; 
                  transition: all 0.2s;
                "
                onmouseover="if(!this.disabled) this.style.background='rgba(59, 130, 246, 0.1)'"
                onmouseout="if(!this.disabled) this.style.background='${isActive ? 'rgba(59, 130, 246, 0.2)' : 'transparent'}'"
              >
                ${i}
              </button>
            `;
          }

          pageNumbers.innerHTML = pageNumbersHTML;

          // Add click listeners to page numbers
          pageNumbers.querySelectorAll('.page-number').forEach(btn => {
            btn.addEventListener('click', (e) => {
              const target = e.target as HTMLButtonElement;
              const page = parseInt(target.dataset.page || '1');
              this.currentPage = page;
              this.renderAppointments();
            });
          });
        }
      }

      async viewAppointment(id: string) {
        try {
          // Find the appointment in our current data
          const appointment = this.appointments.find(apt => apt.id === id);
          if (appointment) {
            this.showAppointmentModal(appointment, 'view');
          } else {
            this.showNotification('Appointment not found', 'error');
          }
        } catch (error) {
          console.error('Failed to load appointment:', error);
          this.showNotification('Failed to load appointment details', 'error');
        }
      }

      async editAppointment(id: string) {
        try {
          const response = await fetch(`/admin/api/appointments/${id}`);
          if (response.ok) {
            const result = await response.json();
            if (result.success) {
              this.showAppointmentModal(result.data, 'edit');
            }
          }
        } catch (error) {
          console.error('Failed to load appointment:', error);
          this.showNotification('Failed to load appointment details', 'error');
        }
      }

      async confirmAppointment(id: string) {
        try {
          // Find the original appointment to get the database ID
          const appointment = this.appointments.find(apt => apt.id === id);
          if (!appointment) {
            this.showNotification('Appointment not found', 'error');
            return;
          }

          // Get the original database ID (before readable ID conversion)
          const originalId = appointment.originalId || appointment.id;
          
          // Update in database
          const response = await fetch(`/admin/api/appointments/${originalId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status: 'scheduled' })
          });
          
          if (response.ok) {
            // Update locally after successful database update
            appointment.status = 'scheduled';
            appointment.updated_at = new Date().toISOString();
            
            const filteredAppointment = this.filteredAppointments.find(apt => apt.id === id);
            if (filteredAppointment) {
              filteredAppointment.status = 'scheduled';
              filteredAppointment.updated_at = new Date().toISOString();
            }
            
            this.renderAppointments();
            this.showNotification('Appointment confirmed successfully', 'success');
          } else {
            this.showNotification('Failed to confirm appointment', 'error');
          }
        } catch (error) {
          console.error('Failed to confirm appointment:', error);
          this.showNotification('Failed to confirm appointment', 'error');
        }
      }

      async completeAppointment(id: string) {
        if (confirm('Mark this appointment as completed? This will allow the client to provide a rating.')) {
          try {
            // Find the original appointment to get the database ID
            const appointment = this.appointments.find(apt => apt.id === id);
            if (!appointment) {
              this.showNotification('Appointment not found', 'error');
              return;
            }

            // Get the original database ID (before readable ID conversion)
            const originalId = appointment.originalId || appointment.id;
            
            // Update in database
            const response = await fetch(`/admin/api/appointments/${originalId}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ status: 'completed' })
            });
            
            if (response.ok) {
              // Update locally after successful database update
              appointment.status = 'completed';
              appointment.updated_at = new Date().toISOString();
              
              const filteredAppointment = this.filteredAppointments.find(apt => apt.id === id);
              if (filteredAppointment) {
                filteredAppointment.status = 'completed';
                filteredAppointment.updated_at = new Date().toISOString();
              }
              
              this.renderAppointments();
              this.showNotification('Appointment marked as completed successfully', 'success');
            } else {
              this.showNotification('Failed to complete appointment', 'error');
            }
          } catch (error) {
            console.error('Failed to complete appointment:', error);
            this.showNotification('Error completing appointment', 'error');
          }
        }
      }

      async cancelAppointment(id: string) {
        if (confirm('Are you sure you want to cancel this appointment?')) {
          try {
            // Find the original appointment to get the database ID
            const appointment = this.appointments.find(apt => apt.id === id);
            if (!appointment) {
              this.showNotification('Appointment not found', 'error');
              return;
            }

            // Get the original database ID (before readable ID conversion)
            const originalId = appointment.originalId || appointment.id;
            
            // Update in database
            const response = await fetch(`/admin/api/appointments/${originalId}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ status: 'cancelled' })
            });
            
            if (response.ok) {
              // Update locally after successful database update
              appointment.status = 'cancelled';
              appointment.updated_at = new Date().toISOString();
              
              const filteredAppointment = this.filteredAppointments.find(apt => apt.id === id);
              if (filteredAppointment) {
                filteredAppointment.status = 'cancelled';
                filteredAppointment.updated_at = new Date().toISOString();
              }
              
              this.renderAppointments();
              this.showNotification('Appointment cancelled successfully', 'success');
            } else {
              this.showNotification('Failed to cancel appointment', 'error');
            }
          } catch (error) {
            console.error('Failed to cancel appointment:', error);
            this.showNotification('Error cancelling appointment', 'error');
          }
        }
      }

      async bulkConfirmAppointments() {
        const selectedIds = Array.from(this.selectedAppointments);
        try {
          // Update appointments in database
          const promises = selectedIds.map(async id => {
            const appointment = this.appointments.find(apt => apt.id === id);
            if (appointment) {
              const originalId = appointment.originalId || appointment.id;
              const response = await fetch(`/admin/api/appointments/${originalId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: 'scheduled' })
              });
              
              if (response.ok) {
                // Update locally after successful database update
                appointment.status = 'scheduled';
                appointment.updated_at = new Date().toISOString();
                
                const filteredAppointment = this.filteredAppointments.find(apt => apt.id === id);
                if (filteredAppointment) {
                  filteredAppointment.status = 'scheduled';
                  filteredAppointment.updated_at = new Date().toISOString();
                }
              }
            }
          });
          
          await Promise.all(promises);
          this.showNotification(`${selectedIds.length} appointments confirmed`, 'success');
          this.selectedAppointments.clear();
          this.updateBulkActions();
          this.renderAppointments();
        } catch (error) {
          console.error('Failed to confirm appointments:', error);
          this.showNotification('Failed to confirm appointments', 'error');
        }
      }

      async bulkCancelAppointments() {
        if (confirm(`Are you sure you want to cancel ${this.selectedAppointments.size} appointments?`)) {
          const selectedIds = Array.from(this.selectedAppointments);
          try {
            // Update appointments in database
            const promises = selectedIds.map(async id => {
              const appointment = this.appointments.find(apt => apt.id === id);
              if (appointment) {
                const originalId = appointment.originalId || appointment.id;
                const response = await fetch(`/admin/api/appointments/${originalId}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ status: 'cancelled' })
                });
                
                if (response.ok) {
                  // Update locally after successful database update
                  appointment.status = 'cancelled';
                  appointment.updated_at = new Date().toISOString();
                  
                  const filteredAppointment = this.filteredAppointments.find(apt => apt.id === id);
                  if (filteredAppointment) {
                    filteredAppointment.status = 'cancelled';
                    filteredAppointment.updated_at = new Date().toISOString();
                  }
                }
              }
            });
            
            await Promise.all(promises);
            this.showNotification(`${selectedIds.length} appointments cancelled`, 'success');
            this.selectedAppointments.clear();
            this.updateBulkActions();
            this.renderAppointments();
          } catch (error) {
            console.error('Failed to cancel appointments:', error);
            this.showNotification('Failed to cancel appointments', 'error');
          }
        }
      }

      exportAppointments(): void {
        const dataToExport = this.selectedAppointments.size > 0 
          ? this.appointments.filter(apt => this.selectedAppointments.has(apt.id))
          : this.filteredAppointments;
        
        this.downloadCSV(dataToExport);
      }

      bulkExportAppointments(): void {
        this.exportAppointments();
      }

      // Helper function to clean service names for CSV export (remove emojis)
      // This ensures CSV exports have clean data while UI keeps visual emojis
      private cleanServiceNameForExport(serviceName: string): string {
        // Remove emojis and extra spaces, keep only the text part
        // Example: "🔮 Astrology" becomes "Astrology"
        return serviceName.replace(/[\u{1F300}-\u{1F9FF}]/gu, '').trim();
      }

      downloadCSV(data: Appointment[]): void {
        // Get all unique service detail keys from all appointments
        const allServiceDetailKeys = new Set<string>();
        data.forEach(apt => {
          if (apt.service_details) {
            Object.keys(apt.service_details).forEach(key => allServiceDetailKeys.add(key));
          }
        });
        
        // Create headers including service-specific fields
        const headers = [
          'ID', 'Name', 'Email', 'Phone', 'Service', 'Date', 'Time', 'Status', 'Method', 'Message',
          ...Array.from(allServiceDetailKeys).map(key => 
            key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())
          )
        ];
        
        const csvContent = [
          headers.join(','),
          ...data.map(apt => [
            apt.id,
            `"${apt.name}"`,
            apt.email,
            apt.phone || '',
            `"${this.cleanServiceNameForExport(apt.service)}"`,
            apt.date,
            apt.time,
            apt.status,
            apt.consultation_method,
            apt.rating || '',
            `"${apt.message || ''}"`,
            ...Array.from(allServiceDetailKeys).map(key => 
              `"${apt.service_details?.[key] || ''}"`
            )
          ].join(','))
        ].join('\n');
        
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `appointments-${new Date().toISOString().split('T')[0]}.csv`;
        a.click();
        window.URL.revokeObjectURL(url);
      }

      showCalendarView(): void {
        // Placeholder for future functionality
        console.log('Calendar view functionality removed');
      }

      showAppointmentModal(appointment: Appointment, mode: 'view' | 'edit') {
        // Create and show appointment modal
        const modal = document.createElement('div');
        modal.className = 'appointment-modal';
        
        
        // Generate service details HTML
        let serviceDetailsHTML = '';
        if (appointment.service_details && Object.keys(appointment.service_details).length > 0) {
          serviceDetailsHTML = `
            <div class="service-details-section">
              <h4 style="color: #f8fafc; margin-bottom: 1rem; font-size: 1.125rem;">Service-Specific Information</h4>
              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem;">
                ${Object.entries(appointment.service_details).map(([key, value]) => `
                  <div style="background: rgba(30, 41, 59, 0.6); padding: 0.75rem; border-radius: 0.5rem; border: 1px solid rgba(59, 130, 246, 0.2);">
                    <div style="font-size: 0.75rem; color: #cbd5e1; text-transform: capitalize; margin-bottom: 0.25rem;">
                      ${key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                    </div>
                    <div style="color: #f8fafc; font-weight: 500;">${value}</div>
                  </div>
                `).join('')}
              </div>
            </div>
          `;
        } else {
          serviceDetailsHTML = `
            <div class="service-details-section">
              <h4 style="color: #f8fafc; margin-bottom: 1rem; font-size: 1.125rem;">Service-Specific Information</h4>
              <div style="background: rgba(30, 41, 59, 0.6); padding: 1rem; border-radius: 0.5rem; border: 1px solid rgba(59, 130, 246, 0.2); text-align: center;">
                <div style="color: #cbd5e1; font-style: italic;">No service-specific information available for this appointment.</div>
              </div>
            </div>
          `;
        }

        // No rating system - removed as requested
        const ratingHTML = '';
        
        modal.innerHTML = `
          <div class="modal-overlay">
            <div class="modal-content" style="max-width: 800px; max-height: 90vh; overflow-y: auto;">
              <div class="modal-header">
                <h3 style="color: #f8fafc; margin: 0;">${mode === 'view' ? 'View' : 'Edit'} Appointment</h3>
                <button class="modal-close" style="background: none; border: none; color: #cbd5e1; font-size: 1.5rem; cursor: pointer;">&times;</button>
              </div>
              <div class="modal-body" style="color: #f8fafc;">
                <!-- Basic Information -->
                <div style="margin-bottom: 2rem;">
                  <h4 style="color: #f8fafc; margin-bottom: 1rem; font-size: 1.125rem;">Basic Information</h4>
                  <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Appointment ID</div>
                      <div style="color: #f8fafc; font-weight: 500;">#${appointment.id}</div>
                    </div>
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Client Name</div>
                      <div style="color: #f8fafc; font-weight: 500;">${appointment.name}</div>
                    </div>
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Email</div>
                      <div style="color: #f8fafc; font-weight: 500;">${appointment.email}</div>
                    </div>
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Phone</div>
                      <div style="color: #f8fafc; font-weight: 500;">${appointment.phone}</div>
                    </div>
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Service</div>
                      <div style="color: #f8fafc; font-weight: 500;">${appointment.service}</div>
                    </div>
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Date & Time</div>
                      <div style="color: #f8fafc; font-weight: 500;">${new Date(appointment.date).toLocaleDateString()} at ${appointment.time}</div>
                    </div>
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Consultation Method</div>
                      <div style="color: #f8fafc; font-weight: 500; text-transform: capitalize;">${appointment.consultation_method}</div>
                    </div>
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Status</div>
                      <div style="color: #f8fafc; font-weight: 500; text-transform: capitalize;">${appointment.status}</div>
                    </div>
                  </div>
                </div>
                
                <!-- Message/Query -->
                ${appointment.message ? `
                  <div style="margin-bottom: 2rem;">
                    <h4 style="color: #f8fafc; margin-bottom: 1rem; font-size: 1.125rem;">Client Query</h4>
                    <div style="background: rgba(30, 41, 59, 0.6); padding: 1rem; border-radius: 0.5rem; border: 1px solid rgba(59, 130, 246, 0.2);">
                      <p style="color: #f8fafc; margin: 0; line-height: 1.6;">${appointment.message}</p>
                    </div>
                  </div>
                ` : ''}
                
                <!-- Service Details -->
                ${serviceDetailsHTML}
                
                <!-- Rating Section -->
                ${ratingHTML}
                
                <!-- Timestamps -->
                <div style="margin-bottom: 2rem;">
                  <h4 style="color: #f8fafc; margin-bottom: 1rem; font-size: 1.125rem;">Timestamps</h4>
                  <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Created</div>
                      <div style="color: #f8fafc; font-weight: 500;">${new Date(appointment.created_at).toLocaleString()}</div>
                    </div>
                    <div>
                      <div style="font-size: 0.75rem; color: #cbd5e1; margin-bottom: 0.25rem;">Last Updated</div>
                      <div style="color: #f8fafc; font-weight: 500;">${new Date(appointment.updated_at).toLocaleString()}</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
        
        document.body.appendChild(modal);
        
        // Close modal functionality
        const closeBtn = modal.querySelector('.modal-close') as HTMLElement;
        const overlay = modal.querySelector('.modal-overlay') as HTMLElement;
        
        const closeModal = () => {
          if (document.body.contains(modal)) {
            document.body.removeChild(modal);
          }
        };
        
        if (closeBtn) {
          closeBtn.addEventListener('click', closeModal);
        }
        
        if (overlay) {
          overlay.addEventListener('click', (e) => {
            if (e.target === overlay) {
              closeModal();
            }
          });
        }
        
        // Add escape key functionality
        const handleEscapeKey = (e: KeyboardEvent) => {
          if (e.key === 'Escape') {
            closeModal();
            document.removeEventListener('keydown', handleEscapeKey);
          }
        };
        
        document.addEventListener('keydown', handleEscapeKey);

        // Rating system removed as requested
      }


      showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          padding: 1rem 1.5rem;
          border-radius: 0.5rem;
          color: white;
          font-weight: 500;
          z-index: 1000;
          animation: slideIn 0.3s ease;
        `;
        
        const colors = {
          success: '#10b981',
          error: '#ef4444',
          warning: '#f59e0b',
          info: '#3b82f6'
        };
        
        notification.style.background = colors[type] || colors.info;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.style.animation = 'slideOut 0.3s ease';
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }, 3000);
      }
    }

    // Add CSS animations
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
      #dateSortHeader:hover {
        background: rgba(59, 130, 246, 0.1);
        transition: background 0.2s ease;
      }
      #dateSortIcon {
        transition: transform 0.2s ease;
      }
      #dateSortHeader:hover #dateSortIcon {
        transform: scale(1.1);
      }
      .appointment-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1000;
      }
      .modal-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .modal-content {
        background: rgba(30, 41, 59, 0.95);
        border-radius: 0.75rem;
        padding: 2rem;
        max-width: 500px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
      }
      .modal-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 1.5rem;
      }
      .modal-close {
        background: none;
        border: none;
        color: #cbd5e1;
        font-size: 1.5rem;
        cursor: pointer;
      }
      
      /* Modern Appointment Management Styles */
      .appointment-container {
        max-width: 80rem;
        margin: 0 auto;
        padding: 1rem;
      }
      
      /* Header Styles */
      .appointment-header {
        background: rgba(30, 41, 59, 0.8);
        backdrop-filter: blur(15px);
        border-radius: 1rem;
        padding: 1.5rem;
        margin-bottom: 2rem;
        border: 1px solid rgba(59, 130, 246, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      }
      
      .header-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 1rem;
      }
      
      .page-title {
        font-size: 2rem;
        font-weight: 700;
        color: #f8fafc;
        margin: 0;
        background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }
      
      .page-subtitle {
        color: #cbd5e1;
        margin: 0.5rem 0 0 0;
        font-size: 1rem;
      }
      
      .header-actions {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
      }
      
      .action-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.25rem;
        border-radius: 0.75rem;
        font-size: 0.875rem;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        backdrop-filter: blur(10px);
      }
      
      .action-btn.primary {
        background: linear-gradient(135deg, #3b82f6, #1e40af);
        color: white;
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.4);
      }
      
      .action-btn.primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.6);
      }
      
      .action-btn.secondary {
        background: rgba(30, 41, 59, 0.8);
        color: #cbd5e1;
        border: 1px solid rgba(59, 130, 246, 0.3);
      }
      
      .action-btn.secondary:hover {
        background: rgba(59, 130, 246, 0.2);
        border-color: rgba(59, 130, 246, 0.5);
        transform: translateY(-1px);
      }
      
      .btn-icon {
        width: 1.25rem;
        height: 1.25rem;
      }
      
      /* Stats Container */
      .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
      }
      
      .stat-card {
        background: rgba(30, 41, 59, 0.8);
        backdrop-filter: blur(15px);
        border-radius: 1rem;
        padding: 1.5rem;
        border: 1px solid rgba(59, 130, 246, 0.2);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }
      
      .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #3b82f6, #8b5cf6);
      }
      
      .stat-card.pending::before {
        background: linear-gradient(90deg, #3b82f6, #1e40af);
      }
      
      .stat-card.completed::before {
        background: linear-gradient(90deg, #10b981, #059669);
      }
      
      .stat-card.scheduled::before {
        background: linear-gradient(90deg, #f59e0b, #d97706);
      }
      
      .stat-card.cancelled::before {
        background: linear-gradient(90deg, #ef4444, #dc2626);
      }
      
      .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
      }
      
      .stat-card {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      
      .stat-icon {
        width: 3rem;
        height: 3rem;
        border-radius: 0.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
      }
      
      .stat-card.pending .stat-icon {
        background: rgba(59, 130, 246, 0.2);
        color: #60a5fa;
      }
      
      .stat-card.completed .stat-icon {
        background: rgba(16, 185, 129, 0.2);
        color: #34d399;
      }
      
      .stat-card.scheduled .stat-icon {
        background: rgba(245, 158, 11, 0.2);
        color: #fbbf24;
      }
      
      .stat-card.cancelled .stat-icon {
        background: rgba(239, 68, 68, 0.2);
        color: #f87171;
      }
      
      .stat-icon svg {
        width: 1.5rem;
        height: 1.5rem;
      }
      
      .stat-content {
        flex: 1;
      }
      
      .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: #f8fafc;
        line-height: 1;
        margin-bottom: 0.25rem;
      }
      
      .stat-label {
        font-size: 0.875rem;
        color: #cbd5e1;
        font-weight: 500;
      }
      
      /* Filters Container */
      .filters-container {
        background: rgba(30, 41, 59, 0.8);
        backdrop-filter: blur(15px);
        border-radius: 1rem;
        padding: 1.5rem;
        margin-bottom: 2rem;
        border: 1px solid rgba(59, 130, 246, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      }
      
      .filters-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 1.5rem;
      }
      
      .filters-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #f8fafc;
        margin: 0;
      }
      
      .toggle-filters-btn {
        background: none;
        border: none;
        color: #60a5fa;
        font-size: 0.875rem;
        cursor: pointer;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        transition: all 0.2s ease;
      }
      
      .toggle-filters-btn:hover {
        background: rgba(59, 130, 246, 0.1);
      }
      
      .filters-grid {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr 1fr;
        gap: 1.5rem;
        align-items: end;
      }
      
      .filter-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        min-width: 0;
        overflow: hidden;
      }
      
      .filter-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: #cbd5e1;
      }
      
      .search-input-container {
        position: relative;
        width: 100%;
        min-width: 0;
        overflow: hidden;
      }
      
      .search-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        width: 1rem;
        height: 1rem;
        color: #6b7280;
        pointer-events: none;
      }
      
      .search-input {
        width: 100%;
        min-width: 0;
        padding: 0.75rem 0.75rem 0.75rem 2.5rem;
        border: 1px solid rgba(59, 130, 246, 0.3);
        border-radius: 0.75rem;
        background: rgba(15, 23, 42, 0.8);
        color: #f8fafc;
        font-size: 0.875rem;
        transition: all 0.3s ease;
        box-sizing: border-box;
        overflow: hidden;
      }
      
      .search-input:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      }
      
      .filter-select,
      .filter-input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid rgba(59, 130, 246, 0.3);
        border-radius: 0.75rem;
        background: rgba(15, 23, 42, 0.8);
        color: #f8fafc;
        font-size: 0.875rem;
        transition: all 0.3s ease;
      }
      
      .filter-select:focus,
      .filter-input:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      }
      
      .filter-actions {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: 1.5rem;
        padding-top: 1rem;
        border-top: 1px solid rgba(59, 130, 246, 0.2);
      }
      
      .apply-btn {
        padding: 0.75rem 1.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
        border: none;
        color: white;
        border-radius: 0.5rem;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      
      .apply-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
      }
      
      .clear-btn {
        padding: 0.75rem 1.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        background: rgba(30, 41, 59, 0.8);
        border: 1px solid rgba(239, 68, 68, 0.3);
        color: #fca5a5;
        border-radius: 0.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      
      .clear-btn:hover {
        background: rgba(239, 68, 68, 0.2);
        border-color: rgba(239, 68, 68, 0.5);
        transform: translateY(-2px);
      }
      
      .advanced-filters {
        display: none;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid rgba(59, 130, 246, 0.2);
      }
      
      .advanced-filters.show {
        display: block;
      }
      
      .advanced-filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
      }
      
      /* Tablet Responsive Styles */
      @media (max-width: 1024px) and (min-width: 769px) {
        .filters-grid {
          grid-template-columns: 1fr 1fr;
          gap: 1rem;
        }
        
        .filter-group:first-child {
          grid-column: 1 / -1;
        }
      }
      
      /* Mobile Responsive Styles */
      @media (max-width: 768px) {
        .appointment-container {
          padding: 0.5rem;
        }
        
        .appointment-header {
          padding: 1rem;
          margin-bottom: 1.5rem;
        }
        
        .header-content {
          flex-direction: column;
          align-items: stretch;
          gap: 1rem;
        }
        
        .header-actions {
          justify-content: center;
        }
        
        .page-title {
          font-size: 1.5rem;
          text-align: center;
        }
        
        .page-subtitle {
          text-align: center;
        }
        
        .action-btn {
          flex: 1;
          justify-content: center;
          min-width: 120px;
        }
        
        .btn-text {
          display: none;
        }
        
        .stats-container {
          grid-template-columns: repeat(2, 1fr);
          gap: 1rem;
        }
        
        .stat-card {
          padding: 1rem;
          flex-direction: column;
          text-align: center;
          gap: 0.75rem;
        }
        
        .stat-icon {
          width: 2.5rem;
          height: 2.5rem;
        }
        
        .stat-number {
          font-size: 1.5rem;
        }
        
        .filters-container {
          padding: 1rem;
        }
        
        .filters-grid {
          grid-template-columns: 1fr;
          gap: 1rem;
        }
        
        .filter-actions {
          flex-direction: column;
          gap: 0.5rem;
        }
        
        .apply-btn,
        .clear-btn {
          width: 100%;
          justify-content: center;
        }
        
        .advanced-filters-grid {
          grid-template-columns: 1fr;
          gap: 1rem;
        }
        
        /* Hide less important table columns on mobile */
        .mobile-hide {
          display: none !important;
        }
        
        /* Make table horizontally scrollable on mobile */
        .table-container {
          overflow-x: auto;
          -webkit-overflow-scrolling: touch;
        }
        
        /* Adjust table cell padding for mobile */
        .appointment-row td {
          padding: 0.75rem 0.5rem !important;
          font-size: 0.875rem;
        }
        
        /* Stack action buttons vertically on mobile */
        .appointment-row td:last-child div {
          flex-direction: column !important;
          gap: 0.25rem !important;
        }
        
        .appointment-row td:last-child button {
          width: 100% !important;
          padding: 0.5rem !important;
          font-size: 0.75rem !important;
        }
        
        /* Adjust pagination for mobile */
        .pagination {
          flex-wrap: wrap !important;
          justify-content: center !important;
        }
        
        .pagination button {
          padding: 0.5rem 0.75rem !important;
          font-size: 0.875rem !important;
        }
        
        /* Adjust modal for mobile */
        .modal-content {
          margin: 1rem !important;
          max-height: calc(100vh - 2rem) !important;
          overflow-y: auto !important;
        }
        
        .modal-header {
          padding: 1rem !important;
        }
        
        .modal-body {
          padding: 1rem !important;
        }
        
        /* Make form elements full width on mobile */
        .form-group {
          width: 100% !important;
        }
        
        .form-group input,
        .form-group select {
          width: 100% !important;
        }
      }
      
      /* Tablet adjustments */
      @media (max-width: 1024px) and (min-width: 769px) {
        .mobile-hide {
          display: none !important;
        }
        
        .appointment-row td {
          padding: 0.875rem 0.75rem !important;
        }
        
        .controls-row {
          flex-wrap: wrap !important;
          gap: 1rem !important;
        }
      }
    `;
    document.head.appendChild(style);
  </script>
</AdminLayout>
