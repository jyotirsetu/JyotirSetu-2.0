---
import Layout from '~/layouts/AdminLayout.astro';

// This will be a client-side rendered page for dynamic content
---

<Layout metadata={{
  title: "Email Marketing - JyotirSetu Admin",
  description: "Manage email campaigns, subscribers, and marketing automation"
}}>

<!-- Load Supabase from CDN -->
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>

<!-- Resend integration (no CDN needed - uses fetch API) -->

<div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-purple-900 dark:to-gray-900">
  
  <!-- Clean Admin Header -->
  <header class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm border-b border-purple-100 dark:border-purple-800 sticky top-0 z-40">
    <div class="max-w-7xl mx-auto px-6 py-4">
      <div class="flex justify-between items-center">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-xl flex items-center justify-center">
              <span class="text-white text-xl">📧</span>
            </div>
            <div>
              <h1 class="text-xl font-bold text-gray-900 dark:text-white">
                Email Marketing
              </h1>
              <p class="text-sm text-gray-500 dark:text-gray-400">Manage campaigns and subscribers</p>
            </div>
          </div>
        </div>
        <div class="flex items-center space-x-3">
          <button
            onclick="window.location.href='/admin'"
            class="bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
          >
            ← Back to Admin
          </button>
        </div>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="max-w-7xl mx-auto px-6 py-8">
    
    <!-- Quick Stats -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-purple-100 dark:border-purple-800 hover:shadow-xl transition-all duration-300">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <div class="w-12 h-12 bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900 dark:to-purple-800 rounded-xl flex items-center justify-center">
              <span class="text-purple-600 dark:text-purple-400 text-xl">👥</span>
            </div>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Subscribers</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white" id="total-subscribers">0</p>
          </div>
        </div>
      </div>

      <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-blue-100 dark:border-blue-800 hover:shadow-xl transition-all duration-300">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800 rounded-xl flex items-center justify-center">
              <span class="text-blue-600 dark:text-blue-400 text-xl">📧</span>
            </div>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Campaigns Sent</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white" id="campaigns-sent">0</p>
          </div>
        </div>
      </div>

      <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-green-100 dark:border-green-800 hover:shadow-xl transition-all duration-300">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <div class="w-12 h-12 bg-gradient-to-br from-green-100 to-green-200 dark:from-green-900 dark:to-green-800 rounded-xl flex items-center justify-center">
              <span class="text-green-600 dark:text-green-400 text-xl">📊</span>
            </div>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Open Rate</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white" id="open-rate">0%</p>
          </div>
        </div>
      </div>

      <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-yellow-100 dark:border-yellow-800 hover:shadow-xl transition-all duration-300">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <div class="w-12 h-12 bg-gradient-to-br from-yellow-100 to-yellow-200 dark:from-yellow-900 dark:to-yellow-800 rounded-xl flex items-center justify-center">
              <span class="text-yellow-600 dark:text-yellow-400 text-xl">🎯</span>
            </div>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Click Rate</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white" id="click-rate">0%</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Tabs -->
    <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg border border-purple-100 dark:border-purple-800 mb-8">
      <div class="border-b border-gray-200 dark:border-gray-700">
        <nav class="flex space-x-8 px-6" aria-label="Tabs">
          <button
            id="subscribers-tab"
            class="tab-button active py-4 px-1 border-b-2 border-purple-500 font-medium text-sm text-purple-600 dark:text-purple-400"
            onclick="switchTab('subscribers')"
          >
            👥 Subscribers
          </button>
          <button
            id="campaigns-tab"
            class="tab-button py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
            onclick="switchTab('campaigns')"
          >
            📧 Campaigns
          </button>
          <button
            id="templates-tab"
            class="tab-button py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
            onclick="switchTab('templates')"
          >
            📝 Templates
          </button>
          <button
            id="analytics-tab"
            class="tab-button py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
            onclick="switchTab('analytics')"
          >
            📊 Analytics
          </button>
        </nav>
      </div>

      <!-- Tab Content -->
      <div class="p-6">
        
        <!-- Subscribers Tab -->
        <div id="subscribers-content" class="tab-content">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Subscriber Management</h3>
            <div class="flex space-x-3">
              <button
                id="import-appointments-btn"
                class="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
                onclick="importFromAppointments()"
              >
                📅 Import from Appointments
              </button>
              <button
                id="upload-csv-btn"
                class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
                onclick="showCSVUpload()"
              >
                📁 Upload CSV
              </button>
              <button
                id="add-subscriber-btn"
                class="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
                onclick="showAddSubscriber()"
              >
                ➕ Add Subscriber
              </button>
              <button
                id="export-csv-btn"
                class="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
                onclick="exportSubscribersCSV()"
              >
                📥 Export CSV
              </button>
              <button
                id="cleanup-subscribers-btn"
                class="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
                onclick="cleanupInvalidSubscribers()"
              >
                🧹 Clean Invalid Emails
              </button>
            </div>
          </div>

          <!-- Import Status -->
          <div id="import-status" class="hidden mb-4 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-5 h-5 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
              </div>
              <div class="ml-3">
                <p class="text-sm text-blue-800 dark:text-blue-200" id="import-status-text">Importing subscribers...</p>
              </div>
            </div>
          </div>

          <!-- Subscriber Filters -->
          <div class="mb-6 p-4 bg-gray-50 dark:bg-slate-700 rounded-lg">
            <h4 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3">🔍 Filter Subscribers</h4>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Filter by Source</label>
                <select id="filter-source" onchange="applySubscriberFilters()" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-600 dark:text-white">
                  <option value="">All Sources</option>
                  <option value="appointment_form">Appointment Form</option>
                  <option value="csv_upload">CSV Upload</option>
                  <option value="manual_add">Manual Add</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Filter by Tag</label>
                <select id="filter-tag" onchange="applySubscriberFilters()" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-600 dark:text-white">
                  <option value="">All Tags</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Filter by Status</label>
                <select id="filter-status" onchange="applySubscriberFilters()" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-600 dark:text-white">
                  <option value="">All Status</option>
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                </select>
              </div>
            </div>
            <div class="mt-3 flex justify-between items-center">
              <span id="subscriber-count" class="text-sm text-gray-600 dark:text-gray-400">Loading...</span>
              <div class="flex space-x-2">
                <button onclick="clearSubscriberFilters()" class="px-3 py-1 text-sm bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-300 dark:hover:bg-gray-500">
                  Clear Filters
                </button>
                <button onclick="selectAllSubscribers()" class="px-3 py-1 text-sm bg-blue-200 dark:bg-blue-600 text-blue-700 dark:text-blue-300 rounded hover:bg-blue-300 dark:hover:bg-blue-500">
                  Select All
                </button>
                <button onclick="clearAllSelections()" class="px-3 py-1 text-sm bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-300 dark:hover:bg-gray-500">
                  Clear Selection
                </button>
              </div>
            </div>
            
            <!-- Bulk Actions -->
            <div id="bulk-actions" class="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg hidden">
              <div class="flex items-center justify-between">
                <span id="selected-count" class="text-sm font-medium text-blue-800 dark:text-blue-200">0 subscribers selected</span>
                <div class="flex space-x-2">
                  <button onclick="bulkMarkActive()" class="px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700">
                    ✅ Mark Active
                  </button>
                  <button onclick="bulkMarkInactive()" class="px-3 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700">
                    ❌ Mark Inactive
                  </button>
                  <button onclick="bulkDelete()" class="px-3 py-1 text-sm bg-red-800 text-white rounded hover:bg-red-900">
                    🗑️ Delete Selected
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Subscribers Table -->
          <div class="bg-white dark:bg-slate-800 rounded-lg shadow overflow-hidden">
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      <input type="checkbox" id="select-all-checkbox" onchange="toggleSelectAll()" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Email
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Name
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Source
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Tags
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Status
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Added
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody id="subscribers-table-body" class="bg-white dark:bg-slate-800 divide-y divide-gray-200 dark:divide-gray-700">
                  <tr>
                    <td colspan="7" class="px-6 py-12 text-center text-gray-500 dark:text-gray-400">
                      <div class="flex flex-col items-center">
                        <span class="text-4xl mb-4">📧</span>
                        <p class="text-lg font-medium mb-2">No subscribers yet</p>
                        <p class="text-sm">Import from appointments or upload a CSV file to get started</p>
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <!-- Campaigns Tab -->
        <div id="campaigns-content" class="tab-content hidden">
          <!-- Campaign Header -->
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
            <div>
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">📧 Email Campaigns</h3>
              <p class="text-gray-600 dark:text-gray-400">Create and manage your email marketing campaigns</p>
            </div>
            <button
              id="create-campaign-btn"
              class="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-6 py-3 rounded-xl text-sm font-semibold transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 flex items-center gap-2"
              onclick="showCreateCampaign()"
            >
              <span class="text-lg">➕</span>
              Create Campaign
            </button>
          </div>

          <!-- Campaigns Grid -->
          <div id="campaigns-list" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            <div class="text-center py-16 text-gray-500 dark:text-gray-400 col-span-full">
              <div class="bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-2xl p-12 border-2 border-dashed border-purple-200 dark:border-purple-800">
                <span class="text-6xl mb-6 block">📧</span>
                <h4 class="text-xl font-semibold mb-3 text-gray-700 dark:text-gray-300">No campaigns yet</h4>
                <p class="text-gray-500 dark:text-gray-400 mb-6">Create your first email campaign to start engaging with your subscribers</p>
                <button
                  onclick="showCreateCampaign()"
                  class="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-6 py-3 rounded-xl text-sm font-semibold transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                >
                  Create Your First Campaign
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Templates Tab -->
        <div id="templates-content" class="tab-content hidden">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Email Templates</h3>
            <button
              id="create-template-btn"
              class="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
              onclick="showCreateTemplate()"
            >
              ➕ Create Template
            </button>
          </div>

          <!-- Templates Grid -->
          <div id="templates-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div class="text-center py-12 text-gray-500 dark:text-gray-400 col-span-full">
              <span class="text-4xl mb-4 block">📝</span>
              <p class="text-lg font-medium mb-2">No templates yet</p>
              <p class="text-sm">Create your first email template to get started</p>
            </div>
          </div>
        </div>

        <!-- Analytics Tab -->
        <div id="analytics-content" class="tab-content hidden">
          <!-- Analytics Header -->
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
            <div>
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">📊 Analytics & Reports</h3>
              <p class="text-gray-600 dark:text-gray-400">Track performance and download detailed reports</p>
            </div>
            <div class="flex gap-3">
              <button
                onclick="downloadCampaignReport()"
                class="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-6 py-3 rounded-xl text-sm font-semibold transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 flex items-center gap-2"
              >
                <span class="text-lg">📥</span>
                Download Report
              </button>
              <button
                onclick="generateAnalyticsReport()"
                class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-6 py-3 rounded-xl text-sm font-semibold transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 flex items-center gap-2"
              >
                <span class="text-lg">📊</span>
                Generate Report
              </button>
            </div>
          </div>
          
          <!-- Analytics Charts -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <div class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 p-6">
              <div class="flex items-center gap-3 mb-4">
                <div class="w-10 h-10 bg-gradient-to-br from-green-100 to-blue-100 dark:from-green-900 dark:to-blue-900 rounded-xl flex items-center justify-center">
                  <span class="text-green-600 dark:text-green-400 text-lg">📊</span>
                </div>
                <h4 class="text-lg font-bold text-gray-900 dark:text-white">Campaign Performance</h4>
              </div>
              <div class="h-64 flex items-center justify-center text-gray-500 dark:text-gray-400">
                <div class="text-center">
                  <span class="text-4xl mb-2 block">📊</span>
                  <p>No data available yet</p>
                </div>
              </div>
            </div>
            
            <div class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 p-6">
              <div class="flex items-center gap-3 mb-4">
                <div class="w-10 h-10 bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900 dark:to-pink-900 rounded-xl flex items-center justify-center">
                  <span class="text-purple-600 dark:text-purple-400 text-lg">📈</span>
                </div>
                <h4 class="text-lg font-bold text-gray-900 dark:text-white">Subscriber Growth</h4>
              </div>
              <div class="h-64 flex items-center justify-center text-gray-500 dark:text-gray-400">
                <div class="text-center">
                  <span class="text-4xl mb-2 block">📈</span>
                  <p>No data available yet</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Reports Section -->
          <div class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 p-6">
            <div class="flex items-center gap-3 mb-6">
              <div class="w-10 h-10 bg-gradient-to-br from-orange-100 to-red-100 dark:from-orange-900 dark:to-red-900 rounded-xl flex items-center justify-center">
                <span class="text-orange-600 dark:text-orange-400 text-lg">📋</span>
              </div>
              <h4 class="text-lg font-bold text-gray-900 dark:text-white">Campaign Reports</h4>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Comprehensive Campaign Report -->
              <div class="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-6 border border-blue-200 dark:border-blue-800">
                <div class="flex items-center gap-3 mb-4">
                  <div class="w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-xl flex items-center justify-center">
                    <span class="text-blue-600 dark:text-blue-400 text-lg">📊</span>
                  </div>
                  <div>
                    <h5 class="font-bold text-gray-900 dark:text-white">Campaign Report</h5>
                    <p class="text-xs text-gray-600 dark:text-gray-400">Complete campaign analytics</p>
                  </div>
                </div>
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">Download comprehensive campaign data including performance metrics, recipient details, and engagement statistics.</p>
                <button
                  onclick="downloadCampaignReport()"
                  class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg text-sm font-semibold transition-all duration-200 shadow-sm hover:shadow-md"
                >
                  📥 Download Campaign Report
                </button>
              </div>

              <!-- Subscriber Analytics Report -->
              <div class="bg-gradient-to-br from-purple-50 to-violet-50 dark:from-purple-900/20 dark:to-violet-900/20 rounded-xl p-6 border border-purple-200 dark:border-purple-800">
                <div class="flex items-center gap-3 mb-4">
                  <div class="w-10 h-10 bg-purple-100 dark:bg-purple-900 rounded-xl flex items-center justify-center">
                    <span class="text-purple-600 dark:text-purple-400 text-lg">👥</span>
                  </div>
                  <div>
                    <h5 class="font-bold text-gray-900 dark:text-white">Subscriber Report</h5>
                    <p class="text-xs text-gray-600 dark:text-gray-400">Detailed subscriber analytics</p>
                  </div>
                </div>
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">Export subscriber data including contact information, preferences, engagement history, and segmentation details.</p>
                <button
                  onclick="downloadSubscriberReport()"
                  class="w-full bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg text-sm font-semibold transition-all duration-200 shadow-sm hover:shadow-md"
                >
                  📥 Download Subscriber Report
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</div>

<!-- Modals -->
<div id="modal-container"></div>

<script>
  // Global variables
  let supabase = null;
  let currentUser = null;
  
  // Resend configuration (replace with your actual API key)
  const RESEND_CONFIG = {
    apiKey: 're_J7Tenr58_5Y9VdfKMnfKrLwzRh59j7nnR', // Your Resend API key
    fromEmail: 'insights@jyotirsetu.com' // Your verified domain email
  };

  // Initialize Supabase
  async function initSupabase() {
    try {
      // @ts-ignore
      supabase = window.supabase.createClient(
        'https://czbypbrrxxjcjdfjxczv.supabase.co',
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6YnlwYnJyeHhqY2pkZmp4Y3p2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MjU2NDcsImV4cCI6MjA3MjUwMTY0N30.SQ-eabMNo5RBy8N0MHWDmlxVH7Tmh-EGykI0Qt5wDjg'
      );
      console.log('Supabase initialized for email marketing');
    } catch (error) {
      console.error('Error initializing Supabase:', error);
    }
  }

  // Initialize Resend
  function initResend() {
    try {
      if (RESEND_CONFIG.apiKey !== 'YOUR_RESEND_API_KEY') {
        console.log('✅ Resend initialized successfully');
        console.log('🔑 API Key:', RESEND_CONFIG.apiKey.substring(0, 10) + '...');
        console.log('📮 From Email:', RESEND_CONFIG.fromEmail);
        return true;
      } else {
        console.warn('❌ Resend not configured. Please add your Resend API key.');
        return false;
      }
    } catch (error) {
      console.error('💥 Error initializing Resend:', error);
      return false;
    }
  }

  // Clean up invalid subscribers
  function cleanupInvalidSubscribers() {
    try {
      const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      
      const validSubscribers = subscribers.filter(sub => {
        return sub.email && emailRegex.test(sub.email);
      });
      
      const invalidCount = subscribers.length - validSubscribers.length;
      
      if (invalidCount === 0) {
        showImportStatus('✅ All subscribers have valid email addresses!', 'success');
        return;
      }
      
      localStorage.setItem('email_subscribers', JSON.stringify(validSubscribers));
      
      showImportStatus(`🧹 Cleaned up ${invalidCount} invalid subscribers! Remaining: ${validSubscribers.length}`, 'success');
      loadSubscribers();
      updateStats();
      
      console.log('🧹 Cleanup completed:', {
        original: subscribers.length,
        valid: validSubscribers.length,
        removed: invalidCount
      });

    } catch (error) {
      console.error('💥 Error cleaning up subscribers:', error);
      showImportStatus(`❌ Failed to cleanup subscribers: ${error.message}`, 'error');
    }
  }

  // Download comprehensive campaign report
  function downloadCampaignReport() {
    try {
      const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
      const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
      
      if (campaigns.length === 0) {
        showImportStatus('❌ No campaigns found to generate report', 'error');
        return;
      }

      // Generate comprehensive report data
      const reportData = campaigns.map(campaign => {
        const openRate = campaign.recipients > 0 ? Math.round((campaign.opens || 0) / campaign.recipients * 100) : 0;
        const clickRate = campaign.recipients > 0 ? Math.round((campaign.clicks || 0) / campaign.recipients * 100) : 0;
        
        return {
          'Campaign ID': campaign.id,
          'Subject': campaign.subject,
          'Description': campaign.description || '',
          'Status': campaign.status,
          'Recipients': campaign.recipients,
          'Recipient Type': campaign.recipientType,
          'Selected Tags': campaign.selectedTags ? campaign.selectedTags.join(', ') : '',
          'Created Date': new Date(campaign.created_at).toLocaleString(),
          'Sent Date': campaign.sent_at ? new Date(campaign.sent_at).toLocaleString() : '',
          'Opens': campaign.opens || 0,
          'Clicks': campaign.clicks || 0,
          'Open Rate (%)': openRate,
          'Click Rate (%)': clickRate
        };
      });

      // Convert to CSV
      const csvContent = convertToCSV(reportData);
      downloadCSV(csvContent, `campaign-report-${new Date().toISOString().split('T')[0]}.csv`);
      
      showImportStatus('✅ Campaign report downloaded successfully!', 'success');
      
    } catch (error) {
      console.error('💥 Error generating campaign report:', error);
      showImportStatus(`❌ Failed to generate report: ${error.message}`, 'error');
    }
  }

  // Generate analytics report
  function generateAnalyticsReport() {
    try {
      const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
      const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
      
      // Calculate analytics
      const totalCampaigns = campaigns.length;
      const sentCampaigns = campaigns.filter(c => c.status === 'sent').length;
      const totalRecipients = campaigns.reduce((sum, c) => sum + (c.recipients || 0), 0);
      const totalOpens = campaigns.reduce((sum, c) => sum + (c.opens || 0), 0);
      const totalClicks = campaigns.reduce((sum, c) => sum + (c.clicks || 0), 0);
      const avgOpenRate = totalRecipients > 0 ? Math.round((totalOpens / totalRecipients) * 100) : 0;
      const avgClickRate = totalRecipients > 0 ? Math.round((totalClicks / totalRecipients) * 100) : 0;
      
      const analyticsData = [
        {
          'Metric': 'Total Campaigns',
          'Value': totalCampaigns,
          'Description': 'Total number of campaigns created'
        },
        {
          'Metric': 'Sent Campaigns',
          'Value': sentCampaigns,
          'Description': 'Number of campaigns actually sent'
        },
        {
          'Metric': 'Total Subscribers',
          'Value': subscribers.length,
          'Description': 'Total number of email subscribers'
        },
        {
          'Metric': 'Total Recipients',
          'Value': totalRecipients,
          'Description': 'Total emails sent across all campaigns'
        },
        {
          'Metric': 'Total Opens',
          'Value': totalOpens,
          'Description': 'Total email opens across all campaigns'
        },
        {
          'Metric': 'Total Clicks',
          'Value': totalClicks,
          'Description': 'Total link clicks across all campaigns'
        },
        {
          'Metric': 'Average Open Rate (%)',
          'Value': avgOpenRate,
          'Description': 'Average open rate across all campaigns'
        },
        {
          'Metric': 'Average Click Rate (%)',
          'Value': avgClickRate,
          'Description': 'Average click rate across all campaigns'
        }
      ];

      const csvContent = convertToCSV(analyticsData);
      downloadCSV(csvContent, `analytics-report-${new Date().toISOString().split('T')[0]}.csv`);
      
      showImportStatus('✅ Analytics report generated successfully!', 'success');
      
    } catch (error) {
      console.error('💥 Error generating analytics report:', error);
      showImportStatus(`❌ Failed to generate analytics report: ${error.message}`, 'error');
    }
  }


  // Download subscriber report
  function downloadSubscriberReport() {
    try {
      const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
      
      if (subscribers.length === 0) {
        showImportStatus('❌ No subscribers found', 'error');
        return;
      }

      const subscriberData = subscribers.map(subscriber => ({
        'Name': subscriber.name || '',
        'Email': subscriber.email,
        'Source': subscriber.source,
        'Service Interest': subscriber.serviceInterest || '',
        'Tags': subscriber.tags ? subscriber.tags.join(', ') : '',
        'Status': subscriber.status,
        'Created Date': new Date(subscriber.created_at).toLocaleDateString()
      }));

      const csvContent = convertToCSV(subscriberData);
      downloadCSV(csvContent, `subscriber-report-${new Date().toISOString().split('T')[0]}.csv`);
      
      showImportStatus('✅ Subscriber report downloaded!', 'success');
      
    } catch (error) {
      console.error('💥 Error downloading subscriber report:', error);
      showImportStatus(`❌ Failed to download subscriber report: ${error.message}`, 'error');
    }
  }

  // Helper function to convert data to CSV
  function convertToCSV(data) {
    if (!data || data.length === 0) return '';
    
    const headers = Object.keys(data[0]);
    const csvRows = [];
    
    // Add headers
    csvRows.push(headers.join(','));
    
    // Add data rows
    data.forEach(row => {
      const values = headers.map(header => {
        const value = row[header];
        // Escape commas and quotes in values
        if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
          return `"${value.replace(/"/g, '""')}"`;
        }
        return value;
      });
      csvRows.push(values.join(','));
    });
    
    return csvRows.join('\n');
  }

  // Helper function to download CSV
  function downloadCSV(csvContent, filename) {
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  }

  // Send real email using server-side API
  async function sendRealEmail(subject, content, recipientEmail, recipientName = '') {
    try {
      console.log('🔍 Starting email send process...');
      console.log('📧 To:', recipientEmail);
      console.log('📝 Subject:', subject);
      console.log('📮 From Email:', RESEND_CONFIG.fromEmail);

      // Send email via our server-side API
      const apiUrl = `${window.location.origin}/api/send-email`;
      console.log('📤 Sending email via server API...');
      console.log('🌐 API URL:', apiUrl);
      
      const requestBody = {
        subject: subject,
        content: content,
        recipientEmail: recipientEmail,
        recipientName: recipientName
      };
      
      console.log('📤 Request body:', JSON.stringify(requestBody, null, 2));
      
      // Ensure the request body is properly formatted
      const requestBodyString = JSON.stringify(requestBody);
      console.log('📤 Request body string:', requestBodyString);
      console.log('📤 Request body length:', requestBodyString.length);
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: requestBodyString
      });

      console.log('📡 Response status:', response.status);
      
      const result = await response.json();
      console.log('📡 Response body:', result);

      if (response.ok && result.success) {
        console.log('✅ Email sent successfully!');
        console.log('🆔 Email ID:', result.emailId);
        return { success: true, emailId: result.emailId };
      } else {
        console.error('❌ Email sending failed:', result);
        console.error('❌ Error details:', result.details);
        return { 
          success: false, 
          error: result.error || 'Failed to send email',
          details: result.details
        };
      }

    } catch (error) {
      console.error('💥 Error sending email:', error);
      console.error('🔍 Error details:', {
        message: error.message,
        stack: error.stack,
        name: error.name
      });
      return { success: false, error: error.message };
    }
  }

  // Check authentication
  function checkAuth() {
    const adminEmail = localStorage.getItem('admin_email');
    if (!adminEmail) {
      window.location.href = '/admin';
      return;
    }
    currentUser = { email: adminEmail };
  }

  // Tab switching
  function switchTab(tabName) {
    // Hide all tab contents
    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.add('hidden');
    });
    
    // Remove active class from all tabs
    document.querySelectorAll('.tab-button').forEach(button => {
      button.classList.remove('active', 'border-purple-500', 'text-purple-600', 'dark:text-purple-400');
      button.classList.add('border-transparent', 'text-gray-500', 'dark:text-gray-400');
    });
    
    // Show selected tab content
    document.getElementById(`${tabName}-content`).classList.remove('hidden');
    
    // Add active class to selected tab
    const activeTab = document.getElementById(`${tabName}-tab`);
    activeTab.classList.add('active', 'border-purple-500', 'text-purple-600', 'dark:text-purple-400');
    activeTab.classList.remove('border-transparent', 'text-gray-500', 'dark:text-gray-400');
    
    // Load tab-specific data
    if (tabName === 'subscribers') {
      loadSubscribers();
    } else if (tabName === 'campaigns') {
      loadCampaigns();
    } else if (tabName === 'templates') {
      loadTemplates();
    } else if (tabName === 'analytics') {
      loadAnalytics();
    }
  }

  // Import subscribers from appointments
  async function importFromAppointments() {
    try {
      showImportStatus('Importing subscribers from appointments...');
      
      if (!supabase) {
        showImportStatus('Supabase not initialized. Using mock data for testing.', 'warning');
        
        // Use mock data for testing
        const mockAppointments = [
          { id: 1, name: 'John Doe', email: 'john.doe@example.com', service_type: 'Kundli Analysis', created_at: '2024-01-15T10:30:00Z' },
          { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com', service_type: 'Palmistry', created_at: '2024-01-14T15:45:00Z' },
          { id: 3, name: 'Mike Johnson', email: 'mike.johnson@example.com', service_type: 'Numerology', created_at: '2024-01-13T09:20:00Z' }
        ];
        
        await processAppointmentsData(mockAppointments);
        return;
      }

      // Get all appointments with email addresses from Supabase
      const { data: appointments, error } = await supabase
        .from('appointments')
        .select('*')
        .not('email', 'is', null);

      if (error) {
        console.error('Supabase error:', error);
        showImportStatus('Error connecting to database. Please try again.', 'error');
        return;
      }

      if (!appointments || appointments.length === 0) {
        showImportStatus('No appointments with email addresses found.', 'warning');
        return;
      }

      await processAppointmentsData(appointments);
      
    } catch (error) {
      console.error('Error importing from appointments:', error);
      showImportStatus('Error importing subscribers. Please try again.', 'error');
    }
  }

  // Process appointments data
  async function processAppointmentsData(appointments) {
    // Get existing subscribers from localStorage
    let existingSubscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    
    let importedCount = 0;
    for (const appointment of appointments) {
      // Check if subscriber already exists
      const existingSubscriber = existingSubscribers.find(sub => sub.email === appointment.email);
      
      if (!existingSubscriber) {
        // Create tag from service type - check multiple possible fields
        let serviceTag = 'general';
        if (appointment.service_type) {
          serviceTag = appointment.service_type.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
        } else if (appointment.service) {
          serviceTag = appointment.service.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
        } else if (appointment.selected_service) {
          serviceTag = appointment.selected_service.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
        }
        
        console.log('Appointment data:', appointment);
        console.log('Generated tag:', serviceTag);
        
        // Add new subscriber
        const newSubscriber = {
          id: Date.now() + Math.random(),
          email: appointment.email,
          name: appointment.name,
          source: 'appointment_form',
          status: 'active',
          service_interest: appointment.service_type,
          tags: [serviceTag],
          created_at: new Date().toISOString()
        };
        
        existingSubscribers.push(newSubscriber);
        importedCount++;
      }
    }
    
    // Save to localStorage
    localStorage.setItem('email_subscribers', JSON.stringify(existingSubscribers));
    
    showImportStatus(`Successfully imported ${importedCount} new subscribers from appointments!`, 'success');
    loadSubscribers();
    updateStats();
  }

  // Show import status
  function showImportStatus(message, type = 'info') {
    const statusDiv = document.getElementById('import-status');
    const statusText = document.getElementById('import-status-text');
    
    statusText.textContent = message;
    statusDiv.classList.remove('hidden');
    
    // Update styling based on type
    statusDiv.className = 'mb-4 p-4 rounded-lg';
    if (type === 'success') {
      statusDiv.classList.add('bg-green-50', 'dark:bg-green-900/20', 'border', 'border-green-200', 'dark:border-green-800');
      statusText.classList.add('text-green-800', 'dark:text-green-200');
    } else if (type === 'warning') {
      statusDiv.classList.add('bg-yellow-50', 'dark:bg-yellow-900/20', 'border', 'border-yellow-200', 'dark:border-yellow-800');
      statusText.classList.add('text-yellow-800', 'dark:text-yellow-200');
    } else if (type === 'error') {
      statusDiv.classList.add('bg-red-50', 'dark:bg-red-900/20', 'border', 'border-red-200', 'dark:border-red-800');
      statusText.classList.add('text-red-800', 'dark:text-red-200');
    } else {
      statusDiv.classList.add('bg-blue-50', 'dark:bg-blue-900/20', 'border', 'border-blue-200', 'dark:border-blue-800');
      statusText.classList.add('text-blue-800', 'dark:text-blue-200');
    }
    
    // Hide after 5 seconds for success/warning/error
    if (type !== 'info') {
      setTimeout(() => {
        statusDiv.classList.add('hidden');
      }, 5000);
    }
  }

  // Load subscribers
  async function loadSubscribers() {
    try {
      // Load from localStorage
      const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
      displaySubscribers(subscribers);
      updateStats();
      
      // Load tags for filter dropdown
      loadAvailableTagsForFilter();
      
      // Update subscriber count
      document.getElementById('subscriber-count').textContent = 
        `Showing ${subscribers.length} of ${subscribers.length} subscribers`;
    } catch (error) {
      console.error('Error loading subscribers:', error);
      displaySubscribers([]);
    }
  }

  // Apply subscriber filters
  function applySubscriberFilters() {
    const sourceFilter = document.getElementById('filter-source').value;
    const tagFilter = document.getElementById('filter-tag').value;
    const statusFilter = document.getElementById('filter-status').value;
    
    const allSubscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    let filteredSubscribers = allSubscribers;
    
    // Apply source filter
    if (sourceFilter) {
      filteredSubscribers = filteredSubscribers.filter(sub => sub.source === sourceFilter);
    }
    
    // Apply tag filter
    if (tagFilter) {
      filteredSubscribers = filteredSubscribers.filter(sub => {
        if (!sub.tags || !Array.isArray(sub.tags)) return false;
        return sub.tags.includes(tagFilter);
      });
    }
    
    // Apply status filter
    if (statusFilter) {
      filteredSubscribers = filteredSubscribers.filter(sub => sub.status === statusFilter);
    }
    
    // Update count
    document.getElementById('subscriber-count').textContent = 
      `Showing ${filteredSubscribers.length} of ${allSubscribers.length} subscribers`;
    
    // Display filtered results
    displaySubscribers(filteredSubscribers);
  }

  // Clear all filters
  function clearSubscriberFilters() {
    document.getElementById('filter-source').value = '';
    document.getElementById('filter-tag').value = '';
    document.getElementById('filter-status').value = '';
    loadSubscribers();
  }

  // Export filtered subscribers to CSV
  function exportSubscribersCSV() {
    const sourceFilter = document.getElementById('filter-source').value;
    const tagFilter = document.getElementById('filter-tag').value;
    const statusFilter = document.getElementById('filter-status').value;
    
    const allSubscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    let filteredSubscribers = allSubscribers;
    
    // Apply same filters as display
    if (sourceFilter) {
      filteredSubscribers = filteredSubscribers.filter(sub => sub.source === sourceFilter);
    }
    if (tagFilter) {
      filteredSubscribers = filteredSubscribers.filter(sub => {
        if (!sub.tags || !Array.isArray(sub.tags)) return false;
        return sub.tags.includes(tagFilter);
      });
    }
    if (statusFilter) {
      filteredSubscribers = filteredSubscribers.filter(sub => sub.status === statusFilter);
    }
    
    if (filteredSubscribers.length === 0) {
      alert('No subscribers to export. Please add some subscribers first.');
      return;
    }
    
    // Create CSV content
    const headers = ['Name', 'Email', 'Source', 'Tags', 'Status', 'Service Interest', 'Created At'];
    const csvContent = [
      headers.join(','),
      ...filteredSubscribers.map(sub => [
        `"${sub.name || ''}"`,
        `"${sub.email || ''}"`,
        `"${sub.source || ''}"`,
        `"${(sub.tags || []).join('; ')}"`,
        `"${sub.status || ''}"`,
        `"${sub.service_interest || ''}"`,
        `"${sub.created_at || ''}"`
      ].join(','))
    ].join('\n');
    
    // Download CSV
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `jyotirsetu_subscribers_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showImportStatus(`Exported ${filteredSubscribers.length} subscribers to CSV`, 'success');
  }

  // Load available tags for filter dropdown
  function loadAvailableTagsForFilter() {
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const allTags = new Set();
    
    subscribers.forEach(sub => {
      if (sub.tags && Array.isArray(sub.tags)) {
        sub.tags.forEach(tag => allTags.add(tag));
      }
    });
    
    const tagSelect = document.getElementById('filter-tag');
    tagSelect.innerHTML = '<option value="">All Tags</option>';
    
    Array.from(allTags).sort().forEach(tag => {
      const option = document.createElement('option');
      option.value = tag;
      option.textContent = tag;
      tagSelect.appendChild(option);
    });
  }

  // Bulk Actions Functions
  function toggleSelectAll() {
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    const checkboxes = document.querySelectorAll('.subscriber-checkbox');
    
    checkboxes.forEach(checkbox => {
      checkbox.checked = selectAllCheckbox.checked;
    });
    
    updateBulkActions();
  }

  function selectAllSubscribers() {
    const checkboxes = document.querySelectorAll('.subscriber-checkbox');
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    
    checkboxes.forEach(checkbox => {
      checkbox.checked = true;
    });
    selectAllCheckbox.checked = true;
    
    updateBulkActions();
  }

  function clearAllSelections() {
    const checkboxes = document.querySelectorAll('.subscriber-checkbox');
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    
    checkboxes.forEach(checkbox => {
      checkbox.checked = false;
    });
    selectAllCheckbox.checked = false;
    
    updateBulkActions();
  }

  function updateBulkActions() {
    const checkboxes = document.querySelectorAll('.subscriber-checkbox:checked');
    const bulkActions = document.getElementById('bulk-actions');
    const selectedCount = document.getElementById('selected-count');
    
    if (checkboxes.length > 0) {
      bulkActions.classList.remove('hidden');
      selectedCount.textContent = `${checkboxes.length} subscriber${checkboxes.length === 1 ? '' : 's'} selected`;
    } else {
      bulkActions.classList.add('hidden');
    }
  }

  function bulkMarkActive() {
    const checkboxes = document.querySelectorAll('.subscriber-checkbox:checked');
    if (checkboxes.length === 0) {
      alert('Please select subscribers to mark as active.');
      return;
    }
    
    if (!confirm(`Mark ${checkboxes.length} subscriber${checkboxes.length === 1 ? '' : 's'} as active?`)) {
      return;
    }
    
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const selectedIds = Array.from(checkboxes).map(cb => cb.value);
    
    selectedIds.forEach(id => {
      const subscriber = subscribers.find(sub => sub.id == id);
      if (subscriber) {
        subscriber.status = 'active';
      }
    });
    
    localStorage.setItem('email_subscribers', JSON.stringify(subscribers));
    showImportStatus(`Marked ${selectedIds.length} subscriber${selectedIds.length === 1 ? '' : 's'} as active`, 'success');
    
    // Refresh display and clear selections
    applySubscriberFilters();
    clearAllSelections();
  }

  function bulkMarkInactive() {
    const checkboxes = document.querySelectorAll('.subscriber-checkbox:checked');
    if (checkboxes.length === 0) {
      alert('Please select subscribers to mark as inactive.');
      return;
    }
    
    if (!confirm(`Mark ${checkboxes.length} subscriber${checkboxes.length === 1 ? '' : 's'} as inactive?`)) {
      return;
    }
    
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const selectedIds = Array.from(checkboxes).map(cb => cb.value);
    
    selectedIds.forEach(id => {
      const subscriber = subscribers.find(sub => sub.id == id);
      if (subscriber) {
        subscriber.status = 'inactive';
      }
    });
    
    localStorage.setItem('email_subscribers', JSON.stringify(subscribers));
    showImportStatus(`Marked ${selectedIds.length} subscriber${selectedIds.length === 1 ? '' : 's'} as inactive`, 'success');
    
    // Refresh display and clear selections
    applySubscriberFilters();
    clearAllSelections();
  }

  function bulkDelete() {
    const checkboxes = document.querySelectorAll('.subscriber-checkbox:checked');
    if (checkboxes.length === 0) {
      alert('Please select subscribers to delete.');
      return;
    }
    
    if (!confirm(`Delete ${checkboxes.length} subscriber${checkboxes.length === 1 ? '' : 's'}? This action cannot be undone.`)) {
      return;
    }
    
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const selectedIds = Array.from(checkboxes).map(cb => cb.value);
    
    const updatedSubscribers = subscribers.filter(sub => !selectedIds.includes(sub.id.toString()));
    
    localStorage.setItem('email_subscribers', JSON.stringify(updatedSubscribers));
    showImportStatus(`Deleted ${selectedIds.length} subscriber${selectedIds.length === 1 ? '' : 's'}`, 'success');
    
    // Refresh display and clear selections
    applySubscriberFilters();
    clearAllSelections();
  }

  // View subscriber details
  function viewSubscriberDetails(subscriberId) {
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const subscriber = subscribers.find(sub => sub.id === subscriberId);
    
    if (!subscriber) {
      alert('Subscriber not found');
      return;
    }

    // Get campaigns this subscriber was included in
    const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
    const subscriberCampaigns = campaigns.filter(campaign => {
      if (campaign.status !== 'sent') return false;
      
      // Check if subscriber would have been included in this campaign
      if (campaign.recipientType === 'all') return true;
      if (campaign.recipientType === subscriber.source) return true;
      
      if (campaign.selectedTags && campaign.selectedTags.length > 0) {
        if (!subscriber.tags || !Array.isArray(subscriber.tags)) return false;
        return campaign.selectedTags.some(tag => subscriber.tags.includes(tag));
      }
      
      return false;
    });

    const modal = document.getElementById('modal-container');
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="if(event.target === this) closeModal()">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">👤 Subscriber Details</h3>
            
            <!-- Subscriber Info -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div class="bg-gray-50 dark:bg-slate-700 p-4 rounded-lg">
                <h4 class="font-semibold text-gray-900 dark:text-white mb-3">📋 Personal Information</h4>
                <div class="space-y-2 text-sm">
                  <div><strong>Name:</strong> ${subscriber.name || 'N/A'}</div>
                  <div><strong>Email:</strong> ${subscriber.email}</div>
                  <div><strong>Status:</strong> 
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                      subscriber.status === 'active' 
                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' 
                        : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                    }">
                      ${subscriber.status === 'active' ? '✅ Active' : '❌ Inactive'}
                    </span>
                  </div>
                  <div><strong>Added:</strong> ${new Date(subscriber.created_at).toLocaleString()}</div>
                </div>
              </div>
              
              <div class="bg-gray-50 dark:bg-slate-700 p-4 rounded-lg">
                <h4 class="font-semibold text-gray-900 dark:text-white mb-3">📊 Subscription Details</h4>
                <div class="space-y-2 text-sm">
                  <div><strong>Source:</strong> ${subscriber.source.replace('_', ' ')}</div>
                  <div><strong>Service Interest:</strong> ${subscriber.service_interest || 'N/A'}</div>
                  <div><strong>Tags:</strong> ${subscriber.tags && subscriber.tags.length > 0 ? subscriber.tags.join(', ') : 'No tags'}</div>
                  <div><strong>Campaigns Received:</strong> ${subscriberCampaigns.length}</div>
                </div>
              </div>
            </div>

            <!-- Campaign History -->
            <div class="bg-gray-50 dark:bg-slate-700 p-4 rounded-lg">
              <h4 class="font-semibold text-gray-900 dark:text-white mb-3">📧 Campaign History (${subscriberCampaigns.length})</h4>
              <div class="max-h-60 overflow-y-auto">
                ${subscriberCampaigns.length === 0 ? 
                  '<p class="text-gray-500 dark:text-gray-400 text-sm">No campaigns received yet</p>' :
                  `<div class="space-y-2">
                    ${subscriberCampaigns.map(campaign => `
                      <div class="bg-white dark:bg-slate-800 p-3 rounded border">
                        <div class="flex justify-between items-start">
                          <div>
                            <div class="font-medium text-sm text-gray-900 dark:text-white">${campaign.subject}</div>
                            <div class="text-xs text-gray-500 dark:text-gray-400">Sent: ${new Date(campaign.sent_at).toLocaleString()}</div>
                          </div>
                          <div class="text-xs text-gray-500 dark:text-gray-400">
                            Opens: ${campaign.opens || 0} | Clicks: ${campaign.clicks || 0}
                          </div>
                        </div>
                      </div>
                    `).join('')}
                  </div>`
                }
              </div>
            </div>

            <div class="flex justify-end mt-6 space-x-3">
              <button onclick="editSubscriber(${subscriber.id})" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                ✏️ Edit Subscriber
              </button>
              <button onclick="closeModal()" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Display subscribers in table
  function displaySubscribers(subscribers) {
    const tbody = document.getElementById('subscribers-table-body');
    
    if (!subscribers || subscribers.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="7" class="px-6 py-12 text-center text-gray-500 dark:text-gray-400">
            <div class="flex flex-col items-center">
              <span class="text-4xl mb-4">📧</span>
              <p class="text-lg font-medium mb-2">No subscribers yet</p>
              <p class="text-sm">Import from appointments or upload a CSV file to get started</p>
            </div>
          </td>
        </tr>
      `;
      return;
    }

    tbody.innerHTML = subscribers.map(subscriber => `
      <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
        <td class="px-6 py-4 whitespace-nowrap">
          <input type="checkbox" class="subscriber-checkbox rounded border-gray-300 text-blue-600 focus:ring-blue-500" 
                 value="${subscriber.id}" onchange="updateBulkActions()">
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
          ${subscriber.email}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          ${subscriber.name || 'N/A'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            subscriber.source === 'appointment_form' 
              ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' 
              : subscriber.source === 'csv_upload'
              ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
              : 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'
          }">
            ${subscriber.source === 'appointment_form' ? '📅 Appointment' : subscriber.source === 'csv_upload' ? '📁 CSV Upload' : '✋ Manual'}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          <div class="flex flex-wrap gap-1">
            ${(subscriber.tags && subscriber.tags.length > 0) ? subscriber.tags.map(tag => 
              `<span class="px-2 py-1 text-xs bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full">${tag.replace(/_/g, ' ')}</span>`
            ).join('') : '<span class="text-gray-400 text-xs">No tags</span>'}
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            subscriber.status === 'active' 
              ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' 
              : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
          }">
            ${subscriber.status === 'active' ? '✅ Active' : '❌ Inactive'}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          ${new Date(subscriber.created_at).toLocaleDateString()}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <button
            onclick="viewSubscriberDetails(${subscriber.id})"
            class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 mr-3"
          >
            👁️ View
          </button>
          <button
            onclick="editSubscriber(${subscriber.id})"
            class="text-purple-600 hover:text-purple-900 dark:text-purple-400 dark:hover:text-purple-300 mr-3"
          >
            ✏️ Edit
          </button>
          <button
            onclick="deleteSubscriber(${subscriber.id})"
            class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
          >
            🗑️ Delete
          </button>
        </td>
      </tr>
    `).join('');
  }

  // Update stats
  function updateStats() {
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
    
    document.getElementById('total-subscribers').textContent = subscribers.length;
    document.getElementById('campaigns-sent').textContent = campaigns.filter(c => c.status === 'sent').length;
    document.getElementById('open-rate').textContent = '24.5%'; // Mock data
    document.getElementById('click-rate').textContent = '3.2%'; // Mock data
  }

  // Load campaigns
  function loadCampaigns() {
    const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
    console.log('📧 Loading campaigns:', campaigns);
    displayCampaigns(campaigns);
  }

  // View campaign details
  function viewCampaignDetails(campaignId) {
    const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
    const campaign = campaigns.find(c => c.id === campaignId);
    
    if (!campaign) {
      alert('Campaign not found');
      return;
    }

    // Get subscribers to show recipient details
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    let recipients = [];
    
    if (campaign.recipientType === 'all') {
      recipients = subscribers;
    } else {
      recipients = subscribers.filter(sub => sub.source === campaign.recipientType);
    }
    
    if (campaign.selectedTags && campaign.selectedTags.length > 0) {
      recipients = recipients.filter(sub => {
        if (!sub.tags || !Array.isArray(sub.tags)) return false;
        return campaign.selectedTags.some(tag => sub.tags.includes(tag));
      });
    }

    const modal = document.getElementById('modal-container');
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="if(event.target === this) closeModal()">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">📊 Campaign Details: ${campaign.subject}</h3>
            
            <!-- Campaign Info -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div class="bg-gray-50 dark:bg-slate-700 p-4 rounded-lg">
                <h4 class="font-semibold text-gray-900 dark:text-white mb-3">📋 Campaign Information</h4>
                <div class="space-y-2 text-sm">
                  <div><strong>Subject:</strong> ${campaign.subject}</div>
                  <div><strong>Status:</strong> 
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                      campaign.status === 'sent' 
                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' 
                        : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                    }">
                      ${campaign.status === 'sent' ? '✅ Sent' : '📝 Draft'}
                    </span>
                  </div>
                  <div><strong>Created:</strong> ${new Date(campaign.created_at).toLocaleString()}</div>
                  ${campaign.sent_at ? `<div><strong>Sent:</strong> ${new Date(campaign.sent_at).toLocaleString()}</div>` : ''}
                  <div><strong>Recipients:</strong> ${campaign.recipients}</div>
                  <div><strong>Opens:</strong> ${campaign.opens || 0}</div>
                  <div><strong>Clicks:</strong> ${campaign.clicks || 0}</div>
                </div>
              </div>
              
              <div class="bg-gray-50 dark:bg-slate-700 p-4 rounded-lg">
                <h4 class="font-semibold text-gray-900 dark:text-white mb-3">🎯 Targeting</h4>
                <div class="space-y-2 text-sm">
                  <div><strong>Recipient Type:</strong> ${campaign.recipientType === 'all' ? 'All Subscribers' : campaign.recipientType.replace('_', ' ')}</div>
                  ${campaign.selectedTags && campaign.selectedTags.length > 0 ? 
                    `<div><strong>Tags:</strong> ${campaign.selectedTags.join(', ')}</div>` : 
                    '<div><strong>Tags:</strong> All tags</div>'
                  }
                  <div><strong>Template Used:</strong> ${campaign.templateId ? 'Yes' : 'No'}</div>
                </div>
              </div>
            </div>

            <!-- Campaign Content -->
            <div class="bg-gray-50 dark:bg-slate-700 p-4 rounded-lg mb-6">
              <h4 class="font-semibold text-gray-900 dark:text-white mb-3">📝 Campaign Content</h4>
              <div class="bg-white dark:bg-slate-800 p-4 rounded border">
                <div class="whitespace-pre-wrap text-sm text-gray-700 dark:text-gray-300">${campaign.content}</div>
              </div>
            </div>

            <!-- Recipients List -->
            <div class="bg-gray-50 dark:bg-slate-700 p-4 rounded-lg">
              <h4 class="font-semibold text-gray-900 dark:text-white mb-3">📧 Recipients (${recipients.length})</h4>
              <div class="max-h-60 overflow-y-auto">
                ${recipients.length === 0 ? 
                  '<p class="text-gray-500 dark:text-gray-400 text-sm">No recipients found</p>' :
                  `<div class="space-y-2">
                    ${recipients.map(recipient => `
                      <div class="flex justify-between items-center bg-white dark:bg-slate-800 p-3 rounded border">
                        <div>
                          <div class="font-medium text-sm text-gray-900 dark:text-white">${recipient.name || 'N/A'}</div>
                          <div class="text-xs text-gray-500 dark:text-gray-400">${recipient.email}</div>
                        </div>
                        <div class="text-xs text-gray-500 dark:text-gray-400">
                          ${recipient.tags && recipient.tags.length > 0 ? recipient.tags.join(', ') : 'No tags'}
                        </div>
                      </div>
                    `).join('')}
                  </div>`
                }
              </div>
            </div>

            <div class="flex justify-end mt-6">
              <button onclick="closeModal()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Display campaigns
  function displayCampaigns(campaigns) {
    const container = document.getElementById('campaigns-list');
    console.log('📧 Displaying campaigns:', campaigns, 'Container:', container);
    
    if (!campaigns || campaigns.length === 0) {
      container.innerHTML = `
        <div class="text-center py-16 text-gray-500 dark:text-gray-400 col-span-full">
          <div class="bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-2xl p-12 border-2 border-dashed border-purple-200 dark:border-purple-800">
            <span class="text-6xl mb-6 block">📧</span>
            <h4 class="text-xl font-semibold mb-3 text-gray-700 dark:text-gray-300">No campaigns yet</h4>
            <p class="text-gray-500 dark:text-gray-400 mb-6">Create your first email campaign to start engaging with your subscribers</p>
            <button
              onclick="showCreateCampaign()"
              class="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-6 py-3 rounded-xl text-sm font-semibold transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
            >
              Create Your First Campaign
            </button>
          </div>
        </div>
      `;
      return;
    }

    container.innerHTML = campaigns.map(campaign => `
      <div class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 p-6 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
        <!-- Campaign Header -->
        <div class="flex justify-between items-start mb-4">
          <div class="flex-1">
            <div class="flex items-center gap-3 mb-2">
              <div class="w-10 h-10 bg-gradient-to-br from-purple-100 to-blue-100 dark:from-purple-900 dark:to-blue-900 rounded-xl flex items-center justify-center">
                <span class="text-purple-600 dark:text-purple-400 text-lg">📧</span>
              </div>
              <div>
                <h4 class="text-lg font-bold text-gray-900 dark:text-white line-clamp-2">${campaign.subject}</h4>
                <p class="text-sm text-gray-500 dark:text-gray-400">${new Date(campaign.created_at).toLocaleDateString()}</p>
              </div>
            </div>
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">${campaign.description || 'No description provided'}</p>
          </div>
          <div class="flex flex-col gap-2">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold ${
              campaign.status === 'sent' 
                ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' 
                : campaign.status === 'draft'
                ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                : 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
            }">
              ${campaign.status === 'sent' ? '✅ Sent' : campaign.status === 'draft' ? '📝 Draft' : '⏳ Scheduled'}
            </span>
          </div>
        </div>
        
        <!-- Campaign Stats -->
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div class="bg-gray-50 dark:bg-slate-700 rounded-xl p-3 text-center">
            <div class="text-xl font-bold text-gray-900 dark:text-white">${campaign.recipients}</div>
            <div class="text-xs text-gray-500 dark:text-gray-400">Recipients</div>
          </div>
          <div class="bg-gray-50 dark:bg-slate-700 rounded-xl p-3 text-center">
            <div class="text-xl font-bold text-gray-900 dark:text-white">${campaign.recipientType === 'all' ? 'All' : campaign.recipientType.replace('_', ' ')}</div>
            <div class="text-xs text-gray-500 dark:text-gray-400">Target</div>
          </div>
        </div>
        
        ${campaign.status === 'sent' ? `
          <!-- Performance Metrics -->
          <div class="border-t border-gray-200 dark:border-gray-700 pt-4 mb-4">
            <div class="grid grid-cols-3 gap-3 text-center">
              <div class="bg-green-50 dark:bg-green-900/20 rounded-lg p-3">
                <div class="text-lg font-bold text-green-600">${campaign.opens || 0}</div>
                <div class="text-xs text-green-600 dark:text-green-400">Opens</div>
              </div>
              <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3">
                <div class="text-lg font-bold text-blue-600">${campaign.clicks || 0}</div>
                <div class="text-xs text-blue-600 dark:text-blue-400">Clicks</div>
              </div>
              <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-3">
                <div class="text-lg font-bold text-purple-600">${Math.round((campaign.opens || 0) / campaign.recipients * 100)}%</div>
                <div class="text-xs text-purple-600 dark:text-purple-400">Open Rate</div>
              </div>
            </div>
          </div>
        ` : ''}
        
        <!-- Action Buttons -->
        <div class="flex gap-2">
          <button 
            onclick="viewCampaignDetails(${campaign.id})" 
            class="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md flex items-center justify-center gap-2"
          >
            <span>👁️</span>
            View Details
          </button>
          <button 
            onclick="deleteCampaign(${campaign.id})" 
            class="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
          >
            🗑️
          </button>
        </div>
      </div>
    `).join('');
  }

  // Load templates
  function loadTemplates() {
    const templates = JSON.parse(localStorage.getItem('email_templates') || '[]');
    displayTemplates(templates);
  }

  // Display templates
  function displayTemplates(templates) {
    const container = document.getElementById('templates-grid');
    
    if (!templates || templates.length === 0) {
      container.innerHTML = `
        <div class="text-center py-12 text-gray-500 dark:text-gray-400 col-span-full">
          <span class="text-4xl mb-4 block">📝</span>
          <p class="text-lg font-medium mb-2">No templates yet</p>
          <p class="text-sm">Create your first email template to get started</p>
        </div>
      `;
      return;
    }

    container.innerHTML = templates.map(template => `
      <div class="bg-white dark:bg-slate-800 rounded-lg shadow p-6 border border-gray-200 dark:border-gray-700">
        <div class="mb-4">
          <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">${template.name}</h4>
          <p class="text-sm text-gray-500 dark:text-gray-400">${template.description}</p>
        </div>
        <div class="mb-4">
          <div class="bg-gray-100 dark:bg-gray-700 rounded p-3 text-sm text-gray-600 dark:text-gray-400">
            ${template.preview}
          </div>
        </div>
        <div class="flex justify-between items-center">
          <span class="text-xs text-gray-500 dark:text-gray-400">
            Created: ${new Date(template.created_at).toLocaleDateString()}
          </span>
          <div class="flex space-x-2">
            <button onclick="editTemplate(${template.id})" class="text-purple-600 hover:text-purple-900 dark:text-purple-400 dark:hover:text-purple-300 text-sm">
              ✏️ Edit
            </button>
            <button onclick="deleteTemplate(${template.id})" class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 text-sm">
              🗑️ Delete
            </button>
          </div>
        </div>
      </div>
    `).join('');
  }

  // Load analytics
  function loadAnalytics() {
    const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    
    // Update analytics charts with real data
    updateAnalyticsCharts(campaigns, subscribers);
  }

  // Update analytics charts
  function updateAnalyticsCharts(campaigns, subscribers) {
    // Mock analytics data - in real implementation, this would come from email service API
    const totalCampaigns = campaigns.length;
    const totalSubscribers = subscribers.length;
    const avgOpenRate = 24.5;
    const avgClickRate = 3.2;
    
    // Update campaign performance chart
    const performanceChart = document.querySelector('#analytics-content .grid .bg-white\\/80:first-child .h-64');
    if (performanceChart) {
      performanceChart.innerHTML = `
        <div class="w-full h-full flex flex-col justify-center items-center space-y-4">
          <div class="text-center">
            <div class="text-3xl font-bold text-gray-900 dark:text-white">${totalCampaigns}</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">Total Campaigns</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600">${avgOpenRate}%</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">Average Open Rate</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-600">${avgClickRate}%</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">Average Click Rate</div>
          </div>
        </div>
      `;
    }
    
    // Update subscriber growth chart
    const growthChart = document.querySelector('#analytics-content .grid .bg-white\\/80:last-child .h-64');
    if (growthChart) {
      growthChart.innerHTML = `
        <div class="w-full h-full flex flex-col justify-center items-center space-y-4">
          <div class="text-center">
            <div class="text-3xl font-bold text-gray-900 dark:text-white">${totalSubscribers}</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">Total Subscribers</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-purple-600">+12</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">This Month</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600">+5.2%</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">Growth Rate</div>
          </div>
        </div>
      `;
    }
  }

  // Show CSV upload modal
  function showCSVUpload() {
    const modal = document.getElementById('modal-container');
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="if(event.target === this) closeModal()">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-md w-full mx-4">
          <div class="p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Upload CSV File</h3>
            <div class="mb-4">
              <input type="file" id="csv-file" accept=".csv" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white">
            </div>
            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">CSV Format:</label>
              <div class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 p-2 rounded">
                email,name,source<br>
                john@example.com,John Doe,csv_upload<br>
                jane@example.com,Jane Smith,csv_upload
              </div>
            </div>
            <div class="flex justify-end space-x-3">
              <button onclick="closeModal()" class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                Cancel
              </button>
              <button onclick="processCSV()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                Upload
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Process CSV file
  function processCSV() {
    const fileInput = document.getElementById('csv-file');
    const file = fileInput.files[0];
    
    if (!file) {
      alert('Please select a CSV file');
      return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
      const csv = e.target.result;
      const lines = csv.split('\n');
      const headers = lines[0].split(',');
      
      let importedCount = 0;
      const existingSubscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
      
      for (let i = 1; i < lines.length; i++) {
        if (lines[i].trim()) {
          const values = lines[i].split(',');
          const email = values[0]?.trim();
          const name = values[1]?.trim() || '';
          const source = values[2]?.trim() || 'csv_upload';
          
                                if (email && !existingSubscribers.find(sub => sub.email === email)) {
                        existingSubscribers.push({
                          id: Date.now() + Math.random(),
                          email: email,
                          name: name,
                          source: 'csv_upload',
                          status: 'active',
                          service_interest: '',
                          tags: [],
                          created_at: new Date().toISOString()
                        });
                        importedCount++;
                      }
        }
      }
      
      localStorage.setItem('email_subscribers', JSON.stringify(existingSubscribers));
      closeModal();
      showImportStatus(`Successfully imported ${importedCount} subscribers from CSV!`, 'success');
      loadSubscribers();
      updateStats();
    };
    
    reader.readAsText(file);
  }

  // Show add subscriber modal
  function showAddSubscriber() {
    const modal = document.getElementById('modal-container');
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="if(event.target === this) closeModal()">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-md w-full mx-4">
          <div class="p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Add New Subscriber</h3>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email *</label>
                <input type="email" id="new-subscriber-email" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" required>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Name</label>
                <input type="text" id="new-subscriber-name" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Service Interest</label>
                <select id="new-subscriber-service" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white">
                  <option value="">Select Service</option>
                  <option value="Kundli Analysis">Kundli Analysis</option>
                  <option value="Palmistry">Palmistry</option>
                  <option value="Numerology">Numerology</option>
                  <option value="Gemstone Consultation">Gemstone Consultation</option>
                  <option value="Career & Finance">Career & Finance</option>
                  <option value="Matchmaking">Matchmaking</option>
                </select>
              </div>
            </div>
            <div class="flex justify-end space-x-3 mt-6">
              <button onclick="closeModal()" class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                Cancel
              </button>
              <button onclick="addNewSubscriber()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                Add Subscriber
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Add new subscriber
  function addNewSubscriber() {
    const email = document.getElementById('new-subscriber-email').value;
    const name = document.getElementById('new-subscriber-name').value;
    const service = document.getElementById('new-subscriber-service').value;
    
    if (!email) {
      alert('Email is required');
      return;
    }
    
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      alert('Please enter a valid email address');
      return;
    }
    
    const existingSubscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    
    if (existingSubscribers.find(sub => sub.email === email)) {
      alert('Subscriber with this email already exists');
      return;
    }
    
    const tags = service ? [service.toLowerCase().replace(/\s+/g, '_')] : [];
    
    existingSubscribers.push({
      id: Date.now() + Math.random(),
      email: email,
      name: name,
      source: 'manual_add',
      status: 'active',
      service_interest: service,
      tags: tags,
      created_at: new Date().toISOString()
    });
    
    localStorage.setItem('email_subscribers', JSON.stringify(existingSubscribers));
    closeModal();
    showImportStatus('Subscriber added successfully!', 'success');
    loadSubscribers();
    updateStats();
  }

  // Load template into campaign
  function loadTemplate() {
    const templateSelect = document.getElementById('template-select') as HTMLSelectElement;
    const contentTextarea = document.getElementById('campaign-content') as HTMLTextAreaElement;
    
    if (templateSelect.value) {
      const templates = JSON.parse(localStorage.getItem('email_templates') || '[]');
      const selectedTemplate = templates.find(t => t.id == templateSelect.value);
      
      if (selectedTemplate) {
        contentTextarea.value = selectedTemplate.content;
      }
    }
  }

  // Get selected tags
  function getSelectedTags() {
    const checkboxes = document.querySelectorAll('.tag-checkbox:checked');
    return Array.from(checkboxes).map(cb => cb.value);
  }

  // Get recipient count based on selection and tags
  function getRecipientCount(subscribers, recipientType, selectedTags) {
    let filteredSubscribers = subscribers;
    
    // Filter by source type
    if (recipientType !== 'all') {
      filteredSubscribers = subscribers.filter(sub => sub.source === recipientType);
    }
    
    // Filter by selected tags
    if (selectedTags.length > 0) {
      filteredSubscribers = filteredSubscribers.filter(sub => {
        if (!sub.tags || !Array.isArray(sub.tags)) return false;
        return selectedTags.some(tag => sub.tags.includes(tag));
      });
    }
    
    return filteredSubscribers.length;
  }

  // Update recipient count based on selection
  function updateRecipientCount() {
    const recipientSelect = document.getElementById('campaign-recipients') as HTMLSelectElement;
    const countDiv = document.getElementById('recipient-count');
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    
    const selectedTags = getSelectedTags();
    const count = getRecipientCount(subscribers, recipientSelect.value, selectedTags);
    
    countDiv.textContent = `Will send to ${count} subscribers`;
  }

  // Show create campaign modal
  function showCreateCampaign() {
    const modal = document.getElementById('modal-container');
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="if(event.target === this) closeModal()">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Create Email Campaign</h3>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Subject *</label>
                <input type="text" id="campaign-subject" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" required>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Description</label>
                <textarea id="campaign-description" rows="3" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white"></textarea>
              </div>
                                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email Content</label>
                            <div class="mb-2">
                              <select id="template-select" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" onchange="loadTemplate()">
                                <option value="">Select a template (optional)</option>
                              </select>
                            </div>
                            <textarea id="campaign-content" rows="8" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" placeholder="Write your email content here..."></textarea>
                          </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Recipients</label>
                <select id="campaign-recipients" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" onchange="updateRecipientCount()">
                  <option value="all">All Subscribers</option>
                  <option value="appointment_form">Appointment Form Subscribers</option>
                  <option value="csv_upload">CSV Upload Subscribers</option>
                  <option value="manual_add">Manually Added Subscribers</option>
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Target by Tags</label>
                <div id="tag-selection" class="space-y-2">
                  <div class="text-sm text-gray-500 dark:text-gray-400">Select tags to target specific subscriber groups:</div>
                  <div id="available-tags" class="flex flex-wrap gap-2">
                    <!-- Tags will be populated dynamically -->
                  </div>
                </div>
                <div id="recipient-count" class="mt-2 text-sm text-blue-600 dark:text-blue-400"></div>
              </div>
            </div>
            <div class="flex justify-end space-x-3 mt-6">
              <button onclick="closeModal()" class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                Cancel
              </button>
              <button onclick="saveCampaign()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                Save as Draft
              </button>
              <button onclick="saveAndSendCampaign()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                Send Now
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Load templates into dropdown
    loadTemplatesIntoCampaign();
    
    // Load available tags
    loadAvailableTags();
    
    // Update recipient count
    updateRecipientCount();
  }

  // Load templates into campaign dropdown
  function loadTemplatesIntoCampaign() {
    const templateSelect = document.getElementById('template-select') as HTMLSelectElement;
    const templates = JSON.parse(localStorage.getItem('email_templates') || '[]');
    
    // Clear existing options except the first one
    templateSelect.innerHTML = '<option value="">Select a template (optional)</option>';
    
    templates.forEach(template => {
      const option = document.createElement('option');
      option.value = template.id;
      option.textContent = template.name;
      templateSelect.appendChild(option);
    });
  }

  // Load available tags
  function loadAvailableTags() {
    const tagsContainer = document.getElementById('available-tags');
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    
    // Get all unique tags from subscribers
    const allTags = new Set();
    subscribers.forEach(sub => {
      if (sub.tags && Array.isArray(sub.tags)) {
        sub.tags.forEach(tag => allTags.add(tag));
      }
    });
    
    tagsContainer.innerHTML = '';
    
    if (allTags.size === 0) {
      tagsContainer.innerHTML = '<div class="text-sm text-gray-500 dark:text-gray-400">No tags available</div>';
      return;
    }
    
    allTags.forEach(tag => {
      const tagElement = document.createElement('div');
      tagElement.className = 'flex items-center space-x-2';
      tagElement.innerHTML = `
        <input type="checkbox" id="tag-${tag}" value="${tag}" class="tag-checkbox" onchange="updateRecipientCount()">
        <label for="tag-${tag}" class="text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
          ${tag.replace(/_/g, ' ')}
        </label>
      `;
      tagsContainer.appendChild(tagElement);
    });
  }

  // Save campaign
  function saveCampaign() {
    const subject = document.getElementById('campaign-subject').value;
    const description = document.getElementById('campaign-description').value;
    const content = document.getElementById('campaign-content').value;
    const recipients = document.getElementById('campaign-recipients').value;
    
    if (!subject) {
      alert('Subject is required');
      return;
    }
    
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const selectedTags = getSelectedTags();
    const recipientCount = getRecipientCount(subscribers, recipients, selectedTags);
    
    const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
    campaigns.push({
      id: Date.now() + Math.random(),
      subject: subject,
      description: description,
      content: content,
      recipients: recipientCount,
      recipientType: recipients,
      selectedTags: selectedTags,
      status: 'draft',
      created_at: new Date().toISOString(),
      opens: 0,
      clicks: 0
    });
    
    localStorage.setItem('email_campaigns', JSON.stringify(campaigns));
    closeModal();
    showImportStatus('Campaign saved as draft!', 'success');
    loadCampaigns();
    updateStats();
  }

  // Save and send campaign
  async function saveAndSendCampaign() {
    const subject = document.getElementById('campaign-subject').value;
    const description = document.getElementById('campaign-description').value;
    const content = document.getElementById('campaign-content').value;
    const recipients = document.getElementById('campaign-recipients').value;
    
    if (!subject || !content) {
      alert('Subject and content are required');
      return;
    }
    
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const selectedTags = getSelectedTags();
    const recipientCount = getRecipientCount(subscribers, recipients, selectedTags);
    
    if (recipientCount === 0) {
      alert('No subscribers match your criteria. Please adjust your selection.');
      return;
    }
    
    const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
    campaigns.push({
      id: Date.now() + Math.random(),
      subject: subject,
      description: description,
      content: content,
      recipients: recipientCount,
      recipientType: recipients,
      selectedTags: selectedTags,
      status: 'sent',
      created_at: new Date().toISOString(),
      sent_at: new Date().toISOString(),
      opens: Math.floor(recipientCount * 0.245), // Mock open rate
      clicks: Math.floor(recipientCount * 0.032) // Mock click rate
    });
    
    localStorage.setItem('email_campaigns', JSON.stringify(campaigns));
    closeModal();
    
    // Send real emails if Resend is configured
    if (initResend()) {
      showImportStatus(`Sending campaign to ${recipientCount} subscribers...`, 'info');
      await sendCampaignEmails(subject, content, subscribers, recipients, selectedTags);
    } else {
      showImportStatus(`Campaign saved! Configure Resend to send real emails. Currently in demo mode.`, 'warning');
      setTimeout(() => {
        showEmailPreview(subject, content, recipientCount);
      }, 1000);
    }
    
    loadCampaigns();
    updateStats();
  }

  // Send campaign emails to multiple recipients
  async function sendCampaignEmails(subject, content, subscribers, recipients, selectedTags) {
    try {
      // Filter subscribers based on criteria
      let targetSubscribers = subscribers;
      
      if (recipients !== 'all') {
        targetSubscribers = subscribers.filter(sub => sub.source === recipients);
      }
      
      if (selectedTags.length > 0) {
        targetSubscribers = targetSubscribers.filter(sub => {
          if (!sub.tags || !Array.isArray(sub.tags)) return false;
          return selectedTags.some(tag => sub.tags.includes(tag));
        });
      }

      let successCount = 0;
      let errorCount = 0;
      const errors = [];

      console.log(`📧 Starting campaign to ${targetSubscribers.length} subscribers`);
      console.log(`📧 Target subscribers:`, targetSubscribers.map(s => ({ email: s.email, name: s.name, tags: s.tags })));

      // Send emails with delay to avoid rate limiting
      for (let i = 0; i < targetSubscribers.length; i++) {
        const subscriber = targetSubscribers[i];
        
        // Validate email address
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!subscriber.email || !emailRegex.test(subscriber.email)) {
          errorCount++;
          errors.push(`${subscriber.email || 'Invalid email'}: Invalid email format`);
          console.error(`❌ Invalid email format: ${subscriber.email}`);
          continue;
        }
        
        console.log(`📧 Sending email ${i + 1}/${targetSubscribers.length} to ${subscriber.email}`);
        
        try {
          const result = await sendRealEmail(subject, content, subscriber.email, subscriber.name);
          
          if (result.success) {
            successCount++;
            console.log(`✅ Email sent successfully to ${subscriber.email}`);
          } else {
            errorCount++;
            errors.push(`${subscriber.email}: ${result.error}`);
            console.error(`❌ Failed to send email to ${subscriber.email}:`, result.error);
          }
        } catch (error) {
          errorCount++;
          errors.push(`${subscriber.email}: ${error.message}`);
          console.error(`💥 Error sending email to ${subscriber.email}:`, error);
        }

        // Add delay between emails (1 second) to avoid rate limiting
        if (i < targetSubscribers.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }

        // Update progress
        const progress = Math.round(((i + 1) / targetSubscribers.length) * 100);
        showImportStatus(`📧 Sending campaign... ${progress}% (${i + 1}/${targetSubscribers.length}) - ✅ ${successCount} sent, ❌ ${errorCount} failed`, 'info');
      }

      // Show final results
      if (errorCount === 0) {
        showImportStatus(`✅ Campaign sent successfully! ${successCount} emails delivered.`, 'success');
      } else {
        showImportStatus(`⚠️ Campaign completed with issues. ${successCount} sent, ${errorCount} failed.`, 'warning');
        console.log('Email errors:', errors);
      }

      // Show email preview with results
      setTimeout(() => {
        showEmailPreview(subject, content, successCount, errorCount);
      }, 1000);

    } catch (error) {
      console.error('Error sending campaign emails:', error);
      showImportStatus('Error sending campaign emails. Please try again.', 'error');
    }
  }

  // Show email preview (demo)
  function showEmailPreview(subject, content, recipientCount, errorCount = 0) {
    const modal = document.getElementById('modal-container');
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="if(event.target === this) closeModal()">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-2xl w-full mx-4">
          <div class="p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">📧 Email Campaign Preview</h3>
            <div class="space-y-4">
              ${errorCount === 0 ? `
                <div class="bg-green-100 dark:bg-green-900 p-4 rounded-lg">
                  <p class="text-green-800 dark:text-green-200 font-medium">✅ Campaign sent successfully!</p>
                  <p class="text-green-700 dark:text-green-300 text-sm">Recipients: ${recipientCount} emails delivered</p>
                </div>
              ` : `
                <div class="bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg">
                  <p class="text-yellow-800 dark:text-yellow-200 font-medium">⚠️ Campaign completed with issues</p>
                  <p class="text-yellow-700 dark:text-yellow-300 text-sm">✅ Sent: ${recipientCount} | ❌ Failed: ${errorCount}</p>
                </div>
              `}
              <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                <h4 class="font-semibold text-gray-900 dark:text-white mb-2">Subject: ${subject}</h4>
                <div class="text-gray-700 dark:text-gray-300 whitespace-pre-wrap">${content}</div>
              </div>
              <div class="bg-blue-100 dark:bg-blue-900 p-4 rounded-lg">
                <p class="text-blue-800 dark:text-blue-200 text-sm">
                  <strong>Powered by Resend:</strong> Professional email delivery with 3,000 free emails per month. Configure your Resend API key to enable real email sending.
                </p>
              </div>
            </div>
            <div class="flex justify-end mt-6">
              <button onclick="closeModal()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Show create template modal
  function showCreateTemplate() {
    const modal = document.getElementById('modal-container');
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="if(event.target === this) closeModal()">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-3xl w-full mx-4 max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Create Email Template</h3>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Template Name *</label>
                <input type="text" id="template-name" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" required>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Description</label>
                <textarea id="template-description" rows="2" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white"></textarea>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Template Content</label>
                <textarea id="template-content" rows="10" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" placeholder="Write your template content here..."></textarea>
              </div>
            </div>
            <div class="flex justify-end space-x-3 mt-6">
              <button onclick="closeModal()" class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                Cancel
              </button>
              <button onclick="saveTemplate()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                Save Template
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Save template
  function saveTemplate() {
    const name = document.getElementById('template-name').value;
    const description = document.getElementById('template-description').value;
    const content = document.getElementById('template-content').value;
    
    if (!name) {
      alert('Template name is required');
      return;
    }
    
    const templates = JSON.parse(localStorage.getItem('email_templates') || '[]');
    templates.push({
      id: Date.now() + Math.random(),
      name: name,
      description: description,
      content: content,
      preview: content.substring(0, 100) + '...',
      created_at: new Date().toISOString()
    });
    
    localStorage.setItem('email_templates', JSON.stringify(templates));
    closeModal();
    showImportStatus('Template saved successfully!', 'success');
    loadTemplates();
  }

  // Edit subscriber
  function editSubscriber(id) {
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const subscriber = subscribers.find(sub => sub.id === id);
    
    if (!subscriber) return;
    
    const modal = document.getElementById('modal-container');
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="if(event.target === this) closeModal()">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-md w-full mx-4">
          <div class="p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Edit Subscriber</h3>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email *</label>
                <input type="email" id="edit-subscriber-email" value="${subscriber.email}" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" required>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Name</label>
                <input type="text" id="edit-subscriber-name" value="${subscriber.name || ''}" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Status</label>
                <select id="edit-subscriber-status" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white">
                  <option value="active" ${subscriber.status === 'active' ? 'selected' : ''}>Active</option>
                  <option value="inactive" ${subscriber.status === 'inactive' ? 'selected' : ''}>Inactive</option>
                </select>
              </div>
            </div>
            <div class="flex justify-end space-x-3 mt-6">
              <button onclick="closeModal()" class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                Cancel
              </button>
              <button onclick="updateSubscriber(${id})" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                Update
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Update subscriber
  function updateSubscriber(id) {
    const email = document.getElementById('edit-subscriber-email').value;
    const name = document.getElementById('edit-subscriber-name').value;
    const status = document.getElementById('edit-subscriber-status').value;
    
    if (!email) {
      alert('Email is required');
      return;
    }
    
    const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
    const subscriberIndex = subscribers.findIndex(sub => sub.id === id);
    
    if (subscriberIndex !== -1) {
      subscribers[subscriberIndex] = {
        ...subscribers[subscriberIndex],
        email: email,
        name: name,
        status: status
      };
      
      localStorage.setItem('email_subscribers', JSON.stringify(subscribers));
      closeModal();
      showImportStatus('Subscriber updated successfully!', 'success');
      loadSubscribers();
    }
  }

  // Delete subscriber
  function deleteSubscriber(id) {
    if (confirm('Are you sure you want to delete this subscriber?')) {
      const subscribers = JSON.parse(localStorage.getItem('email_subscribers') || '[]');
      const filteredSubscribers = subscribers.filter(sub => sub.id !== id);
      
      localStorage.setItem('email_subscribers', JSON.stringify(filteredSubscribers));
      showImportStatus('Subscriber deleted successfully!', 'success');
      loadSubscribers();
      updateStats();
    }
  }

  // Edit campaign
  function editCampaign(id) {
    alert(`Edit campaign ${id} - Feature coming soon!`);
  }

  // Delete campaign
  function deleteCampaign(id) {
    if (confirm('Are you sure you want to delete this campaign?')) {
      const campaigns = JSON.parse(localStorage.getItem('email_campaigns') || '[]');
      const filteredCampaigns = campaigns.filter(campaign => campaign.id !== id);
      
      localStorage.setItem('email_campaigns', JSON.stringify(filteredCampaigns));
      showImportStatus('Campaign deleted successfully!', 'success');
      loadCampaigns();
      updateStats();
    }
  }

  // Edit template
  function editTemplate(id) {
    const templates = JSON.parse(localStorage.getItem('email_templates') || '[]');
    const template = templates.find(t => t.id === id);
    
    if (!template) {
      alert('Template not found');
      return;
    }
    
    const modal = document.getElementById('modal-container');
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="if(event.target === this) closeModal()">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-3xl w-full mx-4 max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Edit Email Template</h3>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Template Name *</label>
                <input type="text" id="edit-template-name" value="${template.name}" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" required>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Description</label>
                <textarea id="edit-template-description" rows="2" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white">${template.description || ''}</textarea>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Template Content</label>
                <textarea id="edit-template-content" rows="10" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-slate-700 dark:text-white" placeholder="Write your template content here...">${template.content}</textarea>
              </div>
            </div>
            <div class="flex justify-end space-x-3 mt-6">
              <button onclick="closeModal()" class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
                Cancel
              </button>
              <button onclick="updateTemplate(${id})" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
                Update Template
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Update template
  function updateTemplate(id) {
    const nameInput = document.getElementById('edit-template-name');
    const descriptionTextarea = document.getElementById('edit-template-description');
    const contentTextarea = document.getElementById('edit-template-content');

    const name = nameInput.value;
    const description = descriptionTextarea.value;
    const content = contentTextarea.value;
    
    if (!name) {
      alert('Template name is required');
      return;
    }
    
    const templates = JSON.parse(localStorage.getItem('email_templates') || '[]');
    const templateIndex = templates.findIndex(t => t.id === id);
    
    if (templateIndex !== -1) {
      templates[templateIndex] = {
        ...templates[templateIndex],
        name: name,
        description: description,
        content: content,
        preview: content.substring(0, 100) + '...',
        updated_at: new Date().toISOString()
      };
      
      localStorage.setItem('email_templates', JSON.stringify(templates));
      closeModal();
      showImportStatus('Template updated successfully!', 'success');
      loadTemplates();
    }
  }

  // Delete template
  function deleteTemplate(id) {
    if (confirm('Are you sure you want to delete this template?')) {
      const templates = JSON.parse(localStorage.getItem('email_templates') || '[]');
      const filteredTemplates = templates.filter(template => template.id !== id);
      
      localStorage.setItem('email_templates', JSON.stringify(filteredTemplates));
      showImportStatus('Template deleted successfully!', 'success');
      loadTemplates();
    }
  }

  // Close modal
  function closeModal() {
    document.getElementById('modal-container').innerHTML = '';
  }

  // Add escape key functionality to modals
  function addEscapeKeyListener() {
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        const modal = document.getElementById('modal-container');
        if (modal && modal.innerHTML.trim() !== '') {
          closeModal();
        }
      }
    });
  }

  // Make functions globally accessible
  window.switchTab = switchTab;
  window.importFromAppointments = importFromAppointments;
  window.showCSVUpload = showCSVUpload;
  window.showAddSubscriber = showAddSubscriber;
  window.showCreateCampaign = showCreateCampaign;
  window.showCreateTemplate = showCreateTemplate;
  window.editSubscriber = editSubscriber;
  window.deleteSubscriber = deleteSubscriber;
  window.editCampaign = editCampaign;
  window.deleteCampaign = deleteCampaign;
  window.editTemplate = editTemplate;
  window.deleteTemplate = deleteTemplate;
  window.closeModal = closeModal;
  window.processCSV = processCSV;
  window.addNewSubscriber = addNewSubscriber;
  window.saveCampaign = saveCampaign;
  window.saveAndSendCampaign = saveAndSendCampaign;
  window.saveTemplate = saveTemplate;
  window.updateSubscriber = updateSubscriber;
  window.loadTemplate = loadTemplate;
  window.updateRecipientCount = updateRecipientCount;
  window.getSelectedTags = getSelectedTags;
  window.getRecipientCount = getRecipientCount;
  window.loadTemplatesIntoCampaign = loadTemplatesIntoCampaign;
  window.loadAvailableTags = loadAvailableTags;
  window.showEmailPreview = showEmailPreview;
  window.updateTemplate = updateTemplate;
  window.sendCampaignEmails = sendCampaignEmails;
  window.sendRealEmail = sendRealEmail;
  window.initResend = initResend;
  window.applySubscriberFilters = applySubscriberFilters;
  window.clearSubscriberFilters = clearSubscriberFilters;
  window.exportSubscribersCSV = exportSubscribersCSV;
  window.toggleSelectAll = toggleSelectAll;
  window.selectAllSubscribers = selectAllSubscribers;
  window.clearAllSelections = clearAllSelections;
  window.updateBulkActions = updateBulkActions;
  window.bulkMarkActive = bulkMarkActive;
  window.bulkMarkInactive = bulkMarkInactive;
  window.bulkDelete = bulkDelete;
  window.viewCampaignDetails = viewCampaignDetails;
  window.viewSubscriberDetails = viewSubscriberDetails;
  window.cleanupInvalidSubscribers = cleanupInvalidSubscribers;
  window.downloadCampaignReport = downloadCampaignReport;
  window.generateAnalyticsReport = generateAnalyticsReport;
  window.downloadSubscriberReport = downloadSubscriberReport;

  // Initialize page
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('Email Marketing page loaded');
    
    try {
      await initSupabase();
      checkAuth();
      loadSubscribers();
      updateStats();
      addEscapeKeyListener(); // Add escape key functionality
      console.log('Email Marketing page initialized successfully');
    } catch (error) {
      console.error('Error initializing email marketing page:', error);
    }
  });
</script>

<style>
  .tab-button.active {
    border-bottom-color: rgb(147 51 234);
    color: rgb(147 51 234);
  }
  
  .tab-button:hover {
    color: rgb(75 85 99);
  }
  
  .dark .tab-button:hover {
    color: rgb(209 213 219);
  }
</style>

</Layout>
