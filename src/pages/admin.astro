---
import Layout from '~/layouts/PageLayout.astro';
import { supabase } from '~/lib/supabase';

// This will be a client-side rendered page for dynamic content
---

<Layout metadata={{
  title: "Admin Dashboard - JyotirSetu",
  description: "Manage JyotirSetu website content, appointments, and daily tips"
}}>

<!-- Load Supabase from CDN -->
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-purple-900 dark:to-gray-900">
    <!-- Admin Header -->
    <header class="bg-white dark:bg-slate-800 shadow-lg border-b border-purple-200 dark:border-purple-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <h1 class="text-2xl font-bold text-purple-600 dark:text-purple-400">
                🌟 JyotirSetu Admin
              </h1>
            </div>
          </div>
          <div class="flex items-center space-x-4">
            <span class="text-sm text-gray-600 dark:text-gray-400">
              Welcome, Admin
            </span>
            <button
              id="logout-btn"
              class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200"
            >
              Logout
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Admin Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Quick Stats -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center">
                <span class="text-purple-600 dark:text-purple-400 text-xl">✨</span>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Daily Tips</p>
              <p class="text-2xl font-bold text-gray-900 dark:text-white" id="tips-count">0</p>
            </div>
          </div>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center">
                <span class="text-blue-600 dark:text-blue-400 text-xl">♈</span>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Horoscopes</p>
              <p class="text-2xl font-bold text-gray-900 dark:text-white" id="horoscopes-count">0</p>
            </div>
          </div>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center">
                <span class="text-green-600 dark:text-green-400 text-xl">📅</span>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Appointments</p>
              <p class="text-2xl font-bold text-gray-900 dark:text-white" id="appointments-count">0</p>
            </div>
          </div>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center">
                <span class="text-yellow-600 dark:text-yellow-400 text-xl">📝</span>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Blog Posts</p>
              <p class="text-2xl font-bold text-gray-900 dark:text-white" id="blog-count">0</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Admin Navigation -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <!-- Daily Tips Manager -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700 hover:shadow-xl transition-shadow duration-200 cursor-pointer"
             id="daily-tips-card"
             onclick="console.log('Daily Tips clicked via onclick'); showDailyTipsManager();">
          <div class="text-center">
            <div class="w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-purple-600 dark:text-purple-400 text-2xl">✨</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Daily Tips Manager</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">Create, edit, and manage daily cosmic insights</p>
          </div>
        </div>

        <!-- Horoscope Manager -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700 hover:shadow-xl transition-shadow duration-200 cursor-pointer"
             id="horoscope-card"
             onclick="console.log('Horoscope clicked via onclick'); alert('Horoscope Manager - Coming Soon!');">
          <div class="text-center">
            <div class="w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-blue-600 dark:text-blue-400 text-2xl">♈</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Horoscope Manager</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">Manage daily and weekly horoscope predictions</p>
          </div>
        </div>

        <!-- Appointment Dashboard -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700 hover:shadow-xl transition-shadow duration-200 cursor-pointer"
             id="appointment-card"
             onclick="window.location.href='/admin/appointmentdashboard';">
          <div class="text-center">
            <div class="w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-green-600 dark:text-green-400 text-2xl">📅</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Appointment Dashboard</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">View and manage all consultation bookings</p>
          </div>
        </div>

        <!-- Blog Manager -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700 hover:shadow-xl transition-shadow duration-200 cursor-pointer"
             id="blog-card">
          <div class="text-center">
            <div class="w-16 h-16 bg-yellow-100 dark:bg-yellow-900 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-yellow-600 dark:text-yellow-400 text-2xl">📝</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Blog Manager</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">Create and manage blog posts and articles</p>
          </div>
        </div>

        <!-- Image Manager -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700 hover:shadow-xl transition-shadow duration-200 cursor-pointer"
             id="image-card">
          <div class="text-center">
            <div class="w-16 h-16 bg-pink-100 dark:bg-pink-900 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-pink-600 dark:text-pink-400 text-2xl">🖼️</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Image Manager</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">Upload and organize website images</p>
          </div>
        </div>

        <!-- Analytics -->
        <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700 hover:shadow-xl transition-shadow duration-200 cursor-pointer"
             id="analytics-card">
          <div class="text-center">
            <div class="w-16 h-16 bg-indigo-100 dark:bg-indigo-900 rounded-full flex items-center justify-center mx-auto mb-4">
              <span class="text-indigo-600 dark:text-indigo-400 text-2xl">📊</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Analytics</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">View website performance and insights</p>
          </div>
        </div>
      </div>

      <!-- Recent Activity -->
      <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Recent Activity</h3>
        <div id="recent-activity" class="space-y-3">
          <div class="text-center text-gray-500 dark:text-gray-400 py-8">
            <span class="text-4xl">🌟</span>
            <p class="mt-2">Loading recent activity...</p>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Modals will be added here -->
  <div id="modal-container"></div>

     <script>
     // Load Supabase from CDN
     let supabase;
     
     // Make functions globally accessible for onclick attributes
     window.showDailyTipsManager = showDailyTipsManager;
     window.showAppointmentDashboard = showAppointmentDashboard;
     
     // Initialize Supabase client
     function initSupabase() {
       try {
         // @ts-ignore
         supabase = window.supabase.createClient(
           'https://czbypbrrxxjcjdfjxczv.supabase.co',
           'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6YnlwYnJyeHhqY2pkZmp4Y3p2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MjU2NDcsImV4cCI6MjA3MjUwMTY0N30.SQ-eabMNo5RBy8N0MHWDmlxVH7Tmh-EGykI0Qt5wDjg'
         );
         console.log('Supabase initialized successfully');
       } catch (error) {
         console.error('Error creating Supabase client:', error);
       }
     }
     
     // Simple working Supabase admin dashboard
    
         // Test function to verify clicks are working
     function testClick() {
       alert('Card clicked! This means JavaScript is working!');
       console.log('Card clicked successfully!');
     }
     
     // ===== APPOINTMENT DASHBOARD FUNCTION =====
     // This function is no longer needed since we have a dedicated /admin/appointmentdashboard page
     // async function showAppointmentDashboard() {
     //   // Removed - now using dedicated /admin/appointmentdashboard page
     // }
     
     // All manager functions are now handled by event listeners below
    
    // Real Daily Tips Manager with Supabase integration
    async function showDailyTipsManager() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer) return;
      
             modalContainer.innerHTML = `
         <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[99999]">
           <div class="bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <!-- Header -->
            <div class="flex justify-between items-center p-6 border-b border-purple-200 dark:border-purple-700">
              <div>
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">✨ Daily Tips Manager</h2>
                <p class="text-gray-600 dark:text-gray-400">Create and manage daily cosmic insights</p>
              </div>
                             <button
                 id="close-modal-btn"
                 class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 text-2xl font-bold"
               >
                 ×
               </button>
            </div>

            <!-- Content -->
            <div class="p-6">
              <!-- Create New Tip -->
              <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-6 mb-6">
                <h3 class="text-lg font-semibold text-purple-900 dark:text-purple-100 mb-4">Create New Tip</h3>
                <form id="new-tip-form" class="space-y-4">
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Title</label>
                      <input
                        type="text"
                        id="tip-title"
                        required
                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white"
                        placeholder="Enter tip title"
                      />
                    </div>
                    <div>
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Category</label>
                      <select
                        id="tip-category"
                        required
                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white"
                      >
                        <option value="">Select category</option>
                        <option value="Nakshatra">Nakshatra</option>
                        <option value="Zodiac">Zodiac</option>
                        <option value="Planets">Planets</option>
                        <option value="Elements">Elements</option>
                        <option value="Spiritual">Spiritual</option>
                        <option value="Daily">Daily</option>
                      </select>
                    </div>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Content</label>
                    <textarea
                      id="tip-content"
                      required
                      rows="4"
                      class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white"
                      placeholder="Enter the daily tip content..."
                    ></textarea>
                  </div>
                  <div class="flex items-center space-x-4">
                    <button
                      type="submit"
                      class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg font-medium transition-colors duration-200"
                    >
                      Create Tip
                    </button>
                                         <button
                       type="button"
                       id="clear-tip-btn"
                       class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg font-medium transition-colors duration-200"
                     >
                       Clear Form
                     </button>
                  </div>
                </form>
              </div>

              <!-- Existing Tips -->
              <div>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Existing Tips</h3>
                <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                  <div class="space-y-4" id="existing-tips">
                    <div class="text-center text-gray-500 dark:text-gray-400 py-8">
                      <span class="text-4xl">✨</span>
                      <p class="mt-2">Loading tips...</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;

      // Load existing tips
      await loadTipsFromSupabase();
      
             // Add event listeners for all interactive elements
       setTimeout(() => {
         // Form submission
         const form = document.getElementById('new-tip-form');
         console.log('Form element found:', form); // Debug log
                   if (form) {
            form.addEventListener('submit', function(e) {
              console.log('Form submit event triggered!'); // Debug log
              try {
                handleTipSubmit(e);
              } catch (error) {
                console.error('Error in form submit handler:', error);
                showNotification('Error submitting form: ' + error.message, 'error');
              }
            });
            console.log('Submit event listener attached to form'); // Debug log
           
                                 // Also add click listener to Create Tip button as backup
          const createBtn = form.querySelector('button[type="submit"]');
          if (createBtn) {
            createBtn.addEventListener('click', function(e) {
              console.log('Create Tip button clicked!'); // Debug log
              
              // Prevent default button behavior
              e.preventDefault();
              
              // Manually trigger form submission
              const form = this.closest('form');
              if (form) {
                console.log('Manually submitting form...'); // Debug log
                
                // Call the handler directly instead of dispatching event
                try {
                  handleTipSubmit(new Event('submit'));
                } catch (error) {
                  console.error('Error in handleTipSubmit:', error);
                }
              }
            });
          }
         } else {
           console.log('Form element NOT found!'); // Debug log
         }
         
         // Clear form button
         const clearBtn = document.getElementById('clear-tip-btn');
         if (clearBtn) {
           clearBtn.addEventListener('click', clearTipForm);
         }
         
                   // Edit and delete buttons for existing tips
          document.querySelectorAll('.edit-tip-btn').forEach(btn => {
            btn.addEventListener('click', function() {
              const tipId = this.getAttribute('data-tip-id');
              editTip(parseInt(tipId));
            });
          });
          
          document.querySelectorAll('.delete-tip-btn').forEach(btn => {
            btn.addEventListener('click', function() {
              const tipId = this.getAttribute('data-tip-id');
              deleteTip(parseInt(tipId));
            });
          });
          
          // Close modal button
          const closeBtn = document.getElementById('close-modal-btn');
          if (closeBtn) {
            closeBtn.addEventListener('click', function() {
              console.log('Close button clicked - closing modal'); // Debug log
              closeModal();
            });
          }
       }, 100);
    }
    
         let currentUser: any = null;
     let tips: any[] = [];
     let horoscopes: any[] = [];
     let appointments: any[] = [];

         // Check authentication on page load
     document.addEventListener('DOMContentLoaded', async function() {
       await initSupabase(); // Initialize Supabase first
       checkAuth();
       loadDashboardData();
       setupEventListeners();
     });
    
         // Setup event listeners for all cards
     function setupEventListeners() {
       // Daily Tips Manager
       const dailyTipsCard = document.getElementById('daily-tips-card');
       if (dailyTipsCard) {
         dailyTipsCard.addEventListener('click', function() {
           showDailyTipsManager();
           console.log('Daily Tips Manager clicked!');
         });
       }
      
      // Horoscope Manager
      const horoscopeCard = document.getElementById('horoscope-card');
      if (horoscopeCard) {
        horoscopeCard.addEventListener('click', function() {
          alert('Horoscope Manager - Coming Soon!');
          console.log('Horoscope Manager clicked!');
        });
      }
      
             // Appointment Dashboard
       const appointmentCard = document.getElementById('appointment-card');
       if (appointmentCard) {
         appointmentCard.addEventListener('click', function() {
           // Navigate directly to the appointment dashboard page instead of showing modal
           window.location.href = '/admin/appointmentdashboard';
           console.log('Navigating to Appointment Dashboard page');
         });
       }
      
      // Blog Manager
      const blogCard = document.getElementById('blog-card');
      if (blogCard) {
        blogCard.addEventListener('click', function() {
          alert('Blog Manager - Coming Soon!');
          console.log('Blog Manager clicked!');
        });
      }
      
      // Image Manager
      const imageCard = document.getElementById('image-card');
      if (imageCard) {
        imageCard.addEventListener('click', function() {
          alert('Image Manager - Coming Soon!');
          console.log('Image Manager clicked!');
        });
      }
      
      // Analytics
      const analyticsCard = document.getElementById('analytics-card');
      if (analyticsCard) {
        analyticsCard.addEventListener('click', function() {
          alert('Analytics Dashboard - Coming Soon!');
          console.log('Analytics Dashboard clicked!');
        });
      }
    }

    // Authentication check
    function checkAuth() {
      const adminEmail = localStorage.getItem('admin_email');
      if (!adminEmail) {
        showLoginModal();
      } else {
        currentUser = { email: adminEmail };
        updateUserDisplay();
      }
    }

    // Load dashboard data
    async function loadDashboardData() {
      try {
        await Promise.all([
          loadCounts(),
          loadRecentActivity()
        ]);
        showDashboard();
      } catch (error) {
        console.error('Error loading dashboard data:', error);
      }
    }
    
    // Show dashboard content
    function showDashboard() {
      const modalContainer = document.getElementById('modal-container');
      if (modalContainer) {
        modalContainer.innerHTML = '';
      }
      
      const mainContent = document.querySelector('main');
      if (mainContent) {
        mainContent.style.display = 'block';
      }
    }

    // Load dashboard counts (mock data for now)
    async function loadCounts() {
      document.getElementById('tips-count').textContent = '12';
      document.getElementById('horoscopes-count').textContent = '24';
      document.getElementById('appointments-count').textContent = '8';
      document.getElementById('blog-count').textContent = '6';
    }

    // Load recent activity (mock data for now)
    async function loadRecentActivity() {
      const container = document.getElementById('recent-activity');
      if (!container) return;
      
      container.innerHTML = `
        <div class="space-y-3">
          <div class="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <span class="text-purple-500">✨</span>
            <div class="flex-1">
              <p class="text-sm text-gray-900 dark:text-white">New daily tip created</p>
              <p class="text-xs text-gray-500 dark:text-gray-400">2 hours ago</p>
            </div>
          </div>
          <div class="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <span class="text-green-500">📅</span>
            <div class="flex-1">
              <p class="text-sm text-gray-900 dark:text-white">New appointment booked</p>
              <p class="text-xs text-gray-500 dark:text-gray-400">6 hours ago</p>
            </div>
          </div>
        </div>
      `;
    }
    
         // Daily Tips Manager Functions
     async function loadTipsFromSupabase() {
       try {
         console.log('Loading tips from Supabase...');
         
         // Load tips from Supabase
         const { data: supabaseTips, error } = await supabase
           .from('daily_tips')
           .select('*')
           .order('created_at', { ascending: false });
         
         if (error) {
           console.error('Supabase error:', error);
           // Fallback to mock data if Supabase fails
           if (tips.length === 0) {
             tips = [
               {
                 id: 1,
                 title: "Moon in Aries",
                 content: "Today's energy is perfect for new beginnings and taking bold actions.",
                 category: "Zodiac",
                 date: new Date().toISOString().split('T')[0],
                 active: true
               },
               {
                 id: 2,
                 title: "Mercury Retrograde",
                 content: "Communication may be challenging. Double-check all messages and contracts.",
                 category: "Planets",
                 date: new Date(Date.now() - 86400000).toISOString().split('T')[0],
                 active: true
               }
             ];
           }
         } else {
           console.log('Tips loaded from Supabase:', supabaseTips);
           tips = supabaseTips || [];
         }
         
         console.log('Displaying tips from array:', tips);
         displayTips(tips);
       } catch (error) {
         console.error('Error loading tips:', error);
         showNotification('Error loading tips', 'error');
       }
     }
    
    function displayTips(tips) {
      const container = document.getElementById('existing-tips');
      if (!container) return;
      
      if (!tips || tips.length === 0) {
        container.innerHTML = `
          <div class="text-center text-gray-500 dark:text-gray-400 py-8">
            <span class="text-4xl">✨</span>
            <p class="mt-2">No tips created yet</p>
          </div>
        `;
        return;
      }
      
      container.innerHTML = tips.map(tip => `
        <div class="bg-white dark:bg-slate-800 rounded-lg p-4 border border-gray-200 dark:border-gray-600">
          <div class="flex justify-between items-start mb-3">
            <div class="flex-1">
              <h4 class="font-semibold text-gray-900 dark:text-white">${tip.title}</h4>
              <p class="text-gray-600 dark:text-gray-400 mt-1">${tip.content}</p>
              <div class="flex items-center space-x-3 mt-2">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                  ${tip.category}
                </span>
                <span class="text-xs text-gray-500 dark:text-gray-400">${tip.date}</span>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                  Active
                </span>
              </div>
            </div>
            <div class="flex space-x-2">
              <button
                class="edit-tip-btn text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-medium"
                data-tip-id="${tip.id}"
              >
                Edit
              </button>
              <button
                class="delete-tip-btn text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 text-sm font-medium"
                data-tip-id="${tip.id}"
              >
                Delete
            </div>
          </div>
        </div>
      `).join('');
    }
    
         async function handleTipSubmit(e) {
       e.preventDefault();
       console.log('Form submitted!'); // Debug log
       
       const titleInput = document.getElementById('tip-title');
       const categoryInput = document.getElementById('tip-category');
       const contentInput = document.getElementById('tip-content');
       
       console.log('Inputs found:', { titleInput, categoryInput, contentInput }); // Debug log
       
       if (!titleInput || !categoryInput || !contentInput) {
         console.log('Missing inputs, returning'); // Debug log
         return;
       }
       
       const newTip = {
         id: Date.now(),
         title: titleInput.value,
         content: contentInput.value,
         category: categoryInput.value,
         date: new Date().toISOString().split('T')[0],
         active: true
       };
       
       console.log('New tip object:', newTip); // Debug log
       
               try {
          console.log('Creating new tip:', newTip);
          
          // Save tip to Supabase
          const { data: savedTip, error } = await supabase
            .from('daily_tips')
            .insert([{
              title: newTip.title,
              content: newTip.content,
              category: newTip.category,
              date: newTip.date,
              active: newTip.active
            }])
            .select()
            .single();
          
          if (error) {
            console.error('Supabase insert error:', error);
            showNotification('Error saving tip to database: ' + error.message, 'error');
            return;
          }
          
          console.log('Tip saved to Supabase:', savedTip);
          
          // Add the new tip to our tips array
          tips.unshift(savedTip); // Add to beginning of array
          console.log('Tip added to array, total tips:', tips.length);
          
          console.log('Showing success notification...'); // Debug log
          showNotification('Tip created and saved successfully!', 'success');
          
          console.log('Reloading tips...'); // Debug log
          // Reload tips to show the new one
          await loadTipsFromSupabase();
          
          console.log('Clearing form...'); // Debug log
          // Clear form
          clearTipForm();
          
          console.log('Tip creation completed successfully!'); // Debug log
          
          // Debug: Check if modal is still visible
          const modalContainer = document.getElementById('modal-container');
          if (modalContainer) {
            console.log('Modal container still exists:', modalContainer.innerHTML.length > 0 ? 'Modal is OPEN' : 'Modal is CLOSED');
            console.log('Modal HTML length:', modalContainer.innerHTML.length);
            console.log('Modal HTML preview:', modalContainer.innerHTML.substring(0, 200) + '...');
          }
          
          // Test: Try to make modal more visible
          console.log('Making modal more visible...');
          const modalOverlay = document.querySelector('.fixed.inset-0.bg-black.bg-opacity-50');
          if (modalOverlay) {
            (modalOverlay as HTMLElement).style.zIndex = '9998';
            console.log('Modal overlay z-index set to 9998');
          }
          
          // Test: Check if modal content is actually visible
          const modalContent = document.querySelector('.bg-white.dark\\:bg-slate-800.rounded-xl.shadow-2xl');
          if (modalContent) {
            console.log('Modal content found:', modalContent);
            console.log('Modal content visible:', (modalContent as HTMLElement).style.display !== 'none');
          } else {
            console.log('Modal content NOT found!');
          }
        } catch (error) {
          console.error('Error creating tip:', error);
          showNotification('Error creating tip', 'error');
        }
     }
    
    function clearTipForm() {
      const titleInput = document.getElementById('tip-title');
      const categoryInput = document.getElementById('tip-category');
      const contentInput = document.getElementById('tip-content');
      
      if (titleInput) titleInput.value = '';
      if (categoryInput) categoryInput.value = '';
      if (contentInput) contentInput.value = '';
    }
    
    function editTip(id) {
      showNotification('Edit functionality coming soon!', 'info');
    }
    
                   async function deleteTip(id) {
        if (confirm('Are you sure you want to delete this tip?')) {
          try {
            console.log('Deleting tip from Supabase:', id);
            
            // Delete from Supabase database
            const { error } = await supabase
              .from('daily_tips')
              .delete()
              .eq('id', id);
            
            if (error) {
              console.error('Supabase delete error:', error);
              showNotification('Error deleting tip from database: ' + error.message, 'error');
              return;
            }
            
            console.log('Tip deleted from Supabase successfully');
            
            // Remove tip from local array
            tips = tips.filter(tip => tip.id !== id);
            console.log('Tip deleted from local array, remaining tips:', tips.length);
            
            showNotification('Tip deleted successfully!', 'success');
            
            // Reload tips to reflect the deletion
            await loadTipsFromSupabase();
          } catch (error) {
            console.error('Error deleting tip:', error);
            showNotification('Error deleting tip', 'error');
          }
        }
      }

    // Show login modal
    function showLoginModal() {
      const modal = document.getElementById('modal-container');
      if (!modal) return;
      
      modal.innerHTML = `
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div class="bg-white dark:bg-slate-800 rounded-xl p-8 max-w-md w-full mx-4">
            <div class="text-center mb-6">
              <span class="text-4xl">🌟</span>
              <h2 class="text-2xl font-bold text-gray-900 dark:text-white mt-2">Admin Login</h2>
              <p class="text-gray-600 dark:text-gray-400">Access JyotirSetu Admin Panel</p>
            </div>
            <form id="login-form" class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email</label>
                <input type="email" id="login-email" required class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Password</label>
                <input type="password" id="login-password" required class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white">
              </div>
              <button type="submit" id="login-submit-btn" class="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-medium transition-colors duration-200">
                Login
              </button>
            </form>
            <div class="mt-4 text-center">
              <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                Cancel
              </button>
            </div>
          </div>
        </div>
      `;

      // Handle login form
      const loginForm = document.getElementById('login-form');
      if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const emailInput = document.getElementById('login-email');
          const passwordInput = document.getElementById('login-password');
          
          if (!emailInput || !passwordInput) return;
          
          const email = emailInput.value;
          const password = passwordInput.value;
          
          // Simple authentication
          if (email === 'admin@jyotirsetu.com' && password === 'admin123') {
            localStorage.setItem('admin_email', email);
            currentUser = { email };
            closeModal();
            updateUserDisplay();
            loadDashboardData();
          } else {
            alert('Invalid credentials. Use admin@jyotirsetu.com / admin123');
          }
        });
      }
    }

    // Close modal
    function closeModal() {
      console.log('closeModal() called - this will close the modal'); // Debug log
      const modal = document.getElementById('modal-container');
      if (modal) {
        modal.innerHTML = '';
        console.log('Modal closed'); // Debug log
      }
    }

    // Update user display
    function updateUserDisplay() {
      const userSpan = document.querySelector('span:contains("Welcome, Admin")');
      if (userSpan && currentUser) {
        userSpan.textContent = `Welcome, ${currentUser.email}`;
      }
    }

         // All manager functions are now handled by event listeners above

         // Show notification function (single implementation)

    // Show notification function
    function showNotification(message, type) {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white font-medium z-[999999] ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 
        type === 'info' ? 'bg-blue-500' : 'bg-gray-500'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
    
         // Logout function
     document.getElementById('logout-btn').addEventListener('click', function() {
       localStorage.removeItem('admin_email');
       currentUser = null;
       showLoginModal();
     });

     // ===== APPOINTMENT DASHBOARD FUNCTIONS =====
     
     // Load appointments from Supabase
     async function loadAppointmentsFromSupabase() {
       try {
         console.log('Loading appointments from Supabase...');
         
         const { data: supabaseAppointments, error } = await supabase
           .from('appointments')
           .select('*')
           .order('created_at', { ascending: false });
         
         if (error) {
           console.error('Supabase error:', error);
           showNotification('Error loading appointments: ' + error.message, 'error');
           return;
         }
         
         console.log('Appointments loaded from Supabase:', supabaseAppointments);
         appointments = supabaseAppointments || [];
         displayAppointments(appointments);
         
       } catch (error) {
         console.error('Error loading appointments:', error);
         showNotification('Error loading appointments', 'error');
       }
     }
     
     // Display appointments in table
     function displayAppointments(appointmentsList) {
       const tbody = document.getElementById('appointments-tbody');
       if (!tbody) return;
       
       if (!appointmentsList || appointmentsList.length === 0) {
         tbody.innerHTML = `
           <tr>
             <td colspan="6" class="px-6 py-12 text-center text-gray-500 dark:text-gray-400">
               <span class="text-4xl">📅</span>
               <p class="mt-2">No appointments found</p>
             </td>
           </tr>
         `;
         return;
       }
       
       tbody.innerHTML = appointmentsList.map(appointment => `
         <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
           <td class="px-6 py-4 whitespace-nowrap">
             <div>
               <div class="text-sm font-medium text-gray-900 dark:text-white">${appointment.name}</div>
               <div class="text-sm text-gray-500 dark:text-gray-400">${appointment.email}</div>
               <div class="text-sm text-gray-500 dark:text-gray-400">${appointment.phone}</div>
               <div class="text-xs text-gray-400 mt-1">${appointment.consultation_method || 'Not specified'}</div>
             </div>
           </td>
           <td class="px-6 py-4 whitespace-nowrap">
             <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
               ${getServiceDisplayName(appointment.service)}
             </span>
           </td>
           <td class="px-6 py-4 whitespace-nowrap">
             <div class="text-sm text-gray-900 dark:text-white">${formatDate(appointment.date)}</div>
             <div class="text-sm text-gray-500 dark:text-gray-400">${appointment.time}</div>
           </td>
           <td class="px-6 py-4 whitespace-nowrap">
             <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}">
               ${appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}
             </span>
           </td>
           <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
             <div class="flex space-x-2">
               <button
                 class="change-status-btn text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                 data-appointment-id="${appointment.id}"
                 data-current-status="${appointment.status}"
               >
                 Change Status
               </button>
               <button
                 class="view-details-btn text-green-600 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300"
                 data-appointment-id="${appointment.id}"
               >
                 View Details
               </button>
             </div>
           </td>
         </tr>
       `).join('');
       
       // Add event listeners for view details buttons
       addViewDetailsListeners();
       
       // Add event listeners for change status buttons
       addChangeStatusListeners();
     }
     
     // Get service display name
     function getServiceDisplayName(service) {
       const serviceNames = {
         'astrology': '🔮 Astrology',
         'gemstone': '💎 Gemstone',
         'palmistry': '✋ Palmistry',
         'numerology': '🔢 Numerology',
         'career-finance': '💼 Career & Finance',
         'matchmaking': '💕 Matchmaking',
         'study-education': '📚 Study/Education',
         'corporate': '🏢 Corporate',
         'other': '✨ Other'
       };
       return serviceNames[service] || service;
     }
     
     // Get status color class
     function getStatusColor(status) {
       switch (status) {
         case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
         case 'confirmed': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
         case 'cancelled': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
         case 'completed': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
         default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
       }
     }
     
     // Add appointment event listeners
     function addAppointmentEventListeners() {
       // Close button
       const closeBtn = document.getElementById('close-appointment-modal-btn');
       if (closeBtn) {
         closeBtn.addEventListener('click', closeModal);
       }
       
       // Apply filters button
       const applyFiltersBtn = document.getElementById('apply-filters-btn');
       if (applyFiltersBtn) {
         applyFiltersBtn.addEventListener('click', applyAppointmentFilters);
       }
       
       // Status filter change
       const statusFilter = document.getElementById('status-filter');
       if (statusFilter) {
         statusFilter.addEventListener('change', applyAppointmentFilters);
       }
     }
     
     // Add view details listeners
     function addViewDetailsListeners() {
       document.querySelectorAll('.view-details-btn').forEach(btn => {
         btn.addEventListener('click', function() {
           const appointmentId = this.getAttribute('data-appointment-id');
           showAppointmentDetails(appointmentId);
         });
       });
     }
     
     // Show appointment details modal
     function showAppointmentDetails(appointmentId) {
       const appointment = appointments.find(apt => apt.id == appointmentId);
       if (!appointment) return;
       
       const modalContainer = document.getElementById('modal-container');
       modalContainer.innerHTML = `
         <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[99999]">
           <div class="bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
             <!-- Header -->
             <div class="flex justify-between items-center p-6 border-b border-purple-200 dark:border-purple-700">
               <div>
                 <h2 class="text-2xl font-bold text-gray-900 dark:text-white">📋 Appointment Details</h2>
                 <p class="text-gray-600 dark:text-gray-400">Complete information for ${appointment.name}</p>
               </div>
               <button
                 id="close-details-modal-btn"
                 class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 text-2xl font-bold"
               >
                 ×
               </button>
             </div>
             
             <!-- Content -->
             <div class="p-6 space-y-6">
               <!-- Basic Information -->
               <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                 <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">👤 Basic Information</h3>
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                   <div>
                     <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Name</label>
                     <p class="text-gray-900 dark:text-white">${appointment.name}</p>
                   </div>
                   <div>
                     <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Email</label>
                     <p class="text-gray-900 dark:text-white">${appointment.email}</p>
                   </div>
                   <div>
                     <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Phone</label>
                     <p class="text-gray-900 dark:text-white">${appointment.phone}</p>
                   </div>
                   <div>
                     <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Consultation Method</label>
                     <p class="text-gray-900 dark:text-white">${appointment.consultation_method || 'Not specified'}</p>
                   </div>
                 </div>
               </div>
               
               <!-- Service Information -->
               <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                 <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">🎯 Service Details</h3>
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                   <div>
                     <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Service Type</label>
                     <p class="text-gray-900 dark:text-white">${getServiceDisplayName(appointment.service)}</p>
                   </div>
                   <div>
                     <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Appointment Date</label>
                     <p class="text-gray-900 dark:text-white">${formatDate(appointment.date)}</p>
                   </div>
                   <div>
                     <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Appointment Time</label>
                     <p class="text-gray-900 dark:text-white">${appointment.time}</p>
                   </div>
                   <div>
                     <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Status</label>
                     <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}">
                       ${appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}
                     </span>
                   </div>
                 </div>
               </div>
               
               <!-- Service-Specific Details -->
               ${appointment.service_details && Object.keys(appointment.service_details).length > 0 ? `
                 <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                   <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">🔍 Service-Specific Information</h3>
                   <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                     ${Object.entries(appointment.service_details).map(([key, value]) => `
                       <div>
                         <label class="text-sm font-medium text-gray-600 dark:text-gray-400">${key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</label>
                         <p class="text-gray-900 dark:text-white">${value}</p>
                       </div>
                     `).join('')}
                   </div>
                 </div>
               ` : ''}
               
               <!-- Message/Query -->
               ${appointment.message ? `
                 <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                   <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">💬 Message/Query</h3>
                   <p class="text-gray-900 dark:text-white">${appointment.message}</p>
                 </div>
               ` : ''}
             </div>
           </div>
         </div>
       `;
       
       // Add close button listener
       const closeBtn = document.getElementById('close-details-modal-btn');
       if (closeBtn) {
         closeBtn.addEventListener('click', closeModal);
       }
     }
     
     // Apply appointment filters
     function applyAppointmentFilters() {
       const statusFilter = document.getElementById('status-filter');
       const dateFromFilter = document.getElementById('date-from-filter');
       const dateToFilter = document.getElementById('date-to-filter');
       
       if (!statusFilter || !dateFromFilter || !dateToFilter) return;
       
       let filteredAppointments = [...appointments];
       
       // Filter by status
       if (statusFilter.value) {
         filteredAppointments = filteredAppointments.filter(apt => apt.status === statusFilter.value);
       }
       
       // Filter by date range
       if (dateFromFilter.value) {
         filteredAppointments = filteredAppointments.filter(apt => apt.date >= dateFromFilter.value);
       }
       
       if (dateToFilter.value) {
         filteredAppointments = filteredAppointments.filter(apt => apt.date <= dateToFilter.value);
       }
       
       displayAppointments(filteredAppointments);
     }
     
     // Format date for display
     function formatDate(dateString) {
       const date = new Date(dateString);
       return date.toLocaleDateString('en-US', { 
         year: 'numeric', 
         month: 'short', 
         day: 'numeric' 
       });
     }

     // Add event listeners for change status buttons
     function addChangeStatusListeners() {
       document.querySelectorAll('.change-status-btn').forEach(btn => {
         btn.addEventListener('click', function() {
           const appointmentId = this.getAttribute('data-appointment-id');
           const currentStatus = this.getAttribute('data-current-status');
           showChangeStatusModal(appointmentId, currentStatus);
         });
       });
     }

     // Show change status modal
     async function showChangeStatusModal(appointmentId, currentStatus) {
       const modalContainer = document.getElementById('modal-container');
       if (!modalContainer) return;

       modalContainer.innerHTML = `
         <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[99999]">
           <div class="bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
             <!-- Header -->
             <div class="flex justify-between items-center p-6 border-b border-purple-200 dark:border-purple-700">
               <div>
                 <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Change Status for Appointment</h2>
                 <p class="text-gray-600 dark:text-gray-400">Current Status: ${currentStatus.charAt(0).toUpperCase() + currentStatus.slice(1)}</p>
               </div>
               <button
                 id="close-status-modal-btn"
                 class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 text-2xl font-bold"
               >
                 ×
               </button>
             </div>
             
             <!-- Content -->
             <div class="p-6 space-y-4">
               <div>
                 <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">New Status</label>
                 <select id="new-status-select" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white">
                   <option value="pending">Pending</option>
                   <option value="confirmed">Confirmed</option>
                   <option value="cancelled">Cancelled</option>
                   <option value="completed">Completed</option>
                 </select>
               </div>
               <button id="confirm-status-change-btn" class="w-full bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200">
                 Confirm Status Change
               </button>
             </div>
           </div>
         </div>
       `;

       // Add event listeners for the new modal
       const closeBtn = document.getElementById('close-status-modal-btn');
       if (closeBtn) {
         closeBtn.addEventListener('click', closeModal);
       }

       const confirmBtn = document.getElementById('confirm-status-change-btn');
       if (confirmBtn) {
         confirmBtn.addEventListener('click', async function() {
           const newStatusSelect = document.getElementById('new-status-select') as HTMLSelectElement;
           if (!newStatusSelect) {
             showNotification('Status select element not found.', 'error');
             return;
           }
           
           const newStatus = newStatusSelect.value;
           if (!newStatus) {
             showNotification('Please select a new status.', 'info');
             return;
           }

           try {
             console.log('Changing status for appointment:', appointmentId, 'from', currentStatus, 'to', newStatus);
             const { error } = await supabase
               .from('appointments')
               .update({ status: newStatus })
               .eq('id', appointmentId);

             if (error) {
               console.error('Supabase status update error:', error);
               showNotification('Error updating status: ' + error.message, 'error');
               return;
             }

             console.log('Status updated successfully in Supabase');
             showNotification('Status updated successfully!', 'success');
             await loadAppointmentsFromSupabase(); // Reload appointments to show updated status
             closeModal();
           } catch (error) {
             console.error('Error changing status:', error);
             showNotification('Error changing status', 'error');
           }
         });
       }
     }
   </script>
</Layout>
