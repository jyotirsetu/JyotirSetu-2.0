---
import Layout from '~/layouts/AdminLayout.astro';

// This will be a client-side rendered page for dynamic content
---

<Layout metadata={{
  title: "Admin Dashboard - JyotirSetu",
  description: "Manage JyotirSetu website content, appointments, and daily tips"
}}>

<!-- Load Supabase from CDN -->
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-purple-900 dark:to-gray-900">
    
    <!-- Login Page (shown by default) -->
    <div id="login-page" class="min-h-screen flex">
      <!-- Left side with large logo and branding -->
      <div class="hidden lg:flex lg:w-1/2 bg-gradient-to-br from-purple-600 via-indigo-700 to-purple-800 items-center justify-center">
        <div class="text-center max-w-md">
          <img 
            src="/JyotirSetu Full Logo Transparent.png" 
            alt="JyotirSetu Logo" 
            class="h-58 mx-auto mb-10"
            onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
          />
          <div class="hidden text-8xl mb-8">üåü</div>
          <h1 class="text-4xl font-bold text-white mb-4">JyotirSetu Astrology</h1>
          <p class="text-xl text-purple-100 mb-2">Bridge to Cosmic Light</p>
          <p class="text-purple-200">Manage your cosmic insights and consultations</p>
        </div>
      </div>
      
      <!-- Right side with login form -->
      <div class="w-full lg:w-1/2 flex items-center justify-center bg-white dark:bg-slate-900">
        <div class="w-full max-w-md px-8">
          <div class="text-center mb-8">
            <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Welcome</h2>
            <p class="text-gray-600 dark:text-gray-400 text-lg">PLEASE LOGIN TO ADMIN DASHBOARD</p>
          </div>
          
          <form id="login-form" class="space-y-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 uppercase tracking-wide">USERNAME</label>
              <input 
                type="text" 
                id="login-username" 
                required 
                class="w-full px-4 py-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white transition-colors text-lg"
                placeholder="Enter your username"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 uppercase tracking-wide">PASSWORD</label>
              <input 
                type="password" 
                id="login-password" 
                required 
                class="w-full px-4 py-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white transition-colors text-lg"
                placeholder="Enter your password"
              />
            </div>
            <button 
              type="submit" 
              id="login-submit-btn"
              onclick="handleLoginSubmit(event)"
              class="w-full bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white py-4 px-6 rounded-lg font-medium text-lg transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
            >
              <span id="login-btn-text">LOGIN</span>
              <span id="login-btn-loading" class="hidden">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                SIGNING IN...
              </span>
            </button>
            
            <!-- Debug Test Button -->
            <button 
              type="button" 
              onclick="testLogin()"
              class="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg font-medium text-sm transition-colors duration-200 mt-2"
            >
              üß™ Debug Login Tool (Debug)
            </button>
          </form>
          
          <div class="mt-8 text-center">
            <p class="text-sm text-gray-500 dark:text-gray-400">
              FORGOTTEN YOUR PASSWORD?
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Admin Dashboard (hidden by default) -->
    <div id="admin-dashboard" class="hidden min-h-screen">
      <!-- Clean Admin Header -->
      <header class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm border-b border-purple-100 dark:border-purple-800 sticky top-0 z-40">
        <div class="max-w-7xl mx-auto px-6 py-4">
          <div class="flex justify-between items-center">
            <div class="flex items-center space-x-4">
              <div class="flex items-center space-x-3">
                <div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-xl flex items-center justify-center">
                  <span class="text-white text-xl">üåü</span>
                </div>
                <div>
                  <h1 class="text-xl font-bold text-gray-900 dark:text-white">
                    JyotirSetu Admin
                  </h1>
                  <p class="text-sm text-gray-500 dark:text-gray-400">Cosmic Management Portal</p>
                </div>
              </div>
            </div>
            <div class="flex items-center space-x-3">
              <span class="text-sm text-gray-600 dark:text-gray-400 px-3 py-1 bg-gray-100 dark:bg-gray-700 rounded-full" id="admin-welcome">
                Welcome, Admin
              </span>
              <button
                id="change-password-btn"
                class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
              >
                üîê Change Password
              </button>
              <button
                id="logout-btn"
                class="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md"
              >
                üö™ Logout
              </button>
            </div>
          </div>
        </div>
      </header>

      <!-- Main Admin Content -->
      <main class="max-w-7xl mx-auto px-6 py-8">
        <!-- Quick Stats -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-purple-100 dark:border-purple-800 hover:shadow-xl transition-all duration-300">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-12 h-12 bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900 dark:to-purple-800 rounded-xl flex items-center justify-center">
                  <span class="text-purple-600 dark:text-purple-400 text-xl">‚ú®</span>
                </div>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Daily Tips</p>
                <p class="text-2xl font-bold text-gray-900 dark:text-white" id="tips-count">0</p>
              </div>
            </div>
          </div>

          <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-blue-100 dark:border-blue-800 hover:shadow-xl transition-all duration-300">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-12 h-12 bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800 rounded-xl flex items-center justify-center">
                  <span class="text-blue-600 dark:text-blue-400 text-xl">‚ôà</span>
                </div>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Horoscopes</p>
                <p class="text-2xl font-bold text-gray-900 dark:text-white" id="horoscopes-count">0</p>
              </div>
            </div>
          </div>

          <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-green-100 dark:border-green-800 hover:shadow-xl transition-all duration-300">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-12 h-12 bg-gradient-to-br from-green-100 to-green-200 dark:from-green-900 dark:to-green-800 rounded-xl flex items-center justify-center">
                  <span class="text-green-600 dark:text-green-400 text-xl">üìÖ</span>
                </div>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Appointments</p>
                <p class="text-2xl font-bold text-gray-900 dark:text-white" id="appointments-count">0</p>
              </div>
            </div>
          </div>

          <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-yellow-100 dark:border-yellow-800 hover:shadow-xl transition-all duration-300">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-12 h-12 bg-gradient-to-br from-yellow-100 to-yellow-200 dark:from-yellow-900 dark:to-yellow-800 rounded-xl flex items-center justify-center">
                  <span class="text-yellow-600 dark:text-yellow-400 text-xl">üìù</span>
                </div>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Blog Posts</p>
                <p class="text-2xl font-bold text-gray-900 dark:text-white" id="blog-count">0</p>
              </div>
            </div>
          </div>
      </div>

      <!-- Admin Navigation -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <!-- Daily Tips Manager -->
        <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-purple-100 dark:border-purple-800 hover:shadow-xl hover:scale-105 transition-all duration-300 cursor-pointer group"
             id="daily-tips-card"
             onclick="console.log('Daily Tips clicked via onclick'); window.location.href='/admin/dailytips';">
          <div class="text-center">
            <div class="w-16 h-16 bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900 dark:to-purple-800 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
              <span class="text-purple-600 dark:text-purple-400 text-2xl">‚ú®</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Daily Tips Manager</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">Create, edit, and manage daily cosmic insights</p>
          </div>
        </div>

        <!-- Horoscope Manager -->
        <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-blue-100 dark:border-blue-800 hover:shadow-xl hover:scale-105 transition-all duration-300 cursor-pointer group"
             id="horoscope-card"
             onclick="console.log('Horoscope clicked via onclick'); alert('Horoscope Manager - Coming Soon!');">
          <div class="text-center">
            <div class="w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
              <span class="text-blue-600 dark:text-blue-400 text-2xl">‚ôà</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Horoscope Manager</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">Manage daily and weekly horoscope predictions</p>
          </div>
        </div>

        <!-- Appointment Dashboard -->
        <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-green-100 dark:border-green-800 hover:shadow-xl hover:scale-105 transition-all duration-300 cursor-pointer group"
             id="appointment-card"
             onclick="window.location.href='/admin/appointmentdashboard';">
          <div class="text-center">
            <div class="w-16 h-16 bg-gradient-to-br from-green-100 to-green-200 dark:from-green-900 dark:to-green-800 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
              <span class="text-green-600 dark:text-green-400 text-2xl">üìÖ</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Appointment Dashboard</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">View and manage all consultation bookings</p>
          </div>
        </div>

        <!-- Blog Manager -->
        <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-yellow-100 dark:border-yellow-800 hover:shadow-xl hover:scale-105 transition-all duration-300 cursor-pointer group"
             id="blog-card">
          <div class="text-center">
            <div class="w-16 h-16 bg-gradient-to-br from-yellow-100 to-yellow-200 dark:from-yellow-900 dark:to-yellow-800 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
              <span class="text-yellow-600 dark:text-yellow-400 text-2xl">üìù</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Blog Manager</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">Create and manage blog posts and articles</p>
          </div>
        </div>

                            <!-- Email Marketing -->
                    <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-pink-100 dark:border-pink-800 hover:shadow-xl hover:scale-105 transition-all duration-300 cursor-pointer group"
                         id="email-marketing-card"
                         onclick="window.location.href='/admin/emailmarketing';">
                      <div class="text-center">
                        <div class="w-16 h-16 bg-gradient-to-br from-pink-100 to-pink-200 dark:from-pink-900 dark:to-pink-800 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
                          <span class="text-pink-600 dark:text-pink-400 text-2xl">üìß</span>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Email Marketing</h3>
                        <p class="text-gray-600 dark:text-gray-400 text-sm">Manage campaigns and subscribers</p>
                      </div>
                    </div>

                    <!-- Image Manager -->
                    <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-indigo-100 dark:border-indigo-800 hover:shadow-xl hover:scale-105 transition-all duration-300 cursor-pointer group"
                         id="image-card">
                      <div class="text-center">
                        <div class="w-16 h-16 bg-gradient-to-br from-indigo-100 to-indigo-200 dark:from-indigo-900 dark:to-indigo-800 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
                          <span class="text-indigo-600 dark:text-indigo-400 text-2xl">üñºÔ∏è</span>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Image Manager</h3>
                        <p class="text-gray-600 dark:text-gray-400 text-sm">Upload and organize website images</p>
                      </div>
                    </div>

        <!-- Analytics -->
        <div class="bg-white/70 dark:bg-slate-800/70 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-teal-100 dark:border-teal-800 hover:shadow-xl hover:scale-105 transition-all duration-300 cursor-pointer group"
             id="analytics-card">
          <div class="text-center">
            <div class="w-16 h-16 bg-gradient-to-br from-teal-100 to-teal-200 dark:from-teal-900 dark:to-teal-800 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
              <span class="text-teal-600 dark:text-teal-400 text-2xl">üìä</span>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Analytics</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">View website performance and insights</p>
          </div>
        </div>
      </div>

      <!-- Recent Activity -->
      <div class="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6 border border-purple-200 dark:border-purple-700">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Recent Activity</h3>
        <div id="recent-activity" class="space-y-3">
          <div class="text-center text-gray-500 dark:text-gray-400 py-8">
            <span class="text-4xl">üåü</span>
            <p class="mt-2">Loading recent activity...</p>
          </div>
        </div>
      </div>
      </main>
    </div>

    <!-- Modals will be added here -->
    <div id="modal-container"></div>
  </div>

     <script>
     // Load Supabase from CDN
           let supabase = null; // Initialize as null, will be set in initSupabase()
     
     // Make functions globally accessible for onclick attributes
     declare global {
       interface Window {
         testLogin: typeof testLogin;
         handleLoginSubmit: typeof handleLoginSubmit;
       }
     }
     
     window.testLogin = testLogin;
     window.handleLoginSubmit = handleLoginSubmit;
    window.togglePasswordVisibility = togglePasswordVisibility;
    window.closeModal = closeModal;
    window.getStoredPassword = getStoredPassword;
    window.updateStoredPassword = updateStoredPassword;
    window.validateCurrentPassword = validateCurrentPassword;
    window.validateNewPassword = validateNewPassword;
    window.validatePasswordMatch = validatePasswordMatch;
    window.checkAllValidations = checkAllValidations;
     
     // Initialize Supabase client
     function initSupabase() {
       try {
         // @ts-ignore
         supabase = window.supabase.createClient(
           'https://czbypbrrxxjcjdfjxczv.supabase.co',
           'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6YnlwYnJyeHhqY2pkZmp4Y3p2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MjU2NDcsImV4cCI6MjA3MjUwMTY0N30.SQ-eabMNo5RBy8N0MHWDmlxVH7Tmh-EGykI0Qt5wDjg'
         );
         console.log('Supabase initialized successfully');
       } catch (error) {
         console.error('Error creating Supabase client:', error);
       }
     }
     
     // Simple working Supabase admin dashboard
    
         // Test function to verify clicks are working
     function testClick() {
       alert('Card clicked! This means JavaScript is working!');
       console.log('Card clicked successfully!');
     }
     
     // ===== APPOINTMENT DASHBOARD FUNCTIONS =====
     // These functions are no longer needed since we have a dedicated /admin/appointmentdashboard page
     // async function showAppointmentDashboard() {
     //   // Removed - now using dedicated /admin/appointmentdashboard page
     // }
     
     // All manager functions are now handled by event listeners below
    
    // Real Daily Tips Manager with Supabase integration
    async function showDailyTipsManager() {
      const modalContainer = document.getElementById('modal-container');
      if (!modalContainer) return;
      
             modalContainer.innerHTML = `
         <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[99999]">
           <div class="bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <!-- Header -->
            <div class="flex justify-between items-center p-6 border-b border-purple-200 dark:border-purple-700">
              <div>
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">‚ú® Daily Tips Manager</h2>
                <p class="text-gray-600 dark:text-gray-400">Create and manage daily cosmic insights</p>
              </div>
                             <button
                 id="close-modal-btn"
                 class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 text-2xl font-bold"
               >
                 √ó
               </button>
            </div>

            <!-- Content -->
            <div class="p-6">
              <!-- Create New Tip -->
              <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-6 mb-6">
                <h3 class="text-lg font-semibold text-purple-900 dark:text-purple-100 mb-4">Create New Tip</h3>
                <form id="new-tip-form" class="space-y-4">
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Title</label>
                      <input
                        type="text"
                        id="tip-title"
                        required
                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white"
                        placeholder="Enter tip title"
                      />
                    </div>
                    <div>
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Category</label>
                      <select
                        id="tip-category"
                        required
                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white"
                      >
                        <option value="">Select category</option>
                        <option value="Nakshatra">Nakshatra</option>
                        <option value="Zodiac">Zodiac</option>
                        <option value="Planets">Planets</option>
                        <option value="Elements">Elements</option>
                        <option value="Spiritual">Spiritual</option>
                        <option value="Daily">Daily</option>
                      </select>
                    </div>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Content</label>
                    <textarea
                      id="tip-content"
                      required
                      rows="4"
                      class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white"
                      placeholder="Enter the daily tip content..."
                    ></textarea>
                  </div>
                  <div class="flex items-center space-x-4">
                    <button
                      type="submit"
                      class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg font-medium transition-colors duration-200"
                    >
                      Create Tip
                    </button>
                                         <button
                       type="button"
                       id="clear-tip-btn"
                       class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg font-medium transition-colors duration-200"
                     >
                       Clear Form
                     </button>
                  </div>
                </form>
              </div>

              <!-- Existing Tips -->
              <div>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Existing Tips</h3>
                <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                  <div class="space-y-4" id="existing-tips">
                    <div class="text-center text-gray-500 dark:text-gray-400 py-8">
                      <span class="text-4xl">‚ú®</span>
                      <p class="mt-2">Loading tips...</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;

      // Load existing tips
      await loadTipsFromSupabase();
      
             // Add event listeners for all interactive elements
       setTimeout(() => {
         // Form submission
         const form = document.getElementById('new-tip-form');
         console.log('Form element found:', form); // Debug log
                   if (form) {
            form.addEventListener('submit', function(e) {
              console.log('Form submit event triggered!'); // Debug log
              try {
                handleTipSubmit(e);
              } catch (error) {
                console.error('Error in form submit handler:', error);
                showNotification('Error submitting form: ' + error.message, 'error');
              }
            });
            console.log('Submit event listener attached to form'); // Debug log
           
                                 // Also add click listener to Create Tip button as backup
          const createBtn = form.querySelector('button[type="submit"]');
          if (createBtn) {
            createBtn.addEventListener('click', function(e) {
              console.log('Create Tip button clicked!'); // Debug log
              
              // Prevent default button behavior
              e.preventDefault();
              
              // Manually trigger form submission
              const form = this.closest('form');
              if (form) {
                console.log('Manually submitting form...'); // Debug log
                
                // Call the handler directly instead of dispatching event
                try {
                  handleTipSubmit(new Event('submit'));
                } catch (error) {
                  console.error('Error in handleTipSubmit:', error);
                }
              }
            });
          }
         } else {
           console.log('Form element NOT found!'); // Debug log
         }
         
         // Clear form button
         const clearBtn = document.getElementById('clear-tip-btn');
         if (clearBtn) {
           clearBtn.addEventListener('click', clearTipForm);
         }
         
                   // Edit and delete buttons for existing tips
          document.querySelectorAll('.edit-tip-btn').forEach(btn => {
            btn.addEventListener('click', function() {
              const tipId = this.getAttribute('data-tip-id');
              editTip(parseInt(tipId));
            });
          });
          
          document.querySelectorAll('.delete-tip-btn').forEach(btn => {
            btn.addEventListener('click', function() {
              const tipId = this.getAttribute('data-tip-id');
              deleteTip(parseInt(tipId));
            });
          });
          
          // Close modal button
          const closeBtn = document.getElementById('close-modal-btn');
          if (closeBtn) {
            closeBtn.addEventListener('click', function() {
              console.log('Close button clicked - closing modal'); // Debug log
              closeModal();
            });
          }
          
          // Setup escape key functionality
          setupModalEscapeKey();
       }, 100);
    }
    
         let currentUser: any = null;
     let tips: any[] = [];
     let horoscopes: any[] = [];
     let appointments: any[] = [];

             // Initialize password system
    function initializePasswordSystem() {
      // Check if password is already set, if not set default
      const storedPassword = localStorage.getItem('admin_password');
      if (!storedPassword) {
        console.log('No password found, setting default password');
        localStorage.setItem('admin_password', 'JyotirSetu2024!');
        console.log('Default password set: JyotirSetu2024!');
      } else {
        console.log('Password system initialized with existing password');
      }
    }

    // Get current stored password
    function getStoredPassword() {
      return localStorage.getItem('admin_password') || 'JyotirSetu2024!';
    }

    // Update stored password
    function updateStoredPassword(newPassword) {
      localStorage.setItem('admin_password', newPassword);
      console.log('Password updated successfully');
    }

    // Check authentication on page load
    document.addEventListener('DOMContentLoaded', async function() {
      console.log('DOM Content Loaded - Initializing admin panel');
      
      try {
        initializePasswordSystem(); // Initialize password system first
        console.log('Password system initialized');
        
        await initSupabase(); // Initialize Supabase first
        console.log('Supabase initialized successfully');
        
        setupLoginForm(); // Setup login form handler
        console.log('Login form setup complete');
        
        setupLogoutButton(); // Setup logout button handler
        console.log('Logout button setup complete');
        
        setupChangePasswordButton(); // Setup change password button handler
        console.log('Change password button setup complete');
        
        checkAuth(); // Check if user is already logged in
        console.log('Auth check complete');
        
        setupEventListeners();
        console.log('Event listeners setup complete');
        
        console.log('Admin panel initialization complete!');
      } catch (error) {
        console.error('Error during admin panel initialization:', error);
      }
    });
    
         // Setup event listeners for all cards
     function setupEventListeners() {
             // Daily Tips Manager
      const dailyTipsCard = document.getElementById('daily-tips-card');
      if (dailyTipsCard) {
        dailyTipsCard.addEventListener('click', function() {
          // Navigate directly to the daily tips page instead of showing modal
          window.location.href = '/admin/dailytips';
          console.log('Navigating to Daily Tips Manager page');
        });
      }
      
      // Horoscope Manager
      const horoscopeCard = document.getElementById('horoscope-card');
      if (horoscopeCard) {
        horoscopeCard.addEventListener('click', function() {
          alert('Horoscope Manager - Coming Soon!');
          console.log('Horoscope Manager clicked!');
        });
      }
      
             // Appointment Dashboard
       const appointmentCard = document.getElementById('appointment-card');
       if (appointmentCard) {
         appointmentCard.addEventListener('click', function() {
           // Navigate directly to the appointment dashboard page instead of showing modal
           window.location.href = '/admin/appointmentdashboard';
           console.log('Navigating to Appointment Dashboard page');
         });
       }
      
      // Blog Manager
      const blogCard = document.getElementById('blog-card');
      if (blogCard) {
        blogCard.addEventListener('click', function() {
          alert('Blog Manager - Coming Soon!');
          console.log('Blog Manager clicked!');
        });
      }
      
      // Image Manager
      const imageCard = document.getElementById('image-card');
      if (imageCard) {
        imageCard.addEventListener('click', function() {
          alert('Image Manager - Coming Soon!');
          console.log('Image Manager clicked!');
        });
      }
      
      // Analytics
      const analyticsCard = document.getElementById('analytics-card');
      if (analyticsCard) {
        analyticsCard.addEventListener('click', function() {
          alert('Analytics Dashboard - Coming Soon!');
          console.log('Analytics Dashboard clicked!');
        });
      }
    }

    // Authentication check
    function checkAuth() {
      const adminEmail = localStorage.getItem('admin_email');
      if (!adminEmail) {
        showLoginPage();
      } else {
        currentUser = { email: adminEmail };
        showAdminDashboard();
        updateUserDisplay();
        loadDashboardData(); // Load real stats when user is already authenticated
      }
    }

    // Show login page
    function showLoginPage() {
      document.getElementById('login-page').classList.remove('hidden');
      document.getElementById('admin-dashboard').classList.add('hidden');
    }

    // Show admin dashboard
    function showAdminDashboard() {
      document.getElementById('login-page').classList.add('hidden');
      document.getElementById('admin-dashboard').classList.remove('hidden');
    }

    // Load dashboard data
    async function loadDashboardData() {
      try {
        await Promise.all([
          loadCounts(),
          loadRecentActivity()
        ]);
        showDashboard();
      } catch (error) {
        console.error('Error loading dashboard data:', error);
      }
    }
    
    // Show dashboard content
    function showDashboard() {
      const modalContainer = document.getElementById('modal-container');
      if (modalContainer) {
        modalContainer.innerHTML = '';
      }
      
      const mainContent = document.querySelector('main');
      if (mainContent) {
        mainContent.style.display = 'block';
      }
    }

    // Load dashboard counts from Supabase
    async function loadCounts() {
      try {
        if (!supabase) {
          console.log('Supabase not initialized, using default counts');
          setDefaultCounts();
          return;
        }

        // Load daily tips count
        const { data: tipsData, error: tipsError } = await supabase
          .from('daily_tips')
          .select('id', { count: 'exact' });
        
        if (tipsError) {
          console.error('Error loading tips count:', tipsError);
        } else {
          document.getElementById('tips-count').textContent = tipsData?.length || 0;
        }

        // Load appointments count
        const { data: appointmentsData, error: appointmentsError } = await supabase
          .from('appointments')
          .select('id', { count: 'exact' });
        
        if (appointmentsError) {
          console.error('Error loading appointments count:', appointmentsError);
        } else {
          document.getElementById('appointments-count').textContent = appointmentsData?.length || 0;
        }

        // Set default counts for features not yet implemented
        document.getElementById('horoscopes-count').textContent = '0';
        document.getElementById('blog-count').textContent = '0';

        console.log('Dashboard counts loaded successfully');
      } catch (error) {
        console.error('Error loading dashboard counts:', error);
        setDefaultCounts();
      }
    }

    // Set default counts when database is not available
    function setDefaultCounts() {
      document.getElementById('tips-count').textContent = '0';
      document.getElementById('horoscopes-count').textContent = '0';
      document.getElementById('appointments-count').textContent = '0';
      document.getElementById('blog-count').textContent = '0';
    }

    // Load recent activity from Supabase
    async function loadRecentActivity() {
      const container = document.getElementById('recent-activity');
      if (!container) return;
      
      try {
        if (!supabase) {
          container.innerHTML = `
            <div class="text-center py-8">
              <span class="text-4xl">üåü</span>
              <p class="mt-2 text-gray-500 dark:text-gray-400">Loading recent activity...</p>
            </div>
          `;
          return;
        }

        // Load recent appointments
        const { data: recentAppointments, error: appointmentsError } = await supabase
          .from('appointments')
          .select('id, name, service_type, created_at')
          .order('created_at', { ascending: false })
          .limit(5);

        // Load recent daily tips
        const { data: recentTips, error: tipsError } = await supabase
          .from('daily_tips')
          .select('id, title, created_at')
          .order('created_at', { ascending: false })
          .limit(3);

        let activityHTML = '<div class="space-y-3">';

        // Add recent appointments
        if (recentAppointments && recentAppointments.length > 0) {
          recentAppointments.forEach(appointment => {
            const timeAgo = getTimeAgo(new Date(appointment.created_at));
            activityHTML += `
              <div class="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div class="w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center">
                  <span class="text-green-600 dark:text-green-400 text-sm">üìÖ</span>
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-gray-900 dark:text-white">New appointment: ${appointment.name}</p>
                  <p class="text-xs text-gray-500 dark:text-gray-400">${appointment.service_type} ‚Ä¢ ${timeAgo}</p>
                </div>
              </div>
            `;
          });
        }

        // Add recent tips
        if (recentTips && recentTips.length > 0) {
          recentTips.forEach(tip => {
            const timeAgo = getTimeAgo(new Date(tip.created_at));
            activityHTML += `
              <div class="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div class="w-8 h-8 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center">
                  <span class="text-purple-600 dark:text-purple-400 text-sm">‚ú®</span>
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-gray-900 dark:text-white">Daily tip: ${tip.title}</p>
                  <p class="text-xs text-gray-500 dark:text-gray-400">${timeAgo}</p>
                </div>
              </div>
            `;
          });
        }

        if (activityHTML === '<div class="space-y-3">') {
          activityHTML += `
            <div class="text-center py-8">
              <span class="text-4xl">üåü</span>
              <p class="mt-2 text-gray-500 dark:text-gray-400">No recent activity</p>
            </div>
          `;
        }

        activityHTML += '</div>';
        container.innerHTML = activityHTML;

      } catch (error) {
        console.error('Error loading recent activity:', error);
        container.innerHTML = `
          <div class="text-center py-8">
            <span class="text-4xl">‚ö†Ô∏è</span>
            <p class="mt-2 text-gray-500 dark:text-gray-400">Error loading activity</p>
          </div>
        `;
      }
    }

    // Helper function to get time ago
    function getTimeAgo(date) {
      const now = new Date();
      const diffInSeconds = Math.floor((now - date) / 1000);
      
      if (diffInSeconds < 60) return 'Just now';
      if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;
      if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;
      if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;
      return `${Math.floor(diffInSeconds / 2592000)} months ago`;
    }
    
    // Daily Tips Manager functions moved to dedicated /admin/dailytips page
    
    // displayTips function moved to dedicated /admin/dailytips page
    
    // handleTipSubmit function moved to dedicated /admin/dailytips page
    
    // clearTipForm, editTip, and deleteTip functions moved to dedicated /admin/dailytips page

    // Handle login form submission - Simplified and more robust
    function setupLoginForm() {
      console.log('Setting up login form...');
      
      // Try multiple approaches to ensure the form is found
      const loginForm = document.getElementById('login-form');
      const submitBtn = document.getElementById('login-submit-btn');
      
      if (loginForm) {
        console.log('Login form found, setting up event listener');
        
        // Remove any existing event listeners
        loginForm.removeEventListener('submit', handleLoginSubmit);
        
        // Add new event listener with capture to ensure it's caught
        loginForm.addEventListener('submit', handleLoginSubmit, true);
        
        // Also add click listener to submit button as backup
        if (submitBtn) {
          submitBtn.removeEventListener('click', handleLoginSubmit);
          submitBtn.addEventListener('click', handleLoginSubmit);
          console.log('Submit button click listener added');
        }
        
        console.log('Login form event listener setup complete');
      } else {
        console.error('Login form not found! Retrying in 500ms...');
        // Retry if form not found (might be timing issue)
        setTimeout(() => {
          setupLoginForm();
        }, 500);
      }
    }

    // Separate login submit handler for better debugging
    function handleLoginSubmit(e) {
      e.preventDefault();
      console.log('=== LOGIN ATTEMPT STARTED ===');
      
      const usernameInput = document.getElementById('login-username');
      const passwordInput = document.getElementById('login-password');
      const submitBtn = document.getElementById('login-submit-btn');
      const btnText = document.getElementById('login-btn-text');
      const btnLoading = document.getElementById('login-btn-loading');
      
      console.log('Form elements found:', { 
        usernameInput: !!usernameInput, 
        passwordInput: !!passwordInput, 
        submitBtn: !!submitBtn, 
        btnText: !!btnText, 
        btnLoading: !!btnLoading 
      });
      
      if (!usernameInput || !passwordInput) {
        console.error('Missing form inputs!');
        showNotification('Form error: Missing input fields', 'error');
        return;
      }
      
      const username = usernameInput.value.trim();
      const password = passwordInput.value.trim();
      
      console.log('Login attempt:', { username, passwordLength: password.length });
      
      if (!username || !password) {
        console.log('Empty credentials provided');
        showNotification('Please enter both username and password', 'error');
        return;
      }
      
      // Show loading state
      if (submitBtn) {
        submitBtn.disabled = true;
        if (btnText) btnText.classList.add('hidden');
        if (btnLoading) btnLoading.classList.remove('hidden');
      }
      
      // Immediate authentication (no delay for testing)
      console.log('Checking credentials...');
      
      // Get stored password for validation
      const storedPassword = getStoredPassword();
      
      // Simple authentication - Use stored password
      if (username === 'admin' && password === storedPassword) {
        console.log('‚úÖ LOGIN SUCCESSFUL!');
        localStorage.setItem('admin_email', username);
        localStorage.setItem('admin_username', username);
        currentUser = { email: username, username: username };
        showAdminDashboard();
        updateUserDisplay();
        loadDashboardData();
        showNotification('Login successful! Welcome to JyotirSetu Admin', 'success');
      } else {
        console.log('‚ùå LOGIN FAILED - Invalid credentials');
        console.log('Expected: admin / [stored password]');
        console.log('Received:', username, '/', password);
        showNotification('Invalid credentials. Please check your username and password.', 'error');
      }
      
      // Reset button state
      if (submitBtn) {
        submitBtn.disabled = false;
        if (btnText) btnText.classList.remove('hidden');
        if (btnLoading) btnLoading.classList.add('hidden');
      }
      
      console.log('=== LOGIN ATTEMPT COMPLETED ===');
    }

    // Test login function for debugging
    function testLogin() {
      console.log('üß™ TEST LOGIN FUNCTION CALLED');
      
      // Auto-fill the form with correct credentials
      const usernameInput = document.getElementById('login-username');
      const passwordInput = document.getElementById('login-password');
      
      if (usernameInput && passwordInput) {
        const storedPassword = getStoredPassword();
        usernameInput.value = 'admin';
        passwordInput.value = storedPassword;
        console.log('‚úÖ Form auto-filled with correct credentials');
        console.log('Using stored password:', storedPassword);
        
        // Trigger the login
        setTimeout(() => {
          handleLoginSubmit(new Event('submit'));
        }, 100);
      } else {
        console.error('‚ùå Form inputs not found for test login');
        showNotification('Test login failed: Form inputs not found', 'error');
      }
    }

    // Close modal
    function closeModal() {
      console.log('closeModal() called - this will close the modal'); // Debug log
      const modal = document.getElementById('modal-container');
      if (modal) {
        modal.innerHTML = '';
        console.log('Modal closed'); // Debug log
      }
    }

    // Toggle password visibility
    function togglePasswordVisibility(inputId, toggleId) {
      const input = document.getElementById(inputId);
      const toggle = document.getElementById(toggleId);
      
      if (input && toggle) {
        if (input.type === 'password') {
          input.type = 'text';
          // Change to eye-slash icon (hidden)
          toggle.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
          `;
        } else {
          input.type = 'password';
          // Change to eye icon (visible)
          toggle.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
          `;
        }
      }
    }

    // Setup escape key functionality for modals
    function setupModalEscapeKey() {
      // Remove any existing escape key listeners
      document.removeEventListener('keydown', handleEscapeKey);
      // Add new escape key listener
      document.addEventListener('keydown', handleEscapeKey);
    }

    // Handle escape key press
    function handleEscapeKey(event) {
      if (event.key === 'Escape') {
        console.log('Escape key pressed - closing modal');
        closeModal();
      }
    }

    // Real-time password validation functions
    function validateCurrentPassword() {
      const currentPasswordInput = document.getElementById('current-password') as HTMLInputElement;
      const errorDiv = document.getElementById('current-password-error');
      const storedPassword = getStoredPassword();
      
      if (!currentPasswordInput || !errorDiv) return false;
      
      const currentPassword = currentPasswordInput.value;
      
      if (currentPassword && currentPassword !== storedPassword) {
        errorDiv.textContent = '‚ùå Current password is incorrect';
        errorDiv.classList.remove('hidden');
        return false;
      } else if (currentPassword && currentPassword === storedPassword) {
        errorDiv.classList.add('hidden');
        return true;
      } else {
        errorDiv.classList.add('hidden');
        return false;
      }
    }

    function validateNewPassword() {
      const newPasswordInput = document.getElementById('new-password') as HTMLInputElement;
      const errorDiv = document.getElementById('new-password-error');
      const successDiv = document.getElementById('new-password-success');
      
      if (!newPasswordInput || !errorDiv || !successDiv) return false;
      
      const newPassword = newPasswordInput.value;
      
      if (newPassword && newPassword.length < 8) {
        errorDiv.textContent = '‚ùå Password must be at least 8 characters long';
        errorDiv.classList.remove('hidden');
        successDiv.classList.add('hidden');
        return false;
      } else if (newPassword && newPassword.length >= 8) {
        errorDiv.classList.add('hidden');
        successDiv.classList.remove('hidden');
        return true;
      } else {
        errorDiv.classList.add('hidden');
        successDiv.classList.add('hidden');
        return false;
      }
    }

    function validatePasswordMatch() {
      const newPasswordInput = document.getElementById('new-password') as HTMLInputElement;
      const confirmPasswordInput = document.getElementById('confirm-password') as HTMLInputElement;
      const errorDiv = document.getElementById('confirm-password-error');
      const successDiv = document.getElementById('confirm-password-success');
      
      if (!newPasswordInput || !confirmPasswordInput || !errorDiv || !successDiv) return false;
      
      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;
      
      if (confirmPassword && newPassword !== confirmPassword) {
        errorDiv.textContent = '‚ùå Passwords do not match';
        errorDiv.classList.remove('hidden');
        successDiv.classList.add('hidden');
        return false;
      } else if (confirmPassword && newPassword === confirmPassword) {
        errorDiv.classList.add('hidden');
        successDiv.classList.remove('hidden');
        return true;
      } else {
        errorDiv.classList.add('hidden');
        successDiv.classList.add('hidden');
        return false;
      }
    }

    // Check if all validations pass
    function checkAllValidations() {
      const currentValid = validateCurrentPassword();
      const newValid = validateNewPassword();
      const matchValid = validatePasswordMatch();
      
      const updateBtn = document.getElementById('update-password-btn') as HTMLButtonElement;
      if (updateBtn) {
        if (currentValid && newValid && matchValid) {
          updateBtn.disabled = false;
          updateBtn.classList.remove('disabled:bg-gray-400', 'disabled:cursor-not-allowed');
        } else {
          updateBtn.disabled = true;
          updateBtn.classList.add('disabled:bg-gray-400', 'disabled:cursor-not-allowed');
        }
      }
    }

    // Update user display
    function updateUserDisplay() {
      const userSpan = document.getElementById('admin-welcome');
      if (userSpan && currentUser) {
        userSpan.textContent = `Welcome, ${currentUser.email}`;
      }
    }

         // All manager functions are now handled by event listeners above

         // Show notification function (single implementation)

    // Show notification function
    function showNotification(message, type) {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white font-medium z-[999999] ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 
        type === 'info' ? 'bg-blue-500' : 'bg-gray-500'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
    
         // Logout function
     function setupLogoutButton() {
       const logoutBtn = document.getElementById('logout-btn');
       if (logoutBtn) {
         logoutBtn.addEventListener('click', function() {
           localStorage.removeItem('admin_email');
           localStorage.removeItem('admin_username');
           currentUser = null;
           showLoginPage();
           showNotification('Logged out successfully', 'info');
         });
       }
     }

     // Change password function
     function setupChangePasswordButton() {
       const changePasswordBtn = document.getElementById('change-password-btn');
       if (changePasswordBtn) {
         changePasswordBtn.addEventListener('click', function() {
           showChangePasswordModal();
         });
       }
     }

         // Show change password modal
    function showChangePasswordModal() {
      console.log('Showing change password modal');
      const modal = document.getElementById('modal-container');
      if (!modal) {
        console.error('Modal container not found!');
        return;
      }
      
      modal.innerHTML = `
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" id="change-password-modal-overlay">
          <div class="bg-white dark:bg-slate-800 rounded-xl p-8 max-w-md w-full mx-4">
            <div class="text-center mb-6">
              <span class="text-4xl">üîê</span>
              <h2 class="text-2xl font-bold text-gray-900 dark:text-white mt-2">Change Password</h2>
              <p class="text-gray-600 dark:text-gray-400">Update your admin password</p>
            </div>
            <form id="change-password-form" class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Current Password</label>
                <div class="relative">
                  <input type="password" id="current-password" required class="w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white" oninput="validateCurrentPassword()">
                  <button type="button" onclick="togglePasswordVisibility('current-password', 'current-password-toggle')" class="absolute inset-y-0 right-0 pr-3 flex items-center">
                    <svg id="current-password-toggle" class="h-5 w-5 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                  </button>
                </div>
                <div id="current-password-error" class="text-red-500 text-sm mt-1 hidden"></div>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">New Password</label>
                <div class="relative">
                  <input type="password" id="new-password" required class="w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white" oninput="validateNewPassword()">
                  <button type="button" onclick="togglePasswordVisibility('new-password', 'new-password-toggle')" class="absolute inset-y-0 right-0 pr-3 flex items-center">
                    <svg id="new-password-toggle" class="h-5 w-5 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                  </button>
                </div>
                <div id="new-password-error" class="text-red-500 text-sm mt-1 hidden"></div>
                <div id="new-password-success" class="text-green-500 text-sm mt-1 hidden">‚úÖ Password strength is good</div>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Confirm New Password</label>
                <div class="relative">
                  <input type="password" id="confirm-password" required class="w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white" oninput="validatePasswordMatch()">
                  <button type="button" onclick="togglePasswordVisibility('confirm-password', 'confirm-password-toggle')" class="absolute inset-y-0 right-0 pr-3 flex items-center">
                    <svg id="confirm-password-toggle" class="h-5 w-5 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                  </button>
                </div>
                <div id="confirm-password-error" class="text-red-500 text-sm mt-1 hidden"></div>
                <div id="confirm-password-success" class="text-green-500 text-sm mt-1 hidden">‚úÖ Passwords match</div>
              </div>
              <button type="submit" id="update-password-btn" class="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-medium transition-colors duration-200 disabled:bg-gray-400 disabled:cursor-not-allowed">
                Update Password
              </button>
            </form>
            <div class="mt-4 text-center space-y-2">
              <button id="cancel-password-btn" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 px-4 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200">
                Cancel
              </button>
              <div class="text-xs text-gray-400">
                <button onclick="console.log('Current stored password:', getStoredPassword())" class="text-blue-500 hover:text-blue-700 underline">
                  üîç Debug: Check Stored Password
                </button>
              </div>
            </div>
          </div>
        </div>
      `;

      // Wait for DOM to update, then setup form handler and escape key
      setTimeout(() => {
        setupChangePasswordForm();
        setupModalEscapeKey();
      }, 100);
    }

     // Setup change password form handler
     function setupChangePasswordForm() {
       const changePasswordForm = document.getElementById('change-password-form');
       const cancelBtn = document.getElementById('cancel-password-btn');
       const updateBtn = document.getElementById('update-password-btn');
       
       if (changePasswordForm) {
         console.log('Setting up change password form handler');
         // Remove any existing event listeners
         changePasswordForm.removeEventListener('submit', handleChangePasswordSubmit);
         // Add new event listener
         changePasswordForm.addEventListener('submit', handleChangePasswordSubmit);
       } else {
         console.error('Change password form not found!');
       }
       
       if (cancelBtn) {
         console.log('Setting up cancel button handler');
         cancelBtn.addEventListener('click', function() {
           console.log('Cancel button clicked - closing modal');
           closeModal();
         });
       } else {
         console.error('Cancel button not found!');
       }

       // Add validation triggers to all password inputs
       const currentPasswordInput = document.getElementById('current-password');
       const newPasswordInput = document.getElementById('new-password');
       const confirmPasswordInput = document.getElementById('confirm-password');
       
       if (currentPasswordInput) {
         currentPasswordInput.addEventListener('input', function() {
           validateCurrentPassword();
           checkAllValidations();
         });
       }
       
       if (newPasswordInput) {
         newPasswordInput.addEventListener('input', function() {
           validateNewPassword();
           validatePasswordMatch(); // Also check match when new password changes
           checkAllValidations();
         });
       }
       
       if (confirmPasswordInput) {
         confirmPasswordInput.addEventListener('input', function() {
           validatePasswordMatch();
           checkAllValidations();
         });
       }

       // Add debug button for testing
       if (updateBtn) {
         updateBtn.addEventListener('click', function(e) {
           console.log('Update button clicked - testing form submission');
           console.log('Form element:', changePasswordForm);
           console.log('Form submit event listener attached:', changePasswordForm ? 'Yes' : 'No');
           
           // Manually trigger form submission for debugging
           if (changePasswordForm) {
             const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
             changePasswordForm.dispatchEvent(submitEvent);
           }
         });
       }

       // Initial validation check
       setTimeout(() => {
         checkAllValidations();
       }, 100);
     }

     // Handle change password form submission
     function handleChangePasswordSubmit(e) {
       e.preventDefault();
       console.log('Change password form submitted!');
       
       const currentPassword = document.getElementById('current-password').value;
       const newPassword = document.getElementById('new-password').value;
       const confirmPassword = document.getElementById('confirm-password').value;
       
       console.log('Change password attempt:', { 
         currentPassword: currentPassword ? '***' : 'empty', 
         newPassword: newPassword ? '***' : 'empty',
         confirmPassword: confirmPassword ? '***' : 'empty'
       });
       
       // Validate current password against stored password
       const storedPassword = getStoredPassword();
       if (currentPassword !== storedPassword) {
         console.log('Current password validation failed');
         console.log('Expected:', storedPassword);
         console.log('Received:', currentPassword);
         showNotification('Current password is incorrect', 'error');
         return;
       }
       
       // Validate new password
       if (newPassword.length < 8) {
         console.log('New password too short');
         showNotification('New password must be at least 8 characters long', 'error');
         return;
       }
       
       // Validate password confirmation
       if (newPassword !== confirmPassword) {
         console.log('Password confirmation failed');
         showNotification('New passwords do not match', 'error');
         return;
       }
       
       console.log('Password change successful!');
       
       // Actually update the stored password
       updateStoredPassword(newPassword);
       
       // Show success message
       showNotification('Password updated successfully! You can now use the new password to login.', 'success');
       closeModal();
     }

     // ===== APPOINTMENT DASHBOARD FUNCTIONS =====
     
     // These functions are no longer needed since we have a dedicated /admin/appointmentdashboard page
     // async function loadAppointmentsFromSupabase() {
     //   try {
     //     console.log('Loading appointments from Supabase...');
         
     //     const { data: supabaseAppointments, error } = await supabase
     //       .from('appointments')
     //       .select('*')
     //       .order('created_at', { ascending: false });
         
     //     if (error) {
     //       console.error('Supabase error:', error);
     //       showNotification('Error loading appointments: ' + error.message, 'error');
     //       return;
     //     }
         
     //     console.log('Appointments loaded from Supabase:', supabaseAppointments);
     //     appointments = supabaseAppointments || [];
     //     displayAppointments(appointments);
         
     //   } catch (error) {
     //     console.error('Error loading appointments:', error);
     //     showNotification('Error loading appointments', 'error');
     //   }
     // }
     
     // function displayAppointments(appointmentsList) {
     //   const tbody = document.getElementById('appointments-tbody');
     //   if (!tbody) return;
       
     //   if (!appointmentsList || appointmentsList.length === 0) {
     //     tbody.innerHTML = `
     //       <tr>
     //         <td colspan="6" class="px-6 py-12 text-center text-gray-500 dark:text-gray-400">
     //           <span class="text-4xl">üìÖ</span>
     //           <p class="mt-2">No appointments found</p>
     //         </td>
     //       </tr>
     //     `;
     //     return;
     //   }
       
     //   tbody.innerHTML = appointmentsList.map(appointment => `
     //     <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
     //       <td class="px-6 py-4 whitespace-nowrap">
     //         <div>
     //           <div class="text-sm font-medium text-gray-900 dark:text-white">${appointment.name}</div>
     //           <div class="text-sm text-gray-500 dark:text-gray-400">${appointment.email}</div>
     //           <div class="text-sm text-gray-500 dark:text-gray-400">${appointment.phone}</div>
     //           <div class="text-xs text-gray-400 mt-1">${appointment.consultation_method || 'Not specified'}</div>
     //         </div>
     //       </td>
     //       <td class="px-6 py-4 whitespace-nowrap">
     //         <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
     //           ${getServiceDisplayName(appointment.service)}
     //         </span>
     //       </td>
     //       <td class="px-6 py-4 whitespace-nowrap">
     //         <div class="text-sm text-gray-900 dark:text-white">${formatDate(appointment.date)}</div>
     //         <div class="text-sm text-gray-500 dark:text-gray-400">${appointment.time}</div>
     //       </td>
     //       <td class="px-6 py-4 whitespace-nowrap">
     //         <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}">
     //           ${appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}
     //         </span>
     //       </td>
     //       <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
     //         <div class="flex space-x-2">
     //           <button
     //             class="change-status-btn text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
     //             data-appointment-id="${appointment.id}"
     //             data-current-status="${appointment.status}"
     //           >
     //             Change Status
     //           </button>
     //           <button
     //             class="view-details-btn text-green-600 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300"
     //             data-appointment-id="${appointment.id}"
     //           >
     //             View Details
     //           </button>
     //         </div>
     //       </td>
     //     </tr>
     //   `).join('');
       
     //   // Add event listeners for view details buttons
     //   addViewDetailsListeners();
       
     //   // Add event listeners for change status buttons
     //   addChangeStatusListeners();
     // }
     
     // function getServiceDisplayName(service) {
     //   const serviceNames = {
     //     'astrology': 'üîÆ Astrology',
     //     'gemstone': 'üíé Gemstone',
     //     'palmistry': '‚úã Palmistry',
     //     'numerology': 'üî¢ Numerology',
     //     'career-finance': 'üíº Career & Finance',
     //     'matchmaking': 'üíï Matchmaking',
     //     'study-education': 'üìö Study/Education',
     //     'corporate': 'üè¢ Corporate',
     //     'other': '‚ú® Other'
     //   };
     //   return serviceNames[service] || service;
     // }
     
     // function getStatusColor(status) {
     //   switch (status) {
     //     case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
     //     case 'confirmed': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
     //     case 'cancelled': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
     //     case 'completed': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
     //     default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
     //   }
     // }
     
     // function addAppointmentEventListeners() {
     //   // Close button
     //   const closeBtn = document.getElementById('close-appointment-modal-btn');
     //   if (closeBtn) {
     //     closeBtn.addEventListener('click', closeModal);
     //   }
       
     //   // Apply filters button
     //   const applyFiltersBtn = document.getElementById('apply-filters-btn');
     //   if (applyFiltersBtn) {
     //     applyFiltersBtn.addEventListener('click', applyAppointmentFilters);
     //   }
       
     //   // Status filter change
     //   const statusFilter = document.getElementById('status-filter');
     //   if (statusFilter) {
     //     statusFilter.addEventListener('change', applyAppointmentFilters);
     //   }
     // }
     
     // function addViewDetailsListeners() {
     //   document.querySelectorAll('.view-details-btn').forEach(btn => {
     //     btn.addEventListener('click', function() {
     //       const appointmentId = this.getAttribute('data-appointment-id');
     //       showAppointmentDetails(appointmentId);
     //     });
     //   });
     // }
     
     // function showAppointmentDetails(appointmentId) {
     //   const appointment = appointments.find(apt => apt.id == appointmentId);
     //   if (!appointment) return;
       
     //   const modalContainer = document.getElementById('modal-container');
     //   modalContainer.innerHTML = `
     //     <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[99999]">
     //       <div class="bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
     //         <!-- Header -->
     //         <div class="flex justify-between items-center p-6 border-b border-purple-200 dark:border-purple-700">
     //           <div>
     //             <h2 class="text-2xl font-bold text-gray-900 dark:text-white">üìã Appointment Details</h2>
     //             <p class="text-gray-600 dark:text-gray-400">Complete information for ${appointment.name}</p>
     //           </div>
     //           <button
     //             id="close-details-modal-btn"
     //             class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 text-2xl font-bold"
     //           >
     //             √ó
     //           </button>
     //         </div>
             
     //         <!-- Content -->
     //         <div class="p-6 space-y-6">
     //           <!-- Basic Information -->
     //           <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
     //             <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">üë§ Basic Information</h3>
     //             <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
     //               <div>
     //                 <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Name</label>
     //                 <p class="text-gray-900 dark:text-white">${appointment.name}</p>
     //               </div>
     //               <div>
     //                 <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Email</label>
     //                 <p class="text-gray-900 dark:text-white">${appointment.email}</p>
     //               </div>
     //               <div>
     //                 <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Phone</label>
     //                 <p class="text-gray-900 dark:text-white">${appointment.phone}</p>
     //               </div>
     //               <div>
     //                 <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Consultation Method</label>
     //                 <p class="text-gray-900 dark:text-white">${appointment.consultation_method || 'Not specified'}</p>
     //               </div>
     //             </div>
     //           </div>
               
     //           <!-- Service Information -->
     //           <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
     //             <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">üéØ Service Details</h3>
     //             <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
     //               <div>
     //                 <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Service Type</label>
     //                 <p class="text-gray-900 dark:text-white">${getServiceDisplayName(appointment.service)}</p>
     //               </div>
     //               <div>
     //                 <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Appointment Date</label>
     //                 <p class="text-gray-900 dark:text-white">${formatDate(appointment.date)}</p>
     //               </div>
     //               <div>
     //                 <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Appointment Time</label>
     //                 <p class="text-gray-900 dark:text-white">${appointment.time}</p>
     //               </div>
     //               <div>
     //                 <label class="text-sm font-medium text-gray-600 dark:text-gray-400">Status</label>
     //                 <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}">
     //                   ${appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}
     //                 </span>
     //               </div>
     //             </div>
     //           </div>
               
     //           <!-- Service-Specific Details -->
     //           ${appointment.service_details && Object.keys(appointment.service_details).length > 0 ? `
     //             <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
     //               <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">üîç Service-Specific Information</h3>
     //               <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
     //                 ${Object.entries(appointment.service_details).map(([key, value]) => `
     //                   <div>
     //                     <label class="text-sm font-medium text-gray-600 dark:text-gray-400">${key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</label>
     //                     <p class="text-gray-900 dark:text-white">${value}</p>
     //                   </div>
     //                 `).join('')}
     //               </div>
     //             </div>
     //           ` : ''}
               
     //           <!-- Message/Query -->
     //           ${appointment.message ? `
     //             <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
     //               <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">üí¨ Message/Query</h3>
     //               <p class="text-gray-900 dark:text-white">${appointment.message}</p>
     //             </div>
     //           ` : ''}
     //         </div>
     //       </div>
     //     </div>
     //   `;
       
     //   // Add close button listener
     //   const closeBtn = document.getElementById('close-details-modal-btn');
     //   if (closeBtn) {
     //     closeBtn.addEventListener('click', closeModal);
     //   }
     // }
     
     // function applyAppointmentFilters() {
     //   const statusFilter = document.getElementById('status-filter');
     //   const dateFromFilter = document.getElementById('date-from-filter');
     //   const dateToFilter = document.getElementById('date-to-filter');
       
     //   if (!statusFilter || !dateFromFilter || !dateToFilter) return;
       
     //   let filteredAppointments = [...appointments];
       
     //   // Filter by status
     //   if (statusFilter.value) {
     //     filteredAppointments = filteredAppointments.filter(apt => apt.status === statusFilter.value);
     //   }
       
     //   // Filter by date range
     //   if (dateFromFilter.value) {
     //     filteredAppointments = filteredAppointments.filter(apt => apt.date >= dateFromFilter.value);
     //   }
       
     //   if (dateToFilter.value) {
     //     filteredAppointments = filteredAppointments.filter(apt => apt.date <= dateToFilter.value);
     //   }
       
     //   displayAppointments(filteredAppointments);
     // }
     
     // function formatDate(dateString) {
     //   const date = new Date(dateString);
     //   return date.toLocaleDateString('en-US', { 
     //     year: 'numeric', 
     //     month: 'short', 
     //     day: 'numeric' 
     //   });
     // }

     // function addChangeStatusListeners() {
     //   document.querySelectorAll('.change-status-btn').forEach(btn => {
     //     btn.addEventListener('click', function() {
     //       const appointmentId = this.getAttribute('data-appointment-id');
     //       const currentStatus = this.getAttribute('data-current-status');
     //       showChangeStatusModal(appointmentId, currentStatus);
     //     });
     //   });
     // }

     // function showChangeStatusModal(appointmentId, currentStatus) {
     //   const modalContainer = document.getElementById('modal-container');
     //   if (!modalContainer) return;

     //   modalContainer.innerHTML = `
     //     <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[99999]">
     //       <div class="bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
     //         <!-- Header -->
     //         <div class="flex justify-between items-center p-6 border-b border-purple-200 dark:border-purple-700">
     //           <div>
     //             <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Change Status for Appointment</h2>
     //             <p class="text-gray-600 dark:text-gray-400">Current Status: ${currentStatus.charAt(0).toUpperCase() + currentStatus.slice(1)}</p>
     //           </div>
     //           <button
     //             id="close-status-modal-btn"
     //             class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 text-2xl font-bold"
     //           >
     //             √ó
     //           </button>
     //         </div>
             
     //         <!-- Content -->
     //         <div class="p-6 space-y-4">
     //           <div>
     //             <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">New Status</label>
     //             <select id="new-status-select" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-slate-700 dark:text-white">
     //               <option value="pending">Pending</option>
     //               <option value="confirmed">Confirmed</option>
     //               <option value="cancelled">Cancelled</option>
     //               <option value="completed">Completed</option>
     //             </select>
     //           </div>
     //           <button id="confirm-status-change-btn" class="w-full bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200">
     //             Confirm Status Change
     //           </button>
     //         </div>
     //       </div>
     //     </div>
     //   `;

     //   // Add event listeners for the new modal
     //   const closeBtn = document.getElementById('close-status-modal-btn');
     //   if (closeBtn) {
     //     closeBtn.addEventListener('click', closeModal);
     //   }

     //   const confirmBtn = document.getElementById('confirm-status-change-btn');
     //   if (confirmBtn) {
     //     confirmBtn.addEventListener('click', async function() {
     //       const newStatusSelect = document.getElementById('new-status-select') as HTMLSelectElement;
     //       if (!newStatusSelect) {
     //         showNotification('Status select element not found.', 'error');
     //         return;
     //       }
           
     //       const newStatus = newStatusSelect.value;
     //       if (!newStatus) {
     //         showNotification('Please select a new status.', 'info');
     //         return;
     //       }

     //       try {
     //         console.log('Changing status for appointment:', appointmentId, 'from', currentStatus, 'to', newStatus);
     //         const { error } = await supabase
     //           .from('appointments')
     //           .update({ status: newStatus })
     //           .eq('id', appointmentId);

     //         if (error) {
     //           console.error('Supabase status update error:', error);
     //           showNotification('Error updating status: ' + error.message, 'error');
     //           return;
     //         }

     //         console.log('Status updated successfully in Supabase');
     //         showNotification('Status updated successfully!', 'success');
     //         await loadAppointmentsFromSupabase(); // Reload appointments to show updated status
     //         closeModal();
     //       } catch (error) {
     //         console.error('Error changing status:', error);
     //         showNotification('Error changing status', 'error');
     //       }
     //     });
     //   }
     // }
   </script>
</Layout>
